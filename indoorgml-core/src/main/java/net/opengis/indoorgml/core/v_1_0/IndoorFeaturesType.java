//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.22 at 10:03:02 PM KST 
//


package net.opengis.indoorgml.core.v_1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for IndoorFeaturesType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IndoorFeaturesType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="primalSpaceFeatures" type="{http://www.opengis.net/indoorgml/1.0/core}PrimalSpaceFeaturesPropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/indoorgml/1.0/core}MultiLayeredGraph"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IndoorFeaturesType", propOrder = {
    "primalSpaceFeatures",
    "multiLayeredGraph"
})
public class IndoorFeaturesType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected PrimalSpaceFeaturesPropertyType primalSpaceFeatures;
    @XmlElement(name = "MultiLayeredGraph", required = true)
    protected MultiLayeredGraphType multiLayeredGraph;

    /**
     * Gets the value of the primalSpaceFeatures property.
     * 
     * @return
     *     possible object is
     *     {@link PrimalSpaceFeaturesPropertyType }
     *     
     */
    public PrimalSpaceFeaturesPropertyType getPrimalSpaceFeatures() {
        return primalSpaceFeatures;
    }

    /**
     * Sets the value of the primalSpaceFeatures property.
     * 
     * @param value
     *     allowed object is
     *     {@link PrimalSpaceFeaturesPropertyType }
     *     
     */
    public void setPrimalSpaceFeatures(PrimalSpaceFeaturesPropertyType value) {
        this.primalSpaceFeatures = value;
    }

    /**
     * Gets the value of the multiLayeredGraph property.
     * 
     * @return
     *     possible object is
     *     {@link MultiLayeredGraphType }
     *     
     */
    public MultiLayeredGraphType getMultiLayeredGraph() {
        return multiLayeredGraph;
    }

    /**
     * Sets the value of the multiLayeredGraph property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiLayeredGraphType }
     *     
     */
    public void setMultiLayeredGraph(MultiLayeredGraphType value) {
        this.multiLayeredGraph = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            PrimalSpaceFeaturesPropertyType thePrimalSpaceFeatures;
            thePrimalSpaceFeatures = this.getPrimalSpaceFeatures();
            strategy.appendField(locator, this, "primalSpaceFeatures", buffer, thePrimalSpaceFeatures);
        }
        {
            MultiLayeredGraphType theMultiLayeredGraph;
            theMultiLayeredGraph = this.getMultiLayeredGraph();
            strategy.appendField(locator, this, "multiLayeredGraph", buffer, theMultiLayeredGraph);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof IndoorFeaturesType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final IndoorFeaturesType that = ((IndoorFeaturesType) object);
        {
            PrimalSpaceFeaturesPropertyType lhsPrimalSpaceFeatures;
            lhsPrimalSpaceFeatures = this.getPrimalSpaceFeatures();
            PrimalSpaceFeaturesPropertyType rhsPrimalSpaceFeatures;
            rhsPrimalSpaceFeatures = that.getPrimalSpaceFeatures();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "primalSpaceFeatures", lhsPrimalSpaceFeatures), LocatorUtils.property(thatLocator, "primalSpaceFeatures", rhsPrimalSpaceFeatures), lhsPrimalSpaceFeatures, rhsPrimalSpaceFeatures)) {
                return false;
            }
        }
        {
            MultiLayeredGraphType lhsMultiLayeredGraph;
            lhsMultiLayeredGraph = this.getMultiLayeredGraph();
            MultiLayeredGraphType rhsMultiLayeredGraph;
            rhsMultiLayeredGraph = that.getMultiLayeredGraph();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multiLayeredGraph", lhsMultiLayeredGraph), LocatorUtils.property(thatLocator, "multiLayeredGraph", rhsMultiLayeredGraph), lhsMultiLayeredGraph, rhsMultiLayeredGraph)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            PrimalSpaceFeaturesPropertyType thePrimalSpaceFeatures;
            thePrimalSpaceFeatures = this.getPrimalSpaceFeatures();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primalSpaceFeatures", thePrimalSpaceFeatures), currentHashCode, thePrimalSpaceFeatures);
        }
        {
            MultiLayeredGraphType theMultiLayeredGraph;
            theMultiLayeredGraph = this.getMultiLayeredGraph();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multiLayeredGraph", theMultiLayeredGraph), currentHashCode, theMultiLayeredGraph);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof IndoorFeaturesType) {
            final IndoorFeaturesType copy = ((IndoorFeaturesType) draftCopy);
            if (this.primalSpaceFeatures!= null) {
                PrimalSpaceFeaturesPropertyType sourcePrimalSpaceFeatures;
                sourcePrimalSpaceFeatures = this.getPrimalSpaceFeatures();
                PrimalSpaceFeaturesPropertyType copyPrimalSpaceFeatures = ((PrimalSpaceFeaturesPropertyType) strategy.copy(LocatorUtils.property(locator, "primalSpaceFeatures", sourcePrimalSpaceFeatures), sourcePrimalSpaceFeatures));
                copy.setPrimalSpaceFeatures(copyPrimalSpaceFeatures);
            } else {
                copy.primalSpaceFeatures = null;
            }
            if (this.multiLayeredGraph!= null) {
                MultiLayeredGraphType sourceMultiLayeredGraph;
                sourceMultiLayeredGraph = this.getMultiLayeredGraph();
                MultiLayeredGraphType copyMultiLayeredGraph = ((MultiLayeredGraphType) strategy.copy(LocatorUtils.property(locator, "multiLayeredGraph", sourceMultiLayeredGraph), sourceMultiLayeredGraph));
                copy.setMultiLayeredGraph(copyMultiLayeredGraph);
            } else {
                copy.multiLayeredGraph = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new IndoorFeaturesType();
    }

}
