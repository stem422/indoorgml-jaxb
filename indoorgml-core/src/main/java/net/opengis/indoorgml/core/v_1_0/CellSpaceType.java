//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.22 at 10:03:02 PM KST 
//


package net.opengis.indoorgml.core.v_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import net.opengis.gml.v_3_2_1.SolidPropertyType;
import net.opengis.gml.v_3_2_1.SurfacePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CellSpaceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CellSpaceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.opengis.net/indoorgml/1.0/core}CellSpaceGeometry" minOccurs="0"/&gt;
 *         &lt;element name="duality" type="{http://www.opengis.net/indoorgml/1.0/core}StatePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="externalReference" type="{http://www.opengis.net/indoorgml/1.0/core}ExternalReferenceType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="partialboundedBy" type="{http://www.opengis.net/indoorgml/1.0/core}CellSpaceBoundaryPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CellSpaceType", propOrder = {
    "geometry3D",
    "geometry2D",
    "duality",
    "externalReference",
    "partialboundedBy"
})
public class CellSpaceType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "Geometry3D")
    protected SolidPropertyType geometry3D;
    @XmlElement(name = "Geometry2D")
    protected SurfacePropertyType geometry2D;
    protected StatePropertyType duality;
    protected List<ExternalReferenceType> externalReference;
    protected List<CellSpaceBoundaryPropertyType> partialboundedBy;

    /**
     * Gets the value of the geometry3D property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getGeometry3D() {
        return geometry3D;
    }

    /**
     * Sets the value of the geometry3D property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setGeometry3D(SolidPropertyType value) {
        this.geometry3D = value;
    }

    /**
     * Gets the value of the geometry2D property.
     * 
     * @return
     *     possible object is
     *     {@link SurfacePropertyType }
     *     
     */
    public SurfacePropertyType getGeometry2D() {
        return geometry2D;
    }

    /**
     * Sets the value of the geometry2D property.
     * 
     * @param value
     *     allowed object is
     *     {@link SurfacePropertyType }
     *     
     */
    public void setGeometry2D(SurfacePropertyType value) {
        this.geometry2D = value;
    }

    /**
     * Gets the value of the duality property.
     * 
     * @return
     *     possible object is
     *     {@link StatePropertyType }
     *     
     */
    public StatePropertyType getDuality() {
        return duality;
    }

    /**
     * Sets the value of the duality property.
     * 
     * @param value
     *     allowed object is
     *     {@link StatePropertyType }
     *     
     */
    public void setDuality(StatePropertyType value) {
        this.duality = value;
    }

    /**
     * Gets the value of the externalReference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the externalReference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExternalReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ExternalReferenceType }
     * 
     * 
     */
    public List<ExternalReferenceType> getExternalReference() {
        if (externalReference == null) {
            externalReference = new ArrayList<ExternalReferenceType>();
        }
        return this.externalReference;
    }

    /**
     * Gets the value of the partialboundedBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the partialboundedBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPartialboundedBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CellSpaceBoundaryPropertyType }
     * 
     * 
     */
    public List<CellSpaceBoundaryPropertyType> getPartialboundedBy() {
        if (partialboundedBy == null) {
            partialboundedBy = new ArrayList<CellSpaceBoundaryPropertyType>();
        }
        return this.partialboundedBy;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            SolidPropertyType theGeometry3D;
            theGeometry3D = this.getGeometry3D();
            strategy.appendField(locator, this, "geometry3D", buffer, theGeometry3D);
        }
        {
            SurfacePropertyType theGeometry2D;
            theGeometry2D = this.getGeometry2D();
            strategy.appendField(locator, this, "geometry2D", buffer, theGeometry2D);
        }
        {
            StatePropertyType theDuality;
            theDuality = this.getDuality();
            strategy.appendField(locator, this, "duality", buffer, theDuality);
        }
        {
            List<ExternalReferenceType> theExternalReference;
            theExternalReference = (((this.externalReference!= null)&&(!this.externalReference.isEmpty()))?this.getExternalReference():null);
            strategy.appendField(locator, this, "externalReference", buffer, theExternalReference);
        }
        {
            List<CellSpaceBoundaryPropertyType> thePartialboundedBy;
            thePartialboundedBy = (((this.partialboundedBy!= null)&&(!this.partialboundedBy.isEmpty()))?this.getPartialboundedBy():null);
            strategy.appendField(locator, this, "partialboundedBy", buffer, thePartialboundedBy);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CellSpaceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CellSpaceType that = ((CellSpaceType) object);
        {
            SolidPropertyType lhsGeometry3D;
            lhsGeometry3D = this.getGeometry3D();
            SolidPropertyType rhsGeometry3D;
            rhsGeometry3D = that.getGeometry3D();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometry3D", lhsGeometry3D), LocatorUtils.property(thatLocator, "geometry3D", rhsGeometry3D), lhsGeometry3D, rhsGeometry3D)) {
                return false;
            }
        }
        {
            SurfacePropertyType lhsGeometry2D;
            lhsGeometry2D = this.getGeometry2D();
            SurfacePropertyType rhsGeometry2D;
            rhsGeometry2D = that.getGeometry2D();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometry2D", lhsGeometry2D), LocatorUtils.property(thatLocator, "geometry2D", rhsGeometry2D), lhsGeometry2D, rhsGeometry2D)) {
                return false;
            }
        }
        {
            StatePropertyType lhsDuality;
            lhsDuality = this.getDuality();
            StatePropertyType rhsDuality;
            rhsDuality = that.getDuality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "duality", lhsDuality), LocatorUtils.property(thatLocator, "duality", rhsDuality), lhsDuality, rhsDuality)) {
                return false;
            }
        }
        {
            List<ExternalReferenceType> lhsExternalReference;
            lhsExternalReference = (((this.externalReference!= null)&&(!this.externalReference.isEmpty()))?this.getExternalReference():null);
            List<ExternalReferenceType> rhsExternalReference;
            rhsExternalReference = (((that.externalReference!= null)&&(!that.externalReference.isEmpty()))?that.getExternalReference():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "externalReference", lhsExternalReference), LocatorUtils.property(thatLocator, "externalReference", rhsExternalReference), lhsExternalReference, rhsExternalReference)) {
                return false;
            }
        }
        {
            List<CellSpaceBoundaryPropertyType> lhsPartialboundedBy;
            lhsPartialboundedBy = (((this.partialboundedBy!= null)&&(!this.partialboundedBy.isEmpty()))?this.getPartialboundedBy():null);
            List<CellSpaceBoundaryPropertyType> rhsPartialboundedBy;
            rhsPartialboundedBy = (((that.partialboundedBy!= null)&&(!that.partialboundedBy.isEmpty()))?that.getPartialboundedBy():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partialboundedBy", lhsPartialboundedBy), LocatorUtils.property(thatLocator, "partialboundedBy", rhsPartialboundedBy), lhsPartialboundedBy, rhsPartialboundedBy)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            SolidPropertyType theGeometry3D;
            theGeometry3D = this.getGeometry3D();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometry3D", theGeometry3D), currentHashCode, theGeometry3D);
        }
        {
            SurfacePropertyType theGeometry2D;
            theGeometry2D = this.getGeometry2D();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometry2D", theGeometry2D), currentHashCode, theGeometry2D);
        }
        {
            StatePropertyType theDuality;
            theDuality = this.getDuality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "duality", theDuality), currentHashCode, theDuality);
        }
        {
            List<ExternalReferenceType> theExternalReference;
            theExternalReference = (((this.externalReference!= null)&&(!this.externalReference.isEmpty()))?this.getExternalReference():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "externalReference", theExternalReference), currentHashCode, theExternalReference);
        }
        {
            List<CellSpaceBoundaryPropertyType> thePartialboundedBy;
            thePartialboundedBy = (((this.partialboundedBy!= null)&&(!this.partialboundedBy.isEmpty()))?this.getPartialboundedBy():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partialboundedBy", thePartialboundedBy), currentHashCode, thePartialboundedBy);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CellSpaceType) {
            final CellSpaceType copy = ((CellSpaceType) draftCopy);
            if (this.geometry3D!= null) {
                SolidPropertyType sourceGeometry3D;
                sourceGeometry3D = this.getGeometry3D();
                SolidPropertyType copyGeometry3D = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "geometry3D", sourceGeometry3D), sourceGeometry3D));
                copy.setGeometry3D(copyGeometry3D);
            } else {
                copy.geometry3D = null;
            }
            if (this.geometry2D!= null) {
                SurfacePropertyType sourceGeometry2D;
                sourceGeometry2D = this.getGeometry2D();
                SurfacePropertyType copyGeometry2D = ((SurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "geometry2D", sourceGeometry2D), sourceGeometry2D));
                copy.setGeometry2D(copyGeometry2D);
            } else {
                copy.geometry2D = null;
            }
            if (this.duality!= null) {
                StatePropertyType sourceDuality;
                sourceDuality = this.getDuality();
                StatePropertyType copyDuality = ((StatePropertyType) strategy.copy(LocatorUtils.property(locator, "duality", sourceDuality), sourceDuality));
                copy.setDuality(copyDuality);
            } else {
                copy.duality = null;
            }
            if ((this.externalReference!= null)&&(!this.externalReference.isEmpty())) {
                List<ExternalReferenceType> sourceExternalReference;
                sourceExternalReference = (((this.externalReference!= null)&&(!this.externalReference.isEmpty()))?this.getExternalReference():null);
                @SuppressWarnings("unchecked")
                List<ExternalReferenceType> copyExternalReference = ((List<ExternalReferenceType> ) strategy.copy(LocatorUtils.property(locator, "externalReference", sourceExternalReference), sourceExternalReference));
                copy.externalReference = null;
                if (copyExternalReference!= null) {
                    List<ExternalReferenceType> uniqueExternalReferencel = copy.getExternalReference();
                    uniqueExternalReferencel.addAll(copyExternalReference);
                }
            } else {
                copy.externalReference = null;
            }
            if ((this.partialboundedBy!= null)&&(!this.partialboundedBy.isEmpty())) {
                List<CellSpaceBoundaryPropertyType> sourcePartialboundedBy;
                sourcePartialboundedBy = (((this.partialboundedBy!= null)&&(!this.partialboundedBy.isEmpty()))?this.getPartialboundedBy():null);
                @SuppressWarnings("unchecked")
                List<CellSpaceBoundaryPropertyType> copyPartialboundedBy = ((List<CellSpaceBoundaryPropertyType> ) strategy.copy(LocatorUtils.property(locator, "partialboundedBy", sourcePartialboundedBy), sourcePartialboundedBy));
                copy.partialboundedBy = null;
                if (copyPartialboundedBy!= null) {
                    List<CellSpaceBoundaryPropertyType> uniquePartialboundedByl = copy.getPartialboundedBy();
                    uniquePartialboundedByl.addAll(copyPartialboundedBy);
                }
            } else {
                copy.partialboundedBy = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CellSpaceType();
    }

}
