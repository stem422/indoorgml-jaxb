//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information describing metadata extensions.
 * 
 * <p>Java class for MD_MetadataExtensionInformation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_MetadataExtensionInformation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="extensionOnLineResource" type="{http://www.isotc211.org/2005/gmd}CI_OnlineResource_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="extendedElementInformation" type="{http://www.isotc211.org/2005/gmd}MD_ExtendedElementInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_MetadataExtensionInformation_Type", propOrder = {
    "extensionOnLineResource",
    "extendedElementInformation"
})
public class MDMetadataExtensionInformationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CIOnlineResourcePropertyType extensionOnLineResource;
    protected List<MDExtendedElementInformationPropertyType> extendedElementInformation;

    /**
     * Gets the value of the extensionOnLineResource property.
     * 
     * @return
     *     possible object is
     *     {@link CIOnlineResourcePropertyType }
     *     
     */
    public CIOnlineResourcePropertyType getExtensionOnLineResource() {
        return extensionOnLineResource;
    }

    /**
     * Sets the value of the extensionOnLineResource property.
     * 
     * @param value
     *     allowed object is
     *     {@link CIOnlineResourcePropertyType }
     *     
     */
    public void setExtensionOnLineResource(CIOnlineResourcePropertyType value) {
        this.extensionOnLineResource = value;
    }

    /**
     * Gets the value of the extendedElementInformation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extendedElementInformation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtendedElementInformation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDExtendedElementInformationPropertyType }
     * 
     * 
     */
    public List<MDExtendedElementInformationPropertyType> getExtendedElementInformation() {
        if (extendedElementInformation == null) {
            extendedElementInformation = new ArrayList<MDExtendedElementInformationPropertyType>();
        }
        return this.extendedElementInformation;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CIOnlineResourcePropertyType theExtensionOnLineResource;
            theExtensionOnLineResource = this.getExtensionOnLineResource();
            strategy.appendField(locator, this, "extensionOnLineResource", buffer, theExtensionOnLineResource);
        }
        {
            List<MDExtendedElementInformationPropertyType> theExtendedElementInformation;
            theExtendedElementInformation = (((this.extendedElementInformation!= null)&&(!this.extendedElementInformation.isEmpty()))?this.getExtendedElementInformation():null);
            strategy.appendField(locator, this, "extendedElementInformation", buffer, theExtendedElementInformation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDMetadataExtensionInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDMetadataExtensionInformationType that = ((MDMetadataExtensionInformationType) object);
        {
            CIOnlineResourcePropertyType lhsExtensionOnLineResource;
            lhsExtensionOnLineResource = this.getExtensionOnLineResource();
            CIOnlineResourcePropertyType rhsExtensionOnLineResource;
            rhsExtensionOnLineResource = that.getExtensionOnLineResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extensionOnLineResource", lhsExtensionOnLineResource), LocatorUtils.property(thatLocator, "extensionOnLineResource", rhsExtensionOnLineResource), lhsExtensionOnLineResource, rhsExtensionOnLineResource)) {
                return false;
            }
        }
        {
            List<MDExtendedElementInformationPropertyType> lhsExtendedElementInformation;
            lhsExtendedElementInformation = (((this.extendedElementInformation!= null)&&(!this.extendedElementInformation.isEmpty()))?this.getExtendedElementInformation():null);
            List<MDExtendedElementInformationPropertyType> rhsExtendedElementInformation;
            rhsExtendedElementInformation = (((that.extendedElementInformation!= null)&&(!that.extendedElementInformation.isEmpty()))?that.getExtendedElementInformation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extendedElementInformation", lhsExtendedElementInformation), LocatorUtils.property(thatLocator, "extendedElementInformation", rhsExtendedElementInformation), lhsExtendedElementInformation, rhsExtendedElementInformation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CIOnlineResourcePropertyType theExtensionOnLineResource;
            theExtensionOnLineResource = this.getExtensionOnLineResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extensionOnLineResource", theExtensionOnLineResource), currentHashCode, theExtensionOnLineResource);
        }
        {
            List<MDExtendedElementInformationPropertyType> theExtendedElementInformation;
            theExtendedElementInformation = (((this.extendedElementInformation!= null)&&(!this.extendedElementInformation.isEmpty()))?this.getExtendedElementInformation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extendedElementInformation", theExtendedElementInformation), currentHashCode, theExtendedElementInformation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDMetadataExtensionInformationType) {
            final MDMetadataExtensionInformationType copy = ((MDMetadataExtensionInformationType) draftCopy);
            if (this.extensionOnLineResource!= null) {
                CIOnlineResourcePropertyType sourceExtensionOnLineResource;
                sourceExtensionOnLineResource = this.getExtensionOnLineResource();
                CIOnlineResourcePropertyType copyExtensionOnLineResource = ((CIOnlineResourcePropertyType) strategy.copy(LocatorUtils.property(locator, "extensionOnLineResource", sourceExtensionOnLineResource), sourceExtensionOnLineResource));
                copy.setExtensionOnLineResource(copyExtensionOnLineResource);
            } else {
                copy.extensionOnLineResource = null;
            }
            if ((this.extendedElementInformation!= null)&&(!this.extendedElementInformation.isEmpty())) {
                List<MDExtendedElementInformationPropertyType> sourceExtendedElementInformation;
                sourceExtendedElementInformation = (((this.extendedElementInformation!= null)&&(!this.extendedElementInformation.isEmpty()))?this.getExtendedElementInformation():null);
                @SuppressWarnings("unchecked")
                List<MDExtendedElementInformationPropertyType> copyExtendedElementInformation = ((List<MDExtendedElementInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "extendedElementInformation", sourceExtendedElementInformation), sourceExtendedElementInformation));
                copy.extendedElementInformation = null;
                if (copyExtendedElementInformation!= null) {
                    List<MDExtendedElementInformationPropertyType> uniqueExtendedElementInformationl = copy.getExtendedElementInformation();
                    uniqueExtendedElementInformationl.addAll(copyExtendedElementInformation);
                }
            } else {
                copy.extendedElementInformation = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDMetadataExtensionInformationType();
    }

}
