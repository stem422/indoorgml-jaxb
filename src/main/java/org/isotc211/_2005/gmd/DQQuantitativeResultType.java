//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.RecordPropertyType;
import org.isotc211._2005.gco.RecordTypePropertyType;
import org.isotc211._2005.gco.UnitOfMeasurePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Quantitative_conformance_measure from Quality Procedures.  -  - Renamed to remove implied use limitation -  - OCL - -- result is type specified by valueDomain - result.tupleType = valueDomain
 * 
 * <p>Java class for DQ_QuantitativeResult_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DQ_QuantitativeResult_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}AbstractDQ_Result_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="valueType" type="{http://www.isotc211.org/2005/gco}RecordType_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="valueUnit" type="{http://www.isotc211.org/2005/gco}UnitOfMeasure_PropertyType"/&gt;
 *         &lt;element name="errorStatistic" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="value" type="{http://www.isotc211.org/2005/gco}Record_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DQ_QuantitativeResult_Type", propOrder = {
    "valueType",
    "valueUnit",
    "errorStatistic",
    "value"
})
public class DQQuantitativeResultType
    extends AbstractDQResultType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected RecordTypePropertyType valueType;
    @XmlElement(required = true)
    protected UnitOfMeasurePropertyType valueUnit;
    protected CharacterStringPropertyType errorStatistic;
    @XmlElement(required = true)
    protected List<RecordPropertyType> value;

    /**
     * Gets the value of the valueType property.
     * 
     * @return
     *     possible object is
     *     {@link RecordTypePropertyType }
     *     
     */
    public RecordTypePropertyType getValueType() {
        return valueType;
    }

    /**
     * Sets the value of the valueType property.
     * 
     * @param value
     *     allowed object is
     *     {@link RecordTypePropertyType }
     *     
     */
    public void setValueType(RecordTypePropertyType value) {
        this.valueType = value;
    }

    /**
     * Gets the value of the valueUnit property.
     * 
     * @return
     *     possible object is
     *     {@link UnitOfMeasurePropertyType }
     *     
     */
    public UnitOfMeasurePropertyType getValueUnit() {
        return valueUnit;
    }

    /**
     * Sets the value of the valueUnit property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnitOfMeasurePropertyType }
     *     
     */
    public void setValueUnit(UnitOfMeasurePropertyType value) {
        this.valueUnit = value;
    }

    /**
     * Gets the value of the errorStatistic property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getErrorStatistic() {
        return errorStatistic;
    }

    /**
     * Sets the value of the errorStatistic property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setErrorStatistic(CharacterStringPropertyType value) {
        this.errorStatistic = value;
    }

    /**
     * Gets the value of the value property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the value property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getValue().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecordPropertyType }
     * 
     * 
     */
    public List<RecordPropertyType> getValue() {
        if (value == null) {
            value = new ArrayList<RecordPropertyType>();
        }
        return this.value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RecordTypePropertyType theValueType;
            theValueType = this.getValueType();
            strategy.appendField(locator, this, "valueType", buffer, theValueType);
        }
        {
            UnitOfMeasurePropertyType theValueUnit;
            theValueUnit = this.getValueUnit();
            strategy.appendField(locator, this, "valueUnit", buffer, theValueUnit);
        }
        {
            CharacterStringPropertyType theErrorStatistic;
            theErrorStatistic = this.getErrorStatistic();
            strategy.appendField(locator, this, "errorStatistic", buffer, theErrorStatistic);
        }
        {
            List<RecordPropertyType> theValue;
            theValue = (((this.value!= null)&&(!this.value.isEmpty()))?this.getValue():null);
            strategy.appendField(locator, this, "value", buffer, theValue);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DQQuantitativeResultType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DQQuantitativeResultType that = ((DQQuantitativeResultType) object);
        {
            RecordTypePropertyType lhsValueType;
            lhsValueType = this.getValueType();
            RecordTypePropertyType rhsValueType;
            rhsValueType = that.getValueType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueType", lhsValueType), LocatorUtils.property(thatLocator, "valueType", rhsValueType), lhsValueType, rhsValueType)) {
                return false;
            }
        }
        {
            UnitOfMeasurePropertyType lhsValueUnit;
            lhsValueUnit = this.getValueUnit();
            UnitOfMeasurePropertyType rhsValueUnit;
            rhsValueUnit = that.getValueUnit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueUnit", lhsValueUnit), LocatorUtils.property(thatLocator, "valueUnit", rhsValueUnit), lhsValueUnit, rhsValueUnit)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsErrorStatistic;
            lhsErrorStatistic = this.getErrorStatistic();
            CharacterStringPropertyType rhsErrorStatistic;
            rhsErrorStatistic = that.getErrorStatistic();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "errorStatistic", lhsErrorStatistic), LocatorUtils.property(thatLocator, "errorStatistic", rhsErrorStatistic), lhsErrorStatistic, rhsErrorStatistic)) {
                return false;
            }
        }
        {
            List<RecordPropertyType> lhsValue;
            lhsValue = (((this.value!= null)&&(!this.value.isEmpty()))?this.getValue():null);
            List<RecordPropertyType> rhsValue;
            rhsValue = (((that.value!= null)&&(!that.value.isEmpty()))?that.getValue():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RecordTypePropertyType theValueType;
            theValueType = this.getValueType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueType", theValueType), currentHashCode, theValueType);
        }
        {
            UnitOfMeasurePropertyType theValueUnit;
            theValueUnit = this.getValueUnit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueUnit", theValueUnit), currentHashCode, theValueUnit);
        }
        {
            CharacterStringPropertyType theErrorStatistic;
            theErrorStatistic = this.getErrorStatistic();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "errorStatistic", theErrorStatistic), currentHashCode, theErrorStatistic);
        }
        {
            List<RecordPropertyType> theValue;
            theValue = (((this.value!= null)&&(!this.value.isEmpty()))?this.getValue():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DQQuantitativeResultType) {
            final DQQuantitativeResultType copy = ((DQQuantitativeResultType) draftCopy);
            if (this.valueType!= null) {
                RecordTypePropertyType sourceValueType;
                sourceValueType = this.getValueType();
                RecordTypePropertyType copyValueType = ((RecordTypePropertyType) strategy.copy(LocatorUtils.property(locator, "valueType", sourceValueType), sourceValueType));
                copy.setValueType(copyValueType);
            } else {
                copy.valueType = null;
            }
            if (this.valueUnit!= null) {
                UnitOfMeasurePropertyType sourceValueUnit;
                sourceValueUnit = this.getValueUnit();
                UnitOfMeasurePropertyType copyValueUnit = ((UnitOfMeasurePropertyType) strategy.copy(LocatorUtils.property(locator, "valueUnit", sourceValueUnit), sourceValueUnit));
                copy.setValueUnit(copyValueUnit);
            } else {
                copy.valueUnit = null;
            }
            if (this.errorStatistic!= null) {
                CharacterStringPropertyType sourceErrorStatistic;
                sourceErrorStatistic = this.getErrorStatistic();
                CharacterStringPropertyType copyErrorStatistic = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "errorStatistic", sourceErrorStatistic), sourceErrorStatistic));
                copy.setErrorStatistic(copyErrorStatistic);
            } else {
                copy.errorStatistic = null;
            }
            if ((this.value!= null)&&(!this.value.isEmpty())) {
                List<RecordPropertyType> sourceValue;
                sourceValue = (((this.value!= null)&&(!this.value.isEmpty()))?this.getValue():null);
                @SuppressWarnings("unchecked")
                List<RecordPropertyType> copyValue = ((List<RecordPropertyType> ) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                copy.value = null;
                if (copyValue!= null) {
                    List<RecordPropertyType> uniqueValuel = copy.getValue();
                    uniqueValuel.addAll(copyValue);
                }
            } else {
                copy.value = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DQQuantitativeResultType();
    }

}
