//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Encapsulates the dataset aggregation information
 * 
 * <p>Java class for MD_AggregateInformation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_AggregateInformation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="aggregateDataSetName" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="aggregateDataSetIdentifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="associationType" type="{http://www.isotc211.org/2005/gmd}DS_AssociationTypeCode_PropertyType"/&gt;
 *         &lt;element name="initiativeType" type="{http://www.isotc211.org/2005/gmd}DS_InitiativeTypeCode_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_AggregateInformation_Type", propOrder = {
    "aggregateDataSetName",
    "aggregateDataSetIdentifier",
    "associationType",
    "initiativeType"
})
public class MDAggregateInformationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CICitationPropertyType aggregateDataSetName;
    protected MDIdentifierPropertyType aggregateDataSetIdentifier;
    @XmlElement(required = true)
    protected DSAssociationTypeCodePropertyType associationType;
    protected DSInitiativeTypeCodePropertyType initiativeType;

    /**
     * Gets the value of the aggregateDataSetName property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getAggregateDataSetName() {
        return aggregateDataSetName;
    }

    /**
     * Sets the value of the aggregateDataSetName property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setAggregateDataSetName(CICitationPropertyType value) {
        this.aggregateDataSetName = value;
    }

    /**
     * Gets the value of the aggregateDataSetIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getAggregateDataSetIdentifier() {
        return aggregateDataSetIdentifier;
    }

    /**
     * Sets the value of the aggregateDataSetIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setAggregateDataSetIdentifier(MDIdentifierPropertyType value) {
        this.aggregateDataSetIdentifier = value;
    }

    /**
     * Gets the value of the associationType property.
     * 
     * @return
     *     possible object is
     *     {@link DSAssociationTypeCodePropertyType }
     *     
     */
    public DSAssociationTypeCodePropertyType getAssociationType() {
        return associationType;
    }

    /**
     * Sets the value of the associationType property.
     * 
     * @param value
     *     allowed object is
     *     {@link DSAssociationTypeCodePropertyType }
     *     
     */
    public void setAssociationType(DSAssociationTypeCodePropertyType value) {
        this.associationType = value;
    }

    /**
     * Gets the value of the initiativeType property.
     * 
     * @return
     *     possible object is
     *     {@link DSInitiativeTypeCodePropertyType }
     *     
     */
    public DSInitiativeTypeCodePropertyType getInitiativeType() {
        return initiativeType;
    }

    /**
     * Sets the value of the initiativeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link DSInitiativeTypeCodePropertyType }
     *     
     */
    public void setInitiativeType(DSInitiativeTypeCodePropertyType value) {
        this.initiativeType = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CICitationPropertyType theAggregateDataSetName;
            theAggregateDataSetName = this.getAggregateDataSetName();
            strategy.appendField(locator, this, "aggregateDataSetName", buffer, theAggregateDataSetName);
        }
        {
            MDIdentifierPropertyType theAggregateDataSetIdentifier;
            theAggregateDataSetIdentifier = this.getAggregateDataSetIdentifier();
            strategy.appendField(locator, this, "aggregateDataSetIdentifier", buffer, theAggregateDataSetIdentifier);
        }
        {
            DSAssociationTypeCodePropertyType theAssociationType;
            theAssociationType = this.getAssociationType();
            strategy.appendField(locator, this, "associationType", buffer, theAssociationType);
        }
        {
            DSInitiativeTypeCodePropertyType theInitiativeType;
            theInitiativeType = this.getInitiativeType();
            strategy.appendField(locator, this, "initiativeType", buffer, theInitiativeType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDAggregateInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDAggregateInformationType that = ((MDAggregateInformationType) object);
        {
            CICitationPropertyType lhsAggregateDataSetName;
            lhsAggregateDataSetName = this.getAggregateDataSetName();
            CICitationPropertyType rhsAggregateDataSetName;
            rhsAggregateDataSetName = that.getAggregateDataSetName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aggregateDataSetName", lhsAggregateDataSetName), LocatorUtils.property(thatLocator, "aggregateDataSetName", rhsAggregateDataSetName), lhsAggregateDataSetName, rhsAggregateDataSetName)) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsAggregateDataSetIdentifier;
            lhsAggregateDataSetIdentifier = this.getAggregateDataSetIdentifier();
            MDIdentifierPropertyType rhsAggregateDataSetIdentifier;
            rhsAggregateDataSetIdentifier = that.getAggregateDataSetIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aggregateDataSetIdentifier", lhsAggregateDataSetIdentifier), LocatorUtils.property(thatLocator, "aggregateDataSetIdentifier", rhsAggregateDataSetIdentifier), lhsAggregateDataSetIdentifier, rhsAggregateDataSetIdentifier)) {
                return false;
            }
        }
        {
            DSAssociationTypeCodePropertyType lhsAssociationType;
            lhsAssociationType = this.getAssociationType();
            DSAssociationTypeCodePropertyType rhsAssociationType;
            rhsAssociationType = that.getAssociationType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "associationType", lhsAssociationType), LocatorUtils.property(thatLocator, "associationType", rhsAssociationType), lhsAssociationType, rhsAssociationType)) {
                return false;
            }
        }
        {
            DSInitiativeTypeCodePropertyType lhsInitiativeType;
            lhsInitiativeType = this.getInitiativeType();
            DSInitiativeTypeCodePropertyType rhsInitiativeType;
            rhsInitiativeType = that.getInitiativeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "initiativeType", lhsInitiativeType), LocatorUtils.property(thatLocator, "initiativeType", rhsInitiativeType), lhsInitiativeType, rhsInitiativeType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CICitationPropertyType theAggregateDataSetName;
            theAggregateDataSetName = this.getAggregateDataSetName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aggregateDataSetName", theAggregateDataSetName), currentHashCode, theAggregateDataSetName);
        }
        {
            MDIdentifierPropertyType theAggregateDataSetIdentifier;
            theAggregateDataSetIdentifier = this.getAggregateDataSetIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aggregateDataSetIdentifier", theAggregateDataSetIdentifier), currentHashCode, theAggregateDataSetIdentifier);
        }
        {
            DSAssociationTypeCodePropertyType theAssociationType;
            theAssociationType = this.getAssociationType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "associationType", theAssociationType), currentHashCode, theAssociationType);
        }
        {
            DSInitiativeTypeCodePropertyType theInitiativeType;
            theInitiativeType = this.getInitiativeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "initiativeType", theInitiativeType), currentHashCode, theInitiativeType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDAggregateInformationType) {
            final MDAggregateInformationType copy = ((MDAggregateInformationType) draftCopy);
            if (this.aggregateDataSetName!= null) {
                CICitationPropertyType sourceAggregateDataSetName;
                sourceAggregateDataSetName = this.getAggregateDataSetName();
                CICitationPropertyType copyAggregateDataSetName = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "aggregateDataSetName", sourceAggregateDataSetName), sourceAggregateDataSetName));
                copy.setAggregateDataSetName(copyAggregateDataSetName);
            } else {
                copy.aggregateDataSetName = null;
            }
            if (this.aggregateDataSetIdentifier!= null) {
                MDIdentifierPropertyType sourceAggregateDataSetIdentifier;
                sourceAggregateDataSetIdentifier = this.getAggregateDataSetIdentifier();
                MDIdentifierPropertyType copyAggregateDataSetIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "aggregateDataSetIdentifier", sourceAggregateDataSetIdentifier), sourceAggregateDataSetIdentifier));
                copy.setAggregateDataSetIdentifier(copyAggregateDataSetIdentifier);
            } else {
                copy.aggregateDataSetIdentifier = null;
            }
            if (this.associationType!= null) {
                DSAssociationTypeCodePropertyType sourceAssociationType;
                sourceAssociationType = this.getAssociationType();
                DSAssociationTypeCodePropertyType copyAssociationType = ((DSAssociationTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "associationType", sourceAssociationType), sourceAssociationType));
                copy.setAssociationType(copyAssociationType);
            } else {
                copy.associationType = null;
            }
            if (this.initiativeType!= null) {
                DSInitiativeTypeCodePropertyType sourceInitiativeType;
                sourceInitiativeType = this.getInitiativeType();
                DSInitiativeTypeCodePropertyType copyInitiativeType = ((DSInitiativeTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "initiativeType", sourceInitiativeType), sourceInitiativeType));
                copy.setInitiativeType(copyInitiativeType);
            } else {
                copy.initiativeType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDAggregateInformationType();
    }

}
