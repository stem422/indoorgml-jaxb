//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.IntegerPropertyType;
import org.isotc211._2005.gco.RealPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the media on which the data can be distributed
 * 
 * <p>Java class for MD_Medium_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Medium_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gmd}MD_MediumNameCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="density" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="densityUnits" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="volumes" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="mediumFormat" type="{http://www.isotc211.org/2005/gmd}MD_MediumFormatCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="mediumNote" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Medium_Type", propOrder = {
    "name",
    "density",
    "densityUnits",
    "volumes",
    "mediumFormat",
    "mediumNote"
})
public class MDMediumType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MDMediumNameCodePropertyType name;
    protected List<RealPropertyType> density;
    protected CharacterStringPropertyType densityUnits;
    protected IntegerPropertyType volumes;
    protected List<MDMediumFormatCodePropertyType> mediumFormat;
    protected CharacterStringPropertyType mediumNote;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link MDMediumNameCodePropertyType }
     *     
     */
    public MDMediumNameCodePropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDMediumNameCodePropertyType }
     *     
     */
    public void setName(MDMediumNameCodePropertyType value) {
        this.name = value;
    }

    /**
     * Gets the value of the density property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the density property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDensity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RealPropertyType }
     * 
     * 
     */
    public List<RealPropertyType> getDensity() {
        if (density == null) {
            density = new ArrayList<RealPropertyType>();
        }
        return this.density;
    }

    /**
     * Gets the value of the densityUnits property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDensityUnits() {
        return densityUnits;
    }

    /**
     * Sets the value of the densityUnits property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDensityUnits(CharacterStringPropertyType value) {
        this.densityUnits = value;
    }

    /**
     * Gets the value of the volumes property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getVolumes() {
        return volumes;
    }

    /**
     * Sets the value of the volumes property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setVolumes(IntegerPropertyType value) {
        this.volumes = value;
    }

    /**
     * Gets the value of the mediumFormat property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mediumFormat property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMediumFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDMediumFormatCodePropertyType }
     * 
     * 
     */
    public List<MDMediumFormatCodePropertyType> getMediumFormat() {
        if (mediumFormat == null) {
            mediumFormat = new ArrayList<MDMediumFormatCodePropertyType>();
        }
        return this.mediumFormat;
    }

    /**
     * Gets the value of the mediumNote property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getMediumNote() {
        return mediumNote;
    }

    /**
     * Sets the value of the mediumNote property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setMediumNote(CharacterStringPropertyType value) {
        this.mediumNote = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDMediumNameCodePropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            List<RealPropertyType> theDensity;
            theDensity = (((this.density!= null)&&(!this.density.isEmpty()))?this.getDensity():null);
            strategy.appendField(locator, this, "density", buffer, theDensity);
        }
        {
            CharacterStringPropertyType theDensityUnits;
            theDensityUnits = this.getDensityUnits();
            strategy.appendField(locator, this, "densityUnits", buffer, theDensityUnits);
        }
        {
            IntegerPropertyType theVolumes;
            theVolumes = this.getVolumes();
            strategy.appendField(locator, this, "volumes", buffer, theVolumes);
        }
        {
            List<MDMediumFormatCodePropertyType> theMediumFormat;
            theMediumFormat = (((this.mediumFormat!= null)&&(!this.mediumFormat.isEmpty()))?this.getMediumFormat():null);
            strategy.appendField(locator, this, "mediumFormat", buffer, theMediumFormat);
        }
        {
            CharacterStringPropertyType theMediumNote;
            theMediumNote = this.getMediumNote();
            strategy.appendField(locator, this, "mediumNote", buffer, theMediumNote);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDMediumType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDMediumType that = ((MDMediumType) object);
        {
            MDMediumNameCodePropertyType lhsName;
            lhsName = this.getName();
            MDMediumNameCodePropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            List<RealPropertyType> lhsDensity;
            lhsDensity = (((this.density!= null)&&(!this.density.isEmpty()))?this.getDensity():null);
            List<RealPropertyType> rhsDensity;
            rhsDensity = (((that.density!= null)&&(!that.density.isEmpty()))?that.getDensity():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "density", lhsDensity), LocatorUtils.property(thatLocator, "density", rhsDensity), lhsDensity, rhsDensity)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDensityUnits;
            lhsDensityUnits = this.getDensityUnits();
            CharacterStringPropertyType rhsDensityUnits;
            rhsDensityUnits = that.getDensityUnits();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "densityUnits", lhsDensityUnits), LocatorUtils.property(thatLocator, "densityUnits", rhsDensityUnits), lhsDensityUnits, rhsDensityUnits)) {
                return false;
            }
        }
        {
            IntegerPropertyType lhsVolumes;
            lhsVolumes = this.getVolumes();
            IntegerPropertyType rhsVolumes;
            rhsVolumes = that.getVolumes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "volumes", lhsVolumes), LocatorUtils.property(thatLocator, "volumes", rhsVolumes), lhsVolumes, rhsVolumes)) {
                return false;
            }
        }
        {
            List<MDMediumFormatCodePropertyType> lhsMediumFormat;
            lhsMediumFormat = (((this.mediumFormat!= null)&&(!this.mediumFormat.isEmpty()))?this.getMediumFormat():null);
            List<MDMediumFormatCodePropertyType> rhsMediumFormat;
            rhsMediumFormat = (((that.mediumFormat!= null)&&(!that.mediumFormat.isEmpty()))?that.getMediumFormat():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mediumFormat", lhsMediumFormat), LocatorUtils.property(thatLocator, "mediumFormat", rhsMediumFormat), lhsMediumFormat, rhsMediumFormat)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsMediumNote;
            lhsMediumNote = this.getMediumNote();
            CharacterStringPropertyType rhsMediumNote;
            rhsMediumNote = that.getMediumNote();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mediumNote", lhsMediumNote), LocatorUtils.property(thatLocator, "mediumNote", rhsMediumNote), lhsMediumNote, rhsMediumNote)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDMediumNameCodePropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            List<RealPropertyType> theDensity;
            theDensity = (((this.density!= null)&&(!this.density.isEmpty()))?this.getDensity():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "density", theDensity), currentHashCode, theDensity);
        }
        {
            CharacterStringPropertyType theDensityUnits;
            theDensityUnits = this.getDensityUnits();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "densityUnits", theDensityUnits), currentHashCode, theDensityUnits);
        }
        {
            IntegerPropertyType theVolumes;
            theVolumes = this.getVolumes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "volumes", theVolumes), currentHashCode, theVolumes);
        }
        {
            List<MDMediumFormatCodePropertyType> theMediumFormat;
            theMediumFormat = (((this.mediumFormat!= null)&&(!this.mediumFormat.isEmpty()))?this.getMediumFormat():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mediumFormat", theMediumFormat), currentHashCode, theMediumFormat);
        }
        {
            CharacterStringPropertyType theMediumNote;
            theMediumNote = this.getMediumNote();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mediumNote", theMediumNote), currentHashCode, theMediumNote);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDMediumType) {
            final MDMediumType copy = ((MDMediumType) draftCopy);
            if (this.name!= null) {
                MDMediumNameCodePropertyType sourceName;
                sourceName = this.getName();
                MDMediumNameCodePropertyType copyName = ((MDMediumNameCodePropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if ((this.density!= null)&&(!this.density.isEmpty())) {
                List<RealPropertyType> sourceDensity;
                sourceDensity = (((this.density!= null)&&(!this.density.isEmpty()))?this.getDensity():null);
                @SuppressWarnings("unchecked")
                List<RealPropertyType> copyDensity = ((List<RealPropertyType> ) strategy.copy(LocatorUtils.property(locator, "density", sourceDensity), sourceDensity));
                copy.density = null;
                if (copyDensity!= null) {
                    List<RealPropertyType> uniqueDensityl = copy.getDensity();
                    uniqueDensityl.addAll(copyDensity);
                }
            } else {
                copy.density = null;
            }
            if (this.densityUnits!= null) {
                CharacterStringPropertyType sourceDensityUnits;
                sourceDensityUnits = this.getDensityUnits();
                CharacterStringPropertyType copyDensityUnits = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "densityUnits", sourceDensityUnits), sourceDensityUnits));
                copy.setDensityUnits(copyDensityUnits);
            } else {
                copy.densityUnits = null;
            }
            if (this.volumes!= null) {
                IntegerPropertyType sourceVolumes;
                sourceVolumes = this.getVolumes();
                IntegerPropertyType copyVolumes = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "volumes", sourceVolumes), sourceVolumes));
                copy.setVolumes(copyVolumes);
            } else {
                copy.volumes = null;
            }
            if ((this.mediumFormat!= null)&&(!this.mediumFormat.isEmpty())) {
                List<MDMediumFormatCodePropertyType> sourceMediumFormat;
                sourceMediumFormat = (((this.mediumFormat!= null)&&(!this.mediumFormat.isEmpty()))?this.getMediumFormat():null);
                @SuppressWarnings("unchecked")
                List<MDMediumFormatCodePropertyType> copyMediumFormat = ((List<MDMediumFormatCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "mediumFormat", sourceMediumFormat), sourceMediumFormat));
                copy.mediumFormat = null;
                if (copyMediumFormat!= null) {
                    List<MDMediumFormatCodePropertyType> uniqueMediumFormatl = copy.getMediumFormat();
                    uniqueMediumFormatl.addAll(copyMediumFormat);
                }
            } else {
                copy.mediumFormat = null;
            }
            if (this.mediumNote!= null) {
                CharacterStringPropertyType sourceMediumNote;
                sourceMediumNote = this.getMediumNote();
                CharacterStringPropertyType copyMediumNote = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "mediumNote", sourceMediumNote), sourceMediumNote));
                copy.setMediumNote(copyMediumNote);
            } else {
                copy.mediumNote = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDMediumType();
    }

}
