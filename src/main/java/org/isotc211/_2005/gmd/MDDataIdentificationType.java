//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MD_DataIdentification_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_DataIdentification_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}AbstractMD_Identification_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="spatialRepresentationType" type="{http://www.isotc211.org/2005/gmd}MD_SpatialRepresentationTypeCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="spatialResolution" type="{http://www.isotc211.org/2005/gmd}MD_Resolution_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="language" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="characterSet" type="{http://www.isotc211.org/2005/gmd}MD_CharacterSetCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="topicCategory" type="{http://www.isotc211.org/2005/gmd}MD_TopicCategoryCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="environmentDescription" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="extent" type="{http://www.isotc211.org/2005/gmd}EX_Extent_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="supplementalInformation" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_DataIdentification_Type", propOrder = {
    "spatialRepresentationType",
    "spatialResolution",
    "language",
    "characterSet",
    "topicCategory",
    "environmentDescription",
    "extent",
    "supplementalInformation"
})
public class MDDataIdentificationType
    extends AbstractMDIdentificationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<MDSpatialRepresentationTypeCodePropertyType> spatialRepresentationType;
    protected List<MDResolutionPropertyType> spatialResolution;
    @XmlElement(required = true)
    protected List<CharacterStringPropertyType> language;
    protected List<MDCharacterSetCodePropertyType> characterSet;
    protected List<MDTopicCategoryCodePropertyType> topicCategory;
    protected CharacterStringPropertyType environmentDescription;
    protected List<EXExtentPropertyType> extent;
    protected CharacterStringPropertyType supplementalInformation;

    /**
     * Gets the value of the spatialRepresentationType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the spatialRepresentationType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpatialRepresentationType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDSpatialRepresentationTypeCodePropertyType }
     * 
     * 
     */
    public List<MDSpatialRepresentationTypeCodePropertyType> getSpatialRepresentationType() {
        if (spatialRepresentationType == null) {
            spatialRepresentationType = new ArrayList<MDSpatialRepresentationTypeCodePropertyType>();
        }
        return this.spatialRepresentationType;
    }

    /**
     * Gets the value of the spatialResolution property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the spatialResolution property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpatialResolution().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDResolutionPropertyType }
     * 
     * 
     */
    public List<MDResolutionPropertyType> getSpatialResolution() {
        if (spatialResolution == null) {
            spatialResolution = new ArrayList<MDResolutionPropertyType>();
        }
        return this.spatialResolution;
    }

    /**
     * Gets the value of the language property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the language property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLanguage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getLanguage() {
        if (language == null) {
            language = new ArrayList<CharacterStringPropertyType>();
        }
        return this.language;
    }

    /**
     * Gets the value of the characterSet property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the characterSet property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCharacterSet().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDCharacterSetCodePropertyType }
     * 
     * 
     */
    public List<MDCharacterSetCodePropertyType> getCharacterSet() {
        if (characterSet == null) {
            characterSet = new ArrayList<MDCharacterSetCodePropertyType>();
        }
        return this.characterSet;
    }

    /**
     * Gets the value of the topicCategory property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the topicCategory property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTopicCategory().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDTopicCategoryCodePropertyType }
     * 
     * 
     */
    public List<MDTopicCategoryCodePropertyType> getTopicCategory() {
        if (topicCategory == null) {
            topicCategory = new ArrayList<MDTopicCategoryCodePropertyType>();
        }
        return this.topicCategory;
    }

    /**
     * Gets the value of the environmentDescription property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getEnvironmentDescription() {
        return environmentDescription;
    }

    /**
     * Sets the value of the environmentDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setEnvironmentDescription(CharacterStringPropertyType value) {
        this.environmentDescription = value;
    }

    /**
     * Gets the value of the extent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EXExtentPropertyType }
     * 
     * 
     */
    public List<EXExtentPropertyType> getExtent() {
        if (extent == null) {
            extent = new ArrayList<EXExtentPropertyType>();
        }
        return this.extent;
    }

    /**
     * Gets the value of the supplementalInformation property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSupplementalInformation() {
        return supplementalInformation;
    }

    /**
     * Sets the value of the supplementalInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSupplementalInformation(CharacterStringPropertyType value) {
        this.supplementalInformation = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MDSpatialRepresentationTypeCodePropertyType> theSpatialRepresentationType;
            theSpatialRepresentationType = (((this.spatialRepresentationType!= null)&&(!this.spatialRepresentationType.isEmpty()))?this.getSpatialRepresentationType():null);
            strategy.appendField(locator, this, "spatialRepresentationType", buffer, theSpatialRepresentationType);
        }
        {
            List<MDResolutionPropertyType> theSpatialResolution;
            theSpatialResolution = (((this.spatialResolution!= null)&&(!this.spatialResolution.isEmpty()))?this.getSpatialResolution():null);
            strategy.appendField(locator, this, "spatialResolution", buffer, theSpatialResolution);
        }
        {
            List<CharacterStringPropertyType> theLanguage;
            theLanguage = (((this.language!= null)&&(!this.language.isEmpty()))?this.getLanguage():null);
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        {
            List<MDCharacterSetCodePropertyType> theCharacterSet;
            theCharacterSet = (((this.characterSet!= null)&&(!this.characterSet.isEmpty()))?this.getCharacterSet():null);
            strategy.appendField(locator, this, "characterSet", buffer, theCharacterSet);
        }
        {
            List<MDTopicCategoryCodePropertyType> theTopicCategory;
            theTopicCategory = (((this.topicCategory!= null)&&(!this.topicCategory.isEmpty()))?this.getTopicCategory():null);
            strategy.appendField(locator, this, "topicCategory", buffer, theTopicCategory);
        }
        {
            CharacterStringPropertyType theEnvironmentDescription;
            theEnvironmentDescription = this.getEnvironmentDescription();
            strategy.appendField(locator, this, "environmentDescription", buffer, theEnvironmentDescription);
        }
        {
            List<EXExtentPropertyType> theExtent;
            theExtent = (((this.extent!= null)&&(!this.extent.isEmpty()))?this.getExtent():null);
            strategy.appendField(locator, this, "extent", buffer, theExtent);
        }
        {
            CharacterStringPropertyType theSupplementalInformation;
            theSupplementalInformation = this.getSupplementalInformation();
            strategy.appendField(locator, this, "supplementalInformation", buffer, theSupplementalInformation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDDataIdentificationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDDataIdentificationType that = ((MDDataIdentificationType) object);
        {
            List<MDSpatialRepresentationTypeCodePropertyType> lhsSpatialRepresentationType;
            lhsSpatialRepresentationType = (((this.spatialRepresentationType!= null)&&(!this.spatialRepresentationType.isEmpty()))?this.getSpatialRepresentationType():null);
            List<MDSpatialRepresentationTypeCodePropertyType> rhsSpatialRepresentationType;
            rhsSpatialRepresentationType = (((that.spatialRepresentationType!= null)&&(!that.spatialRepresentationType.isEmpty()))?that.getSpatialRepresentationType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "spatialRepresentationType", lhsSpatialRepresentationType), LocatorUtils.property(thatLocator, "spatialRepresentationType", rhsSpatialRepresentationType), lhsSpatialRepresentationType, rhsSpatialRepresentationType)) {
                return false;
            }
        }
        {
            List<MDResolutionPropertyType> lhsSpatialResolution;
            lhsSpatialResolution = (((this.spatialResolution!= null)&&(!this.spatialResolution.isEmpty()))?this.getSpatialResolution():null);
            List<MDResolutionPropertyType> rhsSpatialResolution;
            rhsSpatialResolution = (((that.spatialResolution!= null)&&(!that.spatialResolution.isEmpty()))?that.getSpatialResolution():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "spatialResolution", lhsSpatialResolution), LocatorUtils.property(thatLocator, "spatialResolution", rhsSpatialResolution), lhsSpatialResolution, rhsSpatialResolution)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsLanguage;
            lhsLanguage = (((this.language!= null)&&(!this.language.isEmpty()))?this.getLanguage():null);
            List<CharacterStringPropertyType> rhsLanguage;
            rhsLanguage = (((that.language!= null)&&(!that.language.isEmpty()))?that.getLanguage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            List<MDCharacterSetCodePropertyType> lhsCharacterSet;
            lhsCharacterSet = (((this.characterSet!= null)&&(!this.characterSet.isEmpty()))?this.getCharacterSet():null);
            List<MDCharacterSetCodePropertyType> rhsCharacterSet;
            rhsCharacterSet = (((that.characterSet!= null)&&(!that.characterSet.isEmpty()))?that.getCharacterSet():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "characterSet", lhsCharacterSet), LocatorUtils.property(thatLocator, "characterSet", rhsCharacterSet), lhsCharacterSet, rhsCharacterSet)) {
                return false;
            }
        }
        {
            List<MDTopicCategoryCodePropertyType> lhsTopicCategory;
            lhsTopicCategory = (((this.topicCategory!= null)&&(!this.topicCategory.isEmpty()))?this.getTopicCategory():null);
            List<MDTopicCategoryCodePropertyType> rhsTopicCategory;
            rhsTopicCategory = (((that.topicCategory!= null)&&(!that.topicCategory.isEmpty()))?that.getTopicCategory():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "topicCategory", lhsTopicCategory), LocatorUtils.property(thatLocator, "topicCategory", rhsTopicCategory), lhsTopicCategory, rhsTopicCategory)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsEnvironmentDescription;
            lhsEnvironmentDescription = this.getEnvironmentDescription();
            CharacterStringPropertyType rhsEnvironmentDescription;
            rhsEnvironmentDescription = that.getEnvironmentDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "environmentDescription", lhsEnvironmentDescription), LocatorUtils.property(thatLocator, "environmentDescription", rhsEnvironmentDescription), lhsEnvironmentDescription, rhsEnvironmentDescription)) {
                return false;
            }
        }
        {
            List<EXExtentPropertyType> lhsExtent;
            lhsExtent = (((this.extent!= null)&&(!this.extent.isEmpty()))?this.getExtent():null);
            List<EXExtentPropertyType> rhsExtent;
            rhsExtent = (((that.extent!= null)&&(!that.extent.isEmpty()))?that.getExtent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extent", lhsExtent), LocatorUtils.property(thatLocator, "extent", rhsExtent), lhsExtent, rhsExtent)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSupplementalInformation;
            lhsSupplementalInformation = this.getSupplementalInformation();
            CharacterStringPropertyType rhsSupplementalInformation;
            rhsSupplementalInformation = that.getSupplementalInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplementalInformation", lhsSupplementalInformation), LocatorUtils.property(thatLocator, "supplementalInformation", rhsSupplementalInformation), lhsSupplementalInformation, rhsSupplementalInformation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MDSpatialRepresentationTypeCodePropertyType> theSpatialRepresentationType;
            theSpatialRepresentationType = (((this.spatialRepresentationType!= null)&&(!this.spatialRepresentationType.isEmpty()))?this.getSpatialRepresentationType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "spatialRepresentationType", theSpatialRepresentationType), currentHashCode, theSpatialRepresentationType);
        }
        {
            List<MDResolutionPropertyType> theSpatialResolution;
            theSpatialResolution = (((this.spatialResolution!= null)&&(!this.spatialResolution.isEmpty()))?this.getSpatialResolution():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "spatialResolution", theSpatialResolution), currentHashCode, theSpatialResolution);
        }
        {
            List<CharacterStringPropertyType> theLanguage;
            theLanguage = (((this.language!= null)&&(!this.language.isEmpty()))?this.getLanguage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            List<MDCharacterSetCodePropertyType> theCharacterSet;
            theCharacterSet = (((this.characterSet!= null)&&(!this.characterSet.isEmpty()))?this.getCharacterSet():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characterSet", theCharacterSet), currentHashCode, theCharacterSet);
        }
        {
            List<MDTopicCategoryCodePropertyType> theTopicCategory;
            theTopicCategory = (((this.topicCategory!= null)&&(!this.topicCategory.isEmpty()))?this.getTopicCategory():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "topicCategory", theTopicCategory), currentHashCode, theTopicCategory);
        }
        {
            CharacterStringPropertyType theEnvironmentDescription;
            theEnvironmentDescription = this.getEnvironmentDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "environmentDescription", theEnvironmentDescription), currentHashCode, theEnvironmentDescription);
        }
        {
            List<EXExtentPropertyType> theExtent;
            theExtent = (((this.extent!= null)&&(!this.extent.isEmpty()))?this.getExtent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extent", theExtent), currentHashCode, theExtent);
        }
        {
            CharacterStringPropertyType theSupplementalInformation;
            theSupplementalInformation = this.getSupplementalInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplementalInformation", theSupplementalInformation), currentHashCode, theSupplementalInformation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDDataIdentificationType) {
            final MDDataIdentificationType copy = ((MDDataIdentificationType) draftCopy);
            if ((this.spatialRepresentationType!= null)&&(!this.spatialRepresentationType.isEmpty())) {
                List<MDSpatialRepresentationTypeCodePropertyType> sourceSpatialRepresentationType;
                sourceSpatialRepresentationType = (((this.spatialRepresentationType!= null)&&(!this.spatialRepresentationType.isEmpty()))?this.getSpatialRepresentationType():null);
                @SuppressWarnings("unchecked")
                List<MDSpatialRepresentationTypeCodePropertyType> copySpatialRepresentationType = ((List<MDSpatialRepresentationTypeCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "spatialRepresentationType", sourceSpatialRepresentationType), sourceSpatialRepresentationType));
                copy.spatialRepresentationType = null;
                if (copySpatialRepresentationType!= null) {
                    List<MDSpatialRepresentationTypeCodePropertyType> uniqueSpatialRepresentationTypel = copy.getSpatialRepresentationType();
                    uniqueSpatialRepresentationTypel.addAll(copySpatialRepresentationType);
                }
            } else {
                copy.spatialRepresentationType = null;
            }
            if ((this.spatialResolution!= null)&&(!this.spatialResolution.isEmpty())) {
                List<MDResolutionPropertyType> sourceSpatialResolution;
                sourceSpatialResolution = (((this.spatialResolution!= null)&&(!this.spatialResolution.isEmpty()))?this.getSpatialResolution():null);
                @SuppressWarnings("unchecked")
                List<MDResolutionPropertyType> copySpatialResolution = ((List<MDResolutionPropertyType> ) strategy.copy(LocatorUtils.property(locator, "spatialResolution", sourceSpatialResolution), sourceSpatialResolution));
                copy.spatialResolution = null;
                if (copySpatialResolution!= null) {
                    List<MDResolutionPropertyType> uniqueSpatialResolutionl = copy.getSpatialResolution();
                    uniqueSpatialResolutionl.addAll(copySpatialResolution);
                }
            } else {
                copy.spatialResolution = null;
            }
            if ((this.language!= null)&&(!this.language.isEmpty())) {
                List<CharacterStringPropertyType> sourceLanguage;
                sourceLanguage = (((this.language!= null)&&(!this.language.isEmpty()))?this.getLanguage():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyLanguage = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.language = null;
                if (copyLanguage!= null) {
                    List<CharacterStringPropertyType> uniqueLanguagel = copy.getLanguage();
                    uniqueLanguagel.addAll(copyLanguage);
                }
            } else {
                copy.language = null;
            }
            if ((this.characterSet!= null)&&(!this.characterSet.isEmpty())) {
                List<MDCharacterSetCodePropertyType> sourceCharacterSet;
                sourceCharacterSet = (((this.characterSet!= null)&&(!this.characterSet.isEmpty()))?this.getCharacterSet():null);
                @SuppressWarnings("unchecked")
                List<MDCharacterSetCodePropertyType> copyCharacterSet = ((List<MDCharacterSetCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "characterSet", sourceCharacterSet), sourceCharacterSet));
                copy.characterSet = null;
                if (copyCharacterSet!= null) {
                    List<MDCharacterSetCodePropertyType> uniqueCharacterSetl = copy.getCharacterSet();
                    uniqueCharacterSetl.addAll(copyCharacterSet);
                }
            } else {
                copy.characterSet = null;
            }
            if ((this.topicCategory!= null)&&(!this.topicCategory.isEmpty())) {
                List<MDTopicCategoryCodePropertyType> sourceTopicCategory;
                sourceTopicCategory = (((this.topicCategory!= null)&&(!this.topicCategory.isEmpty()))?this.getTopicCategory():null);
                @SuppressWarnings("unchecked")
                List<MDTopicCategoryCodePropertyType> copyTopicCategory = ((List<MDTopicCategoryCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "topicCategory", sourceTopicCategory), sourceTopicCategory));
                copy.topicCategory = null;
                if (copyTopicCategory!= null) {
                    List<MDTopicCategoryCodePropertyType> uniqueTopicCategoryl = copy.getTopicCategory();
                    uniqueTopicCategoryl.addAll(copyTopicCategory);
                }
            } else {
                copy.topicCategory = null;
            }
            if (this.environmentDescription!= null) {
                CharacterStringPropertyType sourceEnvironmentDescription;
                sourceEnvironmentDescription = this.getEnvironmentDescription();
                CharacterStringPropertyType copyEnvironmentDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "environmentDescription", sourceEnvironmentDescription), sourceEnvironmentDescription));
                copy.setEnvironmentDescription(copyEnvironmentDescription);
            } else {
                copy.environmentDescription = null;
            }
            if ((this.extent!= null)&&(!this.extent.isEmpty())) {
                List<EXExtentPropertyType> sourceExtent;
                sourceExtent = (((this.extent!= null)&&(!this.extent.isEmpty()))?this.getExtent():null);
                @SuppressWarnings("unchecked")
                List<EXExtentPropertyType> copyExtent = ((List<EXExtentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "extent", sourceExtent), sourceExtent));
                copy.extent = null;
                if (copyExtent!= null) {
                    List<EXExtentPropertyType> uniqueExtentl = copy.getExtent();
                    uniqueExtentl.addAll(copyExtent);
                }
            } else {
                copy.extent = null;
            }
            if (this.supplementalInformation!= null) {
                CharacterStringPropertyType sourceSupplementalInformation;
                sourceSupplementalInformation = this.getSupplementalInformation();
                CharacterStringPropertyType copySupplementalInformation = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "supplementalInformation", sourceSupplementalInformation), sourceSupplementalInformation));
                copy.setSupplementalInformation(copySupplementalInformation);
            } else {
                copy.supplementalInformation = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDDataIdentificationType();
    }

}
