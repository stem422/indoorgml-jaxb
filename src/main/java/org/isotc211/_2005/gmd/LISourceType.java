//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LI_Source_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LI_Source_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="description" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="scaleDenominator" type="{http://www.isotc211.org/2005/gmd}MD_RepresentativeFraction_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="sourceReferenceSystem" type="{http://www.isotc211.org/2005/gmd}MD_ReferenceSystem_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="sourceCitation" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="sourceExtent" type="{http://www.isotc211.org/2005/gmd}EX_Extent_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="sourceStep" type="{http://www.isotc211.org/2005/gmd}LI_ProcessStep_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LI_Source_Type", propOrder = {
    "description",
    "scaleDenominator",
    "sourceReferenceSystem",
    "sourceCitation",
    "sourceExtent",
    "sourceStep"
})
public class LISourceType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CharacterStringPropertyType description;
    protected MDRepresentativeFractionPropertyType scaleDenominator;
    protected MDReferenceSystemPropertyType sourceReferenceSystem;
    protected CICitationPropertyType sourceCitation;
    protected List<EXExtentPropertyType> sourceExtent;
    protected List<LIProcessStepPropertyType> sourceStep;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescription(CharacterStringPropertyType value) {
        this.description = value;
    }

    /**
     * Gets the value of the scaleDenominator property.
     * 
     * @return
     *     possible object is
     *     {@link MDRepresentativeFractionPropertyType }
     *     
     */
    public MDRepresentativeFractionPropertyType getScaleDenominator() {
        return scaleDenominator;
    }

    /**
     * Sets the value of the scaleDenominator property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDRepresentativeFractionPropertyType }
     *     
     */
    public void setScaleDenominator(MDRepresentativeFractionPropertyType value) {
        this.scaleDenominator = value;
    }

    /**
     * Gets the value of the sourceReferenceSystem property.
     * 
     * @return
     *     possible object is
     *     {@link MDReferenceSystemPropertyType }
     *     
     */
    public MDReferenceSystemPropertyType getSourceReferenceSystem() {
        return sourceReferenceSystem;
    }

    /**
     * Sets the value of the sourceReferenceSystem property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDReferenceSystemPropertyType }
     *     
     */
    public void setSourceReferenceSystem(MDReferenceSystemPropertyType value) {
        this.sourceReferenceSystem = value;
    }

    /**
     * Gets the value of the sourceCitation property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getSourceCitation() {
        return sourceCitation;
    }

    /**
     * Sets the value of the sourceCitation property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setSourceCitation(CICitationPropertyType value) {
        this.sourceCitation = value;
    }

    /**
     * Gets the value of the sourceExtent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sourceExtent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSourceExtent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EXExtentPropertyType }
     * 
     * 
     */
    public List<EXExtentPropertyType> getSourceExtent() {
        if (sourceExtent == null) {
            sourceExtent = new ArrayList<EXExtentPropertyType>();
        }
        return this.sourceExtent;
    }

    /**
     * Gets the value of the sourceStep property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sourceStep property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSourceStep().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LIProcessStepPropertyType }
     * 
     * 
     */
    public List<LIProcessStepPropertyType> getSourceStep() {
        if (sourceStep == null) {
            sourceStep = new ArrayList<LIProcessStepPropertyType>();
        }
        return this.sourceStep;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            MDRepresentativeFractionPropertyType theScaleDenominator;
            theScaleDenominator = this.getScaleDenominator();
            strategy.appendField(locator, this, "scaleDenominator", buffer, theScaleDenominator);
        }
        {
            MDReferenceSystemPropertyType theSourceReferenceSystem;
            theSourceReferenceSystem = this.getSourceReferenceSystem();
            strategy.appendField(locator, this, "sourceReferenceSystem", buffer, theSourceReferenceSystem);
        }
        {
            CICitationPropertyType theSourceCitation;
            theSourceCitation = this.getSourceCitation();
            strategy.appendField(locator, this, "sourceCitation", buffer, theSourceCitation);
        }
        {
            List<EXExtentPropertyType> theSourceExtent;
            theSourceExtent = (((this.sourceExtent!= null)&&(!this.sourceExtent.isEmpty()))?this.getSourceExtent():null);
            strategy.appendField(locator, this, "sourceExtent", buffer, theSourceExtent);
        }
        {
            List<LIProcessStepPropertyType> theSourceStep;
            theSourceStep = (((this.sourceStep!= null)&&(!this.sourceStep.isEmpty()))?this.getSourceStep():null);
            strategy.appendField(locator, this, "sourceStep", buffer, theSourceStep);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LISourceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final LISourceType that = ((LISourceType) object);
        {
            CharacterStringPropertyType lhsDescription;
            lhsDescription = this.getDescription();
            CharacterStringPropertyType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            MDRepresentativeFractionPropertyType lhsScaleDenominator;
            lhsScaleDenominator = this.getScaleDenominator();
            MDRepresentativeFractionPropertyType rhsScaleDenominator;
            rhsScaleDenominator = that.getScaleDenominator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scaleDenominator", lhsScaleDenominator), LocatorUtils.property(thatLocator, "scaleDenominator", rhsScaleDenominator), lhsScaleDenominator, rhsScaleDenominator)) {
                return false;
            }
        }
        {
            MDReferenceSystemPropertyType lhsSourceReferenceSystem;
            lhsSourceReferenceSystem = this.getSourceReferenceSystem();
            MDReferenceSystemPropertyType rhsSourceReferenceSystem;
            rhsSourceReferenceSystem = that.getSourceReferenceSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceReferenceSystem", lhsSourceReferenceSystem), LocatorUtils.property(thatLocator, "sourceReferenceSystem", rhsSourceReferenceSystem), lhsSourceReferenceSystem, rhsSourceReferenceSystem)) {
                return false;
            }
        }
        {
            CICitationPropertyType lhsSourceCitation;
            lhsSourceCitation = this.getSourceCitation();
            CICitationPropertyType rhsSourceCitation;
            rhsSourceCitation = that.getSourceCitation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceCitation", lhsSourceCitation), LocatorUtils.property(thatLocator, "sourceCitation", rhsSourceCitation), lhsSourceCitation, rhsSourceCitation)) {
                return false;
            }
        }
        {
            List<EXExtentPropertyType> lhsSourceExtent;
            lhsSourceExtent = (((this.sourceExtent!= null)&&(!this.sourceExtent.isEmpty()))?this.getSourceExtent():null);
            List<EXExtentPropertyType> rhsSourceExtent;
            rhsSourceExtent = (((that.sourceExtent!= null)&&(!that.sourceExtent.isEmpty()))?that.getSourceExtent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceExtent", lhsSourceExtent), LocatorUtils.property(thatLocator, "sourceExtent", rhsSourceExtent), lhsSourceExtent, rhsSourceExtent)) {
                return false;
            }
        }
        {
            List<LIProcessStepPropertyType> lhsSourceStep;
            lhsSourceStep = (((this.sourceStep!= null)&&(!this.sourceStep.isEmpty()))?this.getSourceStep():null);
            List<LIProcessStepPropertyType> rhsSourceStep;
            rhsSourceStep = (((that.sourceStep!= null)&&(!that.sourceStep.isEmpty()))?that.getSourceStep():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceStep", lhsSourceStep), LocatorUtils.property(thatLocator, "sourceStep", rhsSourceStep), lhsSourceStep, rhsSourceStep)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            MDRepresentativeFractionPropertyType theScaleDenominator;
            theScaleDenominator = this.getScaleDenominator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scaleDenominator", theScaleDenominator), currentHashCode, theScaleDenominator);
        }
        {
            MDReferenceSystemPropertyType theSourceReferenceSystem;
            theSourceReferenceSystem = this.getSourceReferenceSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceReferenceSystem", theSourceReferenceSystem), currentHashCode, theSourceReferenceSystem);
        }
        {
            CICitationPropertyType theSourceCitation;
            theSourceCitation = this.getSourceCitation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceCitation", theSourceCitation), currentHashCode, theSourceCitation);
        }
        {
            List<EXExtentPropertyType> theSourceExtent;
            theSourceExtent = (((this.sourceExtent!= null)&&(!this.sourceExtent.isEmpty()))?this.getSourceExtent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceExtent", theSourceExtent), currentHashCode, theSourceExtent);
        }
        {
            List<LIProcessStepPropertyType> theSourceStep;
            theSourceStep = (((this.sourceStep!= null)&&(!this.sourceStep.isEmpty()))?this.getSourceStep():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceStep", theSourceStep), currentHashCode, theSourceStep);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof LISourceType) {
            final LISourceType copy = ((LISourceType) draftCopy);
            if (this.description!= null) {
                CharacterStringPropertyType sourceDescription;
                sourceDescription = this.getDescription();
                CharacterStringPropertyType copyDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.scaleDenominator!= null) {
                MDRepresentativeFractionPropertyType sourceScaleDenominator;
                sourceScaleDenominator = this.getScaleDenominator();
                MDRepresentativeFractionPropertyType copyScaleDenominator = ((MDRepresentativeFractionPropertyType) strategy.copy(LocatorUtils.property(locator, "scaleDenominator", sourceScaleDenominator), sourceScaleDenominator));
                copy.setScaleDenominator(copyScaleDenominator);
            } else {
                copy.scaleDenominator = null;
            }
            if (this.sourceReferenceSystem!= null) {
                MDReferenceSystemPropertyType sourceSourceReferenceSystem;
                sourceSourceReferenceSystem = this.getSourceReferenceSystem();
                MDReferenceSystemPropertyType copySourceReferenceSystem = ((MDReferenceSystemPropertyType) strategy.copy(LocatorUtils.property(locator, "sourceReferenceSystem", sourceSourceReferenceSystem), sourceSourceReferenceSystem));
                copy.setSourceReferenceSystem(copySourceReferenceSystem);
            } else {
                copy.sourceReferenceSystem = null;
            }
            if (this.sourceCitation!= null) {
                CICitationPropertyType sourceSourceCitation;
                sourceSourceCitation = this.getSourceCitation();
                CICitationPropertyType copySourceCitation = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "sourceCitation", sourceSourceCitation), sourceSourceCitation));
                copy.setSourceCitation(copySourceCitation);
            } else {
                copy.sourceCitation = null;
            }
            if ((this.sourceExtent!= null)&&(!this.sourceExtent.isEmpty())) {
                List<EXExtentPropertyType> sourceSourceExtent;
                sourceSourceExtent = (((this.sourceExtent!= null)&&(!this.sourceExtent.isEmpty()))?this.getSourceExtent():null);
                @SuppressWarnings("unchecked")
                List<EXExtentPropertyType> copySourceExtent = ((List<EXExtentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "sourceExtent", sourceSourceExtent), sourceSourceExtent));
                copy.sourceExtent = null;
                if (copySourceExtent!= null) {
                    List<EXExtentPropertyType> uniqueSourceExtentl = copy.getSourceExtent();
                    uniqueSourceExtentl.addAll(copySourceExtent);
                }
            } else {
                copy.sourceExtent = null;
            }
            if ((this.sourceStep!= null)&&(!this.sourceStep.isEmpty())) {
                List<LIProcessStepPropertyType> sourceSourceStep;
                sourceSourceStep = (((this.sourceStep!= null)&&(!this.sourceStep.isEmpty()))?this.getSourceStep():null);
                @SuppressWarnings("unchecked")
                List<LIProcessStepPropertyType> copySourceStep = ((List<LIProcessStepPropertyType> ) strategy.copy(LocatorUtils.property(locator, "sourceStep", sourceSourceStep), sourceSourceStep));
                copy.sourceStep = null;
                if (copySourceStep!= null) {
                    List<LIProcessStepPropertyType> uniqueSourceStepl = copy.getSourceStep();
                    uniqueSourceStepl.addAll(copySourceStep);
                }
            } else {
                copy.sourceStep = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LISourceType();
    }

}
