//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.BinaryPropertyType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the application schema used to build the dataset
 * 
 * <p>Java class for MD_ApplicationSchemaInformation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_ApplicationSchemaInformation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType"/&gt;
 *         &lt;element name="schemaLanguage" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="constraintLanguage" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="schemaAscii" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="graphicsFile" type="{http://www.isotc211.org/2005/gco}Binary_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="softwareDevelopmentFile" type="{http://www.isotc211.org/2005/gco}Binary_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="softwareDevelopmentFileFormat" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_ApplicationSchemaInformation_Type", propOrder = {
    "name",
    "schemaLanguage",
    "constraintLanguage",
    "schemaAscii",
    "graphicsFile",
    "softwareDevelopmentFile",
    "softwareDevelopmentFileFormat"
})
public class MDApplicationSchemaInformationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected CICitationPropertyType name;
    @XmlElement(required = true)
    protected CharacterStringPropertyType schemaLanguage;
    @XmlElement(required = true)
    protected CharacterStringPropertyType constraintLanguage;
    protected CharacterStringPropertyType schemaAscii;
    protected BinaryPropertyType graphicsFile;
    protected BinaryPropertyType softwareDevelopmentFile;
    protected CharacterStringPropertyType softwareDevelopmentFileFormat;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setName(CICitationPropertyType value) {
        this.name = value;
    }

    /**
     * Gets the value of the schemaLanguage property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSchemaLanguage() {
        return schemaLanguage;
    }

    /**
     * Sets the value of the schemaLanguage property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSchemaLanguage(CharacterStringPropertyType value) {
        this.schemaLanguage = value;
    }

    /**
     * Gets the value of the constraintLanguage property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getConstraintLanguage() {
        return constraintLanguage;
    }

    /**
     * Sets the value of the constraintLanguage property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setConstraintLanguage(CharacterStringPropertyType value) {
        this.constraintLanguage = value;
    }

    /**
     * Gets the value of the schemaAscii property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSchemaAscii() {
        return schemaAscii;
    }

    /**
     * Sets the value of the schemaAscii property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSchemaAscii(CharacterStringPropertyType value) {
        this.schemaAscii = value;
    }

    /**
     * Gets the value of the graphicsFile property.
     * 
     * @return
     *     possible object is
     *     {@link BinaryPropertyType }
     *     
     */
    public BinaryPropertyType getGraphicsFile() {
        return graphicsFile;
    }

    /**
     * Sets the value of the graphicsFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link BinaryPropertyType }
     *     
     */
    public void setGraphicsFile(BinaryPropertyType value) {
        this.graphicsFile = value;
    }

    /**
     * Gets the value of the softwareDevelopmentFile property.
     * 
     * @return
     *     possible object is
     *     {@link BinaryPropertyType }
     *     
     */
    public BinaryPropertyType getSoftwareDevelopmentFile() {
        return softwareDevelopmentFile;
    }

    /**
     * Sets the value of the softwareDevelopmentFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link BinaryPropertyType }
     *     
     */
    public void setSoftwareDevelopmentFile(BinaryPropertyType value) {
        this.softwareDevelopmentFile = value;
    }

    /**
     * Gets the value of the softwareDevelopmentFileFormat property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSoftwareDevelopmentFileFormat() {
        return softwareDevelopmentFileFormat;
    }

    /**
     * Sets the value of the softwareDevelopmentFileFormat property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSoftwareDevelopmentFileFormat(CharacterStringPropertyType value) {
        this.softwareDevelopmentFileFormat = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CICitationPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            CharacterStringPropertyType theSchemaLanguage;
            theSchemaLanguage = this.getSchemaLanguage();
            strategy.appendField(locator, this, "schemaLanguage", buffer, theSchemaLanguage);
        }
        {
            CharacterStringPropertyType theConstraintLanguage;
            theConstraintLanguage = this.getConstraintLanguage();
            strategy.appendField(locator, this, "constraintLanguage", buffer, theConstraintLanguage);
        }
        {
            CharacterStringPropertyType theSchemaAscii;
            theSchemaAscii = this.getSchemaAscii();
            strategy.appendField(locator, this, "schemaAscii", buffer, theSchemaAscii);
        }
        {
            BinaryPropertyType theGraphicsFile;
            theGraphicsFile = this.getGraphicsFile();
            strategy.appendField(locator, this, "graphicsFile", buffer, theGraphicsFile);
        }
        {
            BinaryPropertyType theSoftwareDevelopmentFile;
            theSoftwareDevelopmentFile = this.getSoftwareDevelopmentFile();
            strategy.appendField(locator, this, "softwareDevelopmentFile", buffer, theSoftwareDevelopmentFile);
        }
        {
            CharacterStringPropertyType theSoftwareDevelopmentFileFormat;
            theSoftwareDevelopmentFileFormat = this.getSoftwareDevelopmentFileFormat();
            strategy.appendField(locator, this, "softwareDevelopmentFileFormat", buffer, theSoftwareDevelopmentFileFormat);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDApplicationSchemaInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDApplicationSchemaInformationType that = ((MDApplicationSchemaInformationType) object);
        {
            CICitationPropertyType lhsName;
            lhsName = this.getName();
            CICitationPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSchemaLanguage;
            lhsSchemaLanguage = this.getSchemaLanguage();
            CharacterStringPropertyType rhsSchemaLanguage;
            rhsSchemaLanguage = that.getSchemaLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "schemaLanguage", lhsSchemaLanguage), LocatorUtils.property(thatLocator, "schemaLanguage", rhsSchemaLanguage), lhsSchemaLanguage, rhsSchemaLanguage)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsConstraintLanguage;
            lhsConstraintLanguage = this.getConstraintLanguage();
            CharacterStringPropertyType rhsConstraintLanguage;
            rhsConstraintLanguage = that.getConstraintLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "constraintLanguage", lhsConstraintLanguage), LocatorUtils.property(thatLocator, "constraintLanguage", rhsConstraintLanguage), lhsConstraintLanguage, rhsConstraintLanguage)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSchemaAscii;
            lhsSchemaAscii = this.getSchemaAscii();
            CharacterStringPropertyType rhsSchemaAscii;
            rhsSchemaAscii = that.getSchemaAscii();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "schemaAscii", lhsSchemaAscii), LocatorUtils.property(thatLocator, "schemaAscii", rhsSchemaAscii), lhsSchemaAscii, rhsSchemaAscii)) {
                return false;
            }
        }
        {
            BinaryPropertyType lhsGraphicsFile;
            lhsGraphicsFile = this.getGraphicsFile();
            BinaryPropertyType rhsGraphicsFile;
            rhsGraphicsFile = that.getGraphicsFile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "graphicsFile", lhsGraphicsFile), LocatorUtils.property(thatLocator, "graphicsFile", rhsGraphicsFile), lhsGraphicsFile, rhsGraphicsFile)) {
                return false;
            }
        }
        {
            BinaryPropertyType lhsSoftwareDevelopmentFile;
            lhsSoftwareDevelopmentFile = this.getSoftwareDevelopmentFile();
            BinaryPropertyType rhsSoftwareDevelopmentFile;
            rhsSoftwareDevelopmentFile = that.getSoftwareDevelopmentFile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "softwareDevelopmentFile", lhsSoftwareDevelopmentFile), LocatorUtils.property(thatLocator, "softwareDevelopmentFile", rhsSoftwareDevelopmentFile), lhsSoftwareDevelopmentFile, rhsSoftwareDevelopmentFile)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSoftwareDevelopmentFileFormat;
            lhsSoftwareDevelopmentFileFormat = this.getSoftwareDevelopmentFileFormat();
            CharacterStringPropertyType rhsSoftwareDevelopmentFileFormat;
            rhsSoftwareDevelopmentFileFormat = that.getSoftwareDevelopmentFileFormat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "softwareDevelopmentFileFormat", lhsSoftwareDevelopmentFileFormat), LocatorUtils.property(thatLocator, "softwareDevelopmentFileFormat", rhsSoftwareDevelopmentFileFormat), lhsSoftwareDevelopmentFileFormat, rhsSoftwareDevelopmentFileFormat)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CICitationPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            CharacterStringPropertyType theSchemaLanguage;
            theSchemaLanguage = this.getSchemaLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "schemaLanguage", theSchemaLanguage), currentHashCode, theSchemaLanguage);
        }
        {
            CharacterStringPropertyType theConstraintLanguage;
            theConstraintLanguage = this.getConstraintLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "constraintLanguage", theConstraintLanguage), currentHashCode, theConstraintLanguage);
        }
        {
            CharacterStringPropertyType theSchemaAscii;
            theSchemaAscii = this.getSchemaAscii();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "schemaAscii", theSchemaAscii), currentHashCode, theSchemaAscii);
        }
        {
            BinaryPropertyType theGraphicsFile;
            theGraphicsFile = this.getGraphicsFile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "graphicsFile", theGraphicsFile), currentHashCode, theGraphicsFile);
        }
        {
            BinaryPropertyType theSoftwareDevelopmentFile;
            theSoftwareDevelopmentFile = this.getSoftwareDevelopmentFile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "softwareDevelopmentFile", theSoftwareDevelopmentFile), currentHashCode, theSoftwareDevelopmentFile);
        }
        {
            CharacterStringPropertyType theSoftwareDevelopmentFileFormat;
            theSoftwareDevelopmentFileFormat = this.getSoftwareDevelopmentFileFormat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "softwareDevelopmentFileFormat", theSoftwareDevelopmentFileFormat), currentHashCode, theSoftwareDevelopmentFileFormat);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDApplicationSchemaInformationType) {
            final MDApplicationSchemaInformationType copy = ((MDApplicationSchemaInformationType) draftCopy);
            if (this.name!= null) {
                CICitationPropertyType sourceName;
                sourceName = this.getName();
                CICitationPropertyType copyName = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.schemaLanguage!= null) {
                CharacterStringPropertyType sourceSchemaLanguage;
                sourceSchemaLanguage = this.getSchemaLanguage();
                CharacterStringPropertyType copySchemaLanguage = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "schemaLanguage", sourceSchemaLanguage), sourceSchemaLanguage));
                copy.setSchemaLanguage(copySchemaLanguage);
            } else {
                copy.schemaLanguage = null;
            }
            if (this.constraintLanguage!= null) {
                CharacterStringPropertyType sourceConstraintLanguage;
                sourceConstraintLanguage = this.getConstraintLanguage();
                CharacterStringPropertyType copyConstraintLanguage = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "constraintLanguage", sourceConstraintLanguage), sourceConstraintLanguage));
                copy.setConstraintLanguage(copyConstraintLanguage);
            } else {
                copy.constraintLanguage = null;
            }
            if (this.schemaAscii!= null) {
                CharacterStringPropertyType sourceSchemaAscii;
                sourceSchemaAscii = this.getSchemaAscii();
                CharacterStringPropertyType copySchemaAscii = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "schemaAscii", sourceSchemaAscii), sourceSchemaAscii));
                copy.setSchemaAscii(copySchemaAscii);
            } else {
                copy.schemaAscii = null;
            }
            if (this.graphicsFile!= null) {
                BinaryPropertyType sourceGraphicsFile;
                sourceGraphicsFile = this.getGraphicsFile();
                BinaryPropertyType copyGraphicsFile = ((BinaryPropertyType) strategy.copy(LocatorUtils.property(locator, "graphicsFile", sourceGraphicsFile), sourceGraphicsFile));
                copy.setGraphicsFile(copyGraphicsFile);
            } else {
                copy.graphicsFile = null;
            }
            if (this.softwareDevelopmentFile!= null) {
                BinaryPropertyType sourceSoftwareDevelopmentFile;
                sourceSoftwareDevelopmentFile = this.getSoftwareDevelopmentFile();
                BinaryPropertyType copySoftwareDevelopmentFile = ((BinaryPropertyType) strategy.copy(LocatorUtils.property(locator, "softwareDevelopmentFile", sourceSoftwareDevelopmentFile), sourceSoftwareDevelopmentFile));
                copy.setSoftwareDevelopmentFile(copySoftwareDevelopmentFile);
            } else {
                copy.softwareDevelopmentFile = null;
            }
            if (this.softwareDevelopmentFileFormat!= null) {
                CharacterStringPropertyType sourceSoftwareDevelopmentFileFormat;
                sourceSoftwareDevelopmentFileFormat = this.getSoftwareDevelopmentFileFormat();
                CharacterStringPropertyType copySoftwareDevelopmentFileFormat = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "softwareDevelopmentFileFormat", sourceSoftwareDevelopmentFileFormat), sourceSoftwareDevelopmentFileFormat));
                copy.setSoftwareDevelopmentFileFormat(copySoftwareDevelopmentFileFormat);
            } else {
                copy.softwareDevelopmentFileFormat = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDApplicationSchemaInformationType();
    }

}
