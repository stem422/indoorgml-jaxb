//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Basic information about data
 * 
 * <p>Java class for AbstractMD_Identification_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractMD_Identification_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="citation" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType"/&gt;
 *         &lt;element name="abstract" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="purpose" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="credit" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="status" type="{http://www.isotc211.org/2005/gmd}MD_ProgressCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="pointOfContact" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="resourceMaintenance" type="{http://www.isotc211.org/2005/gmd}MD_MaintenanceInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="graphicOverview" type="{http://www.isotc211.org/2005/gmd}MD_BrowseGraphic_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="resourceFormat" type="{http://www.isotc211.org/2005/gmd}MD_Format_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="descriptiveKeywords" type="{http://www.isotc211.org/2005/gmd}MD_Keywords_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="resourceSpecificUsage" type="{http://www.isotc211.org/2005/gmd}MD_Usage_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="resourceConstraints" type="{http://www.isotc211.org/2005/gmd}MD_Constraints_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="aggregationInfo" type="{http://www.isotc211.org/2005/gmd}MD_AggregateInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractMD_Identification_Type", propOrder = {
    "citation",
    "_abstract",
    "purpose",
    "credit",
    "status",
    "pointOfContact",
    "resourceMaintenance",
    "graphicOverview",
    "resourceFormat",
    "descriptiveKeywords",
    "resourceSpecificUsage",
    "resourceConstraints",
    "aggregationInfo"
})
@XmlSeeAlso({
    MDDataIdentificationType.class,
    MDServiceIdentificationType.class
})
public abstract class AbstractMDIdentificationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected CICitationPropertyType citation;
    @XmlElement(name = "abstract", required = true)
    protected CharacterStringPropertyType _abstract;
    protected CharacterStringPropertyType purpose;
    protected List<CharacterStringPropertyType> credit;
    protected List<MDProgressCodePropertyType> status;
    protected List<CIResponsiblePartyPropertyType> pointOfContact;
    protected List<MDMaintenanceInformationPropertyType> resourceMaintenance;
    protected List<MDBrowseGraphicPropertyType> graphicOverview;
    protected List<MDFormatPropertyType> resourceFormat;
    protected List<MDKeywordsPropertyType> descriptiveKeywords;
    protected List<MDUsagePropertyType> resourceSpecificUsage;
    protected List<MDConstraintsPropertyType> resourceConstraints;
    protected List<MDAggregateInformationPropertyType> aggregationInfo;

    /**
     * Gets the value of the citation property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getCitation() {
        return citation;
    }

    /**
     * Sets the value of the citation property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setCitation(CICitationPropertyType value) {
        this.citation = value;
    }

    /**
     * Gets the value of the abstract property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getAbstract() {
        return _abstract;
    }

    /**
     * Sets the value of the abstract property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setAbstract(CharacterStringPropertyType value) {
        this._abstract = value;
    }

    /**
     * Gets the value of the purpose property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getPurpose() {
        return purpose;
    }

    /**
     * Sets the value of the purpose property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setPurpose(CharacterStringPropertyType value) {
        this.purpose = value;
    }

    /**
     * Gets the value of the credit property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the credit property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCredit().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getCredit() {
        if (credit == null) {
            credit = new ArrayList<CharacterStringPropertyType>();
        }
        return this.credit;
    }

    /**
     * Gets the value of the status property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the status property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStatus().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDProgressCodePropertyType }
     * 
     * 
     */
    public List<MDProgressCodePropertyType> getStatus() {
        if (status == null) {
            status = new ArrayList<MDProgressCodePropertyType>();
        }
        return this.status;
    }

    /**
     * Gets the value of the pointOfContact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pointOfContact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPointOfContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getPointOfContact() {
        if (pointOfContact == null) {
            pointOfContact = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.pointOfContact;
    }

    /**
     * Gets the value of the resourceMaintenance property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceMaintenance property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceMaintenance().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDMaintenanceInformationPropertyType }
     * 
     * 
     */
    public List<MDMaintenanceInformationPropertyType> getResourceMaintenance() {
        if (resourceMaintenance == null) {
            resourceMaintenance = new ArrayList<MDMaintenanceInformationPropertyType>();
        }
        return this.resourceMaintenance;
    }

    /**
     * Gets the value of the graphicOverview property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the graphicOverview property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGraphicOverview().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDBrowseGraphicPropertyType }
     * 
     * 
     */
    public List<MDBrowseGraphicPropertyType> getGraphicOverview() {
        if (graphicOverview == null) {
            graphicOverview = new ArrayList<MDBrowseGraphicPropertyType>();
        }
        return this.graphicOverview;
    }

    /**
     * Gets the value of the resourceFormat property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceFormat property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDFormatPropertyType }
     * 
     * 
     */
    public List<MDFormatPropertyType> getResourceFormat() {
        if (resourceFormat == null) {
            resourceFormat = new ArrayList<MDFormatPropertyType>();
        }
        return this.resourceFormat;
    }

    /**
     * Gets the value of the descriptiveKeywords property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the descriptiveKeywords property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescriptiveKeywords().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDKeywordsPropertyType }
     * 
     * 
     */
    public List<MDKeywordsPropertyType> getDescriptiveKeywords() {
        if (descriptiveKeywords == null) {
            descriptiveKeywords = new ArrayList<MDKeywordsPropertyType>();
        }
        return this.descriptiveKeywords;
    }

    /**
     * Gets the value of the resourceSpecificUsage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceSpecificUsage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceSpecificUsage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDUsagePropertyType }
     * 
     * 
     */
    public List<MDUsagePropertyType> getResourceSpecificUsage() {
        if (resourceSpecificUsage == null) {
            resourceSpecificUsage = new ArrayList<MDUsagePropertyType>();
        }
        return this.resourceSpecificUsage;
    }

    /**
     * Gets the value of the resourceConstraints property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceConstraints property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceConstraints().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDConstraintsPropertyType }
     * 
     * 
     */
    public List<MDConstraintsPropertyType> getResourceConstraints() {
        if (resourceConstraints == null) {
            resourceConstraints = new ArrayList<MDConstraintsPropertyType>();
        }
        return this.resourceConstraints;
    }

    /**
     * Gets the value of the aggregationInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the aggregationInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAggregationInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDAggregateInformationPropertyType }
     * 
     * 
     */
    public List<MDAggregateInformationPropertyType> getAggregationInfo() {
        if (aggregationInfo == null) {
            aggregationInfo = new ArrayList<MDAggregateInformationPropertyType>();
        }
        return this.aggregationInfo;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            strategy.appendField(locator, this, "citation", buffer, theCitation);
        }
        {
            CharacterStringPropertyType theAbstract;
            theAbstract = this.getAbstract();
            strategy.appendField(locator, this, "_abstract", buffer, theAbstract);
        }
        {
            CharacterStringPropertyType thePurpose;
            thePurpose = this.getPurpose();
            strategy.appendField(locator, this, "purpose", buffer, thePurpose);
        }
        {
            List<CharacterStringPropertyType> theCredit;
            theCredit = (((this.credit!= null)&&(!this.credit.isEmpty()))?this.getCredit():null);
            strategy.appendField(locator, this, "credit", buffer, theCredit);
        }
        {
            List<MDProgressCodePropertyType> theStatus;
            theStatus = (((this.status!= null)&&(!this.status.isEmpty()))?this.getStatus():null);
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            List<CIResponsiblePartyPropertyType> thePointOfContact;
            thePointOfContact = (((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty()))?this.getPointOfContact():null);
            strategy.appendField(locator, this, "pointOfContact", buffer, thePointOfContact);
        }
        {
            List<MDMaintenanceInformationPropertyType> theResourceMaintenance;
            theResourceMaintenance = (((this.resourceMaintenance!= null)&&(!this.resourceMaintenance.isEmpty()))?this.getResourceMaintenance():null);
            strategy.appendField(locator, this, "resourceMaintenance", buffer, theResourceMaintenance);
        }
        {
            List<MDBrowseGraphicPropertyType> theGraphicOverview;
            theGraphicOverview = (((this.graphicOverview!= null)&&(!this.graphicOverview.isEmpty()))?this.getGraphicOverview():null);
            strategy.appendField(locator, this, "graphicOverview", buffer, theGraphicOverview);
        }
        {
            List<MDFormatPropertyType> theResourceFormat;
            theResourceFormat = (((this.resourceFormat!= null)&&(!this.resourceFormat.isEmpty()))?this.getResourceFormat():null);
            strategy.appendField(locator, this, "resourceFormat", buffer, theResourceFormat);
        }
        {
            List<MDKeywordsPropertyType> theDescriptiveKeywords;
            theDescriptiveKeywords = (((this.descriptiveKeywords!= null)&&(!this.descriptiveKeywords.isEmpty()))?this.getDescriptiveKeywords():null);
            strategy.appendField(locator, this, "descriptiveKeywords", buffer, theDescriptiveKeywords);
        }
        {
            List<MDUsagePropertyType> theResourceSpecificUsage;
            theResourceSpecificUsage = (((this.resourceSpecificUsage!= null)&&(!this.resourceSpecificUsage.isEmpty()))?this.getResourceSpecificUsage():null);
            strategy.appendField(locator, this, "resourceSpecificUsage", buffer, theResourceSpecificUsage);
        }
        {
            List<MDConstraintsPropertyType> theResourceConstraints;
            theResourceConstraints = (((this.resourceConstraints!= null)&&(!this.resourceConstraints.isEmpty()))?this.getResourceConstraints():null);
            strategy.appendField(locator, this, "resourceConstraints", buffer, theResourceConstraints);
        }
        {
            List<MDAggregateInformationPropertyType> theAggregationInfo;
            theAggregationInfo = (((this.aggregationInfo!= null)&&(!this.aggregationInfo.isEmpty()))?this.getAggregationInfo():null);
            strategy.appendField(locator, this, "aggregationInfo", buffer, theAggregationInfo);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractMDIdentificationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractMDIdentificationType that = ((AbstractMDIdentificationType) object);
        {
            CICitationPropertyType lhsCitation;
            lhsCitation = this.getCitation();
            CICitationPropertyType rhsCitation;
            rhsCitation = that.getCitation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citation", lhsCitation), LocatorUtils.property(thatLocator, "citation", rhsCitation), lhsCitation, rhsCitation)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsAbstract;
            lhsAbstract = this.getAbstract();
            CharacterStringPropertyType rhsAbstract;
            rhsAbstract = that.getAbstract();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "_abstract", lhsAbstract), LocatorUtils.property(thatLocator, "_abstract", rhsAbstract), lhsAbstract, rhsAbstract)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsPurpose;
            lhsPurpose = this.getPurpose();
            CharacterStringPropertyType rhsPurpose;
            rhsPurpose = that.getPurpose();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "purpose", lhsPurpose), LocatorUtils.property(thatLocator, "purpose", rhsPurpose), lhsPurpose, rhsPurpose)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsCredit;
            lhsCredit = (((this.credit!= null)&&(!this.credit.isEmpty()))?this.getCredit():null);
            List<CharacterStringPropertyType> rhsCredit;
            rhsCredit = (((that.credit!= null)&&(!that.credit.isEmpty()))?that.getCredit():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "credit", lhsCredit), LocatorUtils.property(thatLocator, "credit", rhsCredit), lhsCredit, rhsCredit)) {
                return false;
            }
        }
        {
            List<MDProgressCodePropertyType> lhsStatus;
            lhsStatus = (((this.status!= null)&&(!this.status.isEmpty()))?this.getStatus():null);
            List<MDProgressCodePropertyType> rhsStatus;
            rhsStatus = (((that.status!= null)&&(!that.status.isEmpty()))?that.getStatus():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsPointOfContact;
            lhsPointOfContact = (((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty()))?this.getPointOfContact():null);
            List<CIResponsiblePartyPropertyType> rhsPointOfContact;
            rhsPointOfContact = (((that.pointOfContact!= null)&&(!that.pointOfContact.isEmpty()))?that.getPointOfContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pointOfContact", lhsPointOfContact), LocatorUtils.property(thatLocator, "pointOfContact", rhsPointOfContact), lhsPointOfContact, rhsPointOfContact)) {
                return false;
            }
        }
        {
            List<MDMaintenanceInformationPropertyType> lhsResourceMaintenance;
            lhsResourceMaintenance = (((this.resourceMaintenance!= null)&&(!this.resourceMaintenance.isEmpty()))?this.getResourceMaintenance():null);
            List<MDMaintenanceInformationPropertyType> rhsResourceMaintenance;
            rhsResourceMaintenance = (((that.resourceMaintenance!= null)&&(!that.resourceMaintenance.isEmpty()))?that.getResourceMaintenance():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceMaintenance", lhsResourceMaintenance), LocatorUtils.property(thatLocator, "resourceMaintenance", rhsResourceMaintenance), lhsResourceMaintenance, rhsResourceMaintenance)) {
                return false;
            }
        }
        {
            List<MDBrowseGraphicPropertyType> lhsGraphicOverview;
            lhsGraphicOverview = (((this.graphicOverview!= null)&&(!this.graphicOverview.isEmpty()))?this.getGraphicOverview():null);
            List<MDBrowseGraphicPropertyType> rhsGraphicOverview;
            rhsGraphicOverview = (((that.graphicOverview!= null)&&(!that.graphicOverview.isEmpty()))?that.getGraphicOverview():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "graphicOverview", lhsGraphicOverview), LocatorUtils.property(thatLocator, "graphicOverview", rhsGraphicOverview), lhsGraphicOverview, rhsGraphicOverview)) {
                return false;
            }
        }
        {
            List<MDFormatPropertyType> lhsResourceFormat;
            lhsResourceFormat = (((this.resourceFormat!= null)&&(!this.resourceFormat.isEmpty()))?this.getResourceFormat():null);
            List<MDFormatPropertyType> rhsResourceFormat;
            rhsResourceFormat = (((that.resourceFormat!= null)&&(!that.resourceFormat.isEmpty()))?that.getResourceFormat():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceFormat", lhsResourceFormat), LocatorUtils.property(thatLocator, "resourceFormat", rhsResourceFormat), lhsResourceFormat, rhsResourceFormat)) {
                return false;
            }
        }
        {
            List<MDKeywordsPropertyType> lhsDescriptiveKeywords;
            lhsDescriptiveKeywords = (((this.descriptiveKeywords!= null)&&(!this.descriptiveKeywords.isEmpty()))?this.getDescriptiveKeywords():null);
            List<MDKeywordsPropertyType> rhsDescriptiveKeywords;
            rhsDescriptiveKeywords = (((that.descriptiveKeywords!= null)&&(!that.descriptiveKeywords.isEmpty()))?that.getDescriptiveKeywords():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "descriptiveKeywords", lhsDescriptiveKeywords), LocatorUtils.property(thatLocator, "descriptiveKeywords", rhsDescriptiveKeywords), lhsDescriptiveKeywords, rhsDescriptiveKeywords)) {
                return false;
            }
        }
        {
            List<MDUsagePropertyType> lhsResourceSpecificUsage;
            lhsResourceSpecificUsage = (((this.resourceSpecificUsage!= null)&&(!this.resourceSpecificUsage.isEmpty()))?this.getResourceSpecificUsage():null);
            List<MDUsagePropertyType> rhsResourceSpecificUsage;
            rhsResourceSpecificUsage = (((that.resourceSpecificUsage!= null)&&(!that.resourceSpecificUsage.isEmpty()))?that.getResourceSpecificUsage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceSpecificUsage", lhsResourceSpecificUsage), LocatorUtils.property(thatLocator, "resourceSpecificUsage", rhsResourceSpecificUsage), lhsResourceSpecificUsage, rhsResourceSpecificUsage)) {
                return false;
            }
        }
        {
            List<MDConstraintsPropertyType> lhsResourceConstraints;
            lhsResourceConstraints = (((this.resourceConstraints!= null)&&(!this.resourceConstraints.isEmpty()))?this.getResourceConstraints():null);
            List<MDConstraintsPropertyType> rhsResourceConstraints;
            rhsResourceConstraints = (((that.resourceConstraints!= null)&&(!that.resourceConstraints.isEmpty()))?that.getResourceConstraints():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceConstraints", lhsResourceConstraints), LocatorUtils.property(thatLocator, "resourceConstraints", rhsResourceConstraints), lhsResourceConstraints, rhsResourceConstraints)) {
                return false;
            }
        }
        {
            List<MDAggregateInformationPropertyType> lhsAggregationInfo;
            lhsAggregationInfo = (((this.aggregationInfo!= null)&&(!this.aggregationInfo.isEmpty()))?this.getAggregationInfo():null);
            List<MDAggregateInformationPropertyType> rhsAggregationInfo;
            rhsAggregationInfo = (((that.aggregationInfo!= null)&&(!that.aggregationInfo.isEmpty()))?that.getAggregationInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aggregationInfo", lhsAggregationInfo), LocatorUtils.property(thatLocator, "aggregationInfo", rhsAggregationInfo), lhsAggregationInfo, rhsAggregationInfo)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citation", theCitation), currentHashCode, theCitation);
        }
        {
            CharacterStringPropertyType theAbstract;
            theAbstract = this.getAbstract();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_abstract", theAbstract), currentHashCode, theAbstract);
        }
        {
            CharacterStringPropertyType thePurpose;
            thePurpose = this.getPurpose();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "purpose", thePurpose), currentHashCode, thePurpose);
        }
        {
            List<CharacterStringPropertyType> theCredit;
            theCredit = (((this.credit!= null)&&(!this.credit.isEmpty()))?this.getCredit():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "credit", theCredit), currentHashCode, theCredit);
        }
        {
            List<MDProgressCodePropertyType> theStatus;
            theStatus = (((this.status!= null)&&(!this.status.isEmpty()))?this.getStatus():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            List<CIResponsiblePartyPropertyType> thePointOfContact;
            thePointOfContact = (((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty()))?this.getPointOfContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pointOfContact", thePointOfContact), currentHashCode, thePointOfContact);
        }
        {
            List<MDMaintenanceInformationPropertyType> theResourceMaintenance;
            theResourceMaintenance = (((this.resourceMaintenance!= null)&&(!this.resourceMaintenance.isEmpty()))?this.getResourceMaintenance():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceMaintenance", theResourceMaintenance), currentHashCode, theResourceMaintenance);
        }
        {
            List<MDBrowseGraphicPropertyType> theGraphicOverview;
            theGraphicOverview = (((this.graphicOverview!= null)&&(!this.graphicOverview.isEmpty()))?this.getGraphicOverview():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "graphicOverview", theGraphicOverview), currentHashCode, theGraphicOverview);
        }
        {
            List<MDFormatPropertyType> theResourceFormat;
            theResourceFormat = (((this.resourceFormat!= null)&&(!this.resourceFormat.isEmpty()))?this.getResourceFormat():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceFormat", theResourceFormat), currentHashCode, theResourceFormat);
        }
        {
            List<MDKeywordsPropertyType> theDescriptiveKeywords;
            theDescriptiveKeywords = (((this.descriptiveKeywords!= null)&&(!this.descriptiveKeywords.isEmpty()))?this.getDescriptiveKeywords():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "descriptiveKeywords", theDescriptiveKeywords), currentHashCode, theDescriptiveKeywords);
        }
        {
            List<MDUsagePropertyType> theResourceSpecificUsage;
            theResourceSpecificUsage = (((this.resourceSpecificUsage!= null)&&(!this.resourceSpecificUsage.isEmpty()))?this.getResourceSpecificUsage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceSpecificUsage", theResourceSpecificUsage), currentHashCode, theResourceSpecificUsage);
        }
        {
            List<MDConstraintsPropertyType> theResourceConstraints;
            theResourceConstraints = (((this.resourceConstraints!= null)&&(!this.resourceConstraints.isEmpty()))?this.getResourceConstraints():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceConstraints", theResourceConstraints), currentHashCode, theResourceConstraints);
        }
        {
            List<MDAggregateInformationPropertyType> theAggregationInfo;
            theAggregationInfo = (((this.aggregationInfo!= null)&&(!this.aggregationInfo.isEmpty()))?this.getAggregationInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aggregationInfo", theAggregationInfo), currentHashCode, theAggregationInfo);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractMDIdentificationType) {
            final AbstractMDIdentificationType copy = ((AbstractMDIdentificationType) target);
            if (this.citation!= null) {
                CICitationPropertyType sourceCitation;
                sourceCitation = this.getCitation();
                CICitationPropertyType copyCitation = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "citation", sourceCitation), sourceCitation));
                copy.setCitation(copyCitation);
            } else {
                copy.citation = null;
            }
            if (this._abstract!= null) {
                CharacterStringPropertyType sourceAbstract;
                sourceAbstract = this.getAbstract();
                CharacterStringPropertyType copyAbstract = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "_abstract", sourceAbstract), sourceAbstract));
                copy.setAbstract(copyAbstract);
            } else {
                copy._abstract = null;
            }
            if (this.purpose!= null) {
                CharacterStringPropertyType sourcePurpose;
                sourcePurpose = this.getPurpose();
                CharacterStringPropertyType copyPurpose = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "purpose", sourcePurpose), sourcePurpose));
                copy.setPurpose(copyPurpose);
            } else {
                copy.purpose = null;
            }
            if ((this.credit!= null)&&(!this.credit.isEmpty())) {
                List<CharacterStringPropertyType> sourceCredit;
                sourceCredit = (((this.credit!= null)&&(!this.credit.isEmpty()))?this.getCredit():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyCredit = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "credit", sourceCredit), sourceCredit));
                copy.credit = null;
                if (copyCredit!= null) {
                    List<CharacterStringPropertyType> uniqueCreditl = copy.getCredit();
                    uniqueCreditl.addAll(copyCredit);
                }
            } else {
                copy.credit = null;
            }
            if ((this.status!= null)&&(!this.status.isEmpty())) {
                List<MDProgressCodePropertyType> sourceStatus;
                sourceStatus = (((this.status!= null)&&(!this.status.isEmpty()))?this.getStatus():null);
                @SuppressWarnings("unchecked")
                List<MDProgressCodePropertyType> copyStatus = ((List<MDProgressCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.status = null;
                if (copyStatus!= null) {
                    List<MDProgressCodePropertyType> uniqueStatusl = copy.getStatus();
                    uniqueStatusl.addAll(copyStatus);
                }
            } else {
                copy.status = null;
            }
            if ((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty())) {
                List<CIResponsiblePartyPropertyType> sourcePointOfContact;
                sourcePointOfContact = (((this.pointOfContact!= null)&&(!this.pointOfContact.isEmpty()))?this.getPointOfContact():null);
                @SuppressWarnings("unchecked")
                List<CIResponsiblePartyPropertyType> copyPointOfContact = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "pointOfContact", sourcePointOfContact), sourcePointOfContact));
                copy.pointOfContact = null;
                if (copyPointOfContact!= null) {
                    List<CIResponsiblePartyPropertyType> uniquePointOfContactl = copy.getPointOfContact();
                    uniquePointOfContactl.addAll(copyPointOfContact);
                }
            } else {
                copy.pointOfContact = null;
            }
            if ((this.resourceMaintenance!= null)&&(!this.resourceMaintenance.isEmpty())) {
                List<MDMaintenanceInformationPropertyType> sourceResourceMaintenance;
                sourceResourceMaintenance = (((this.resourceMaintenance!= null)&&(!this.resourceMaintenance.isEmpty()))?this.getResourceMaintenance():null);
                @SuppressWarnings("unchecked")
                List<MDMaintenanceInformationPropertyType> copyResourceMaintenance = ((List<MDMaintenanceInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "resourceMaintenance", sourceResourceMaintenance), sourceResourceMaintenance));
                copy.resourceMaintenance = null;
                if (copyResourceMaintenance!= null) {
                    List<MDMaintenanceInformationPropertyType> uniqueResourceMaintenancel = copy.getResourceMaintenance();
                    uniqueResourceMaintenancel.addAll(copyResourceMaintenance);
                }
            } else {
                copy.resourceMaintenance = null;
            }
            if ((this.graphicOverview!= null)&&(!this.graphicOverview.isEmpty())) {
                List<MDBrowseGraphicPropertyType> sourceGraphicOverview;
                sourceGraphicOverview = (((this.graphicOverview!= null)&&(!this.graphicOverview.isEmpty()))?this.getGraphicOverview():null);
                @SuppressWarnings("unchecked")
                List<MDBrowseGraphicPropertyType> copyGraphicOverview = ((List<MDBrowseGraphicPropertyType> ) strategy.copy(LocatorUtils.property(locator, "graphicOverview", sourceGraphicOverview), sourceGraphicOverview));
                copy.graphicOverview = null;
                if (copyGraphicOverview!= null) {
                    List<MDBrowseGraphicPropertyType> uniqueGraphicOverviewl = copy.getGraphicOverview();
                    uniqueGraphicOverviewl.addAll(copyGraphicOverview);
                }
            } else {
                copy.graphicOverview = null;
            }
            if ((this.resourceFormat!= null)&&(!this.resourceFormat.isEmpty())) {
                List<MDFormatPropertyType> sourceResourceFormat;
                sourceResourceFormat = (((this.resourceFormat!= null)&&(!this.resourceFormat.isEmpty()))?this.getResourceFormat():null);
                @SuppressWarnings("unchecked")
                List<MDFormatPropertyType> copyResourceFormat = ((List<MDFormatPropertyType> ) strategy.copy(LocatorUtils.property(locator, "resourceFormat", sourceResourceFormat), sourceResourceFormat));
                copy.resourceFormat = null;
                if (copyResourceFormat!= null) {
                    List<MDFormatPropertyType> uniqueResourceFormatl = copy.getResourceFormat();
                    uniqueResourceFormatl.addAll(copyResourceFormat);
                }
            } else {
                copy.resourceFormat = null;
            }
            if ((this.descriptiveKeywords!= null)&&(!this.descriptiveKeywords.isEmpty())) {
                List<MDKeywordsPropertyType> sourceDescriptiveKeywords;
                sourceDescriptiveKeywords = (((this.descriptiveKeywords!= null)&&(!this.descriptiveKeywords.isEmpty()))?this.getDescriptiveKeywords():null);
                @SuppressWarnings("unchecked")
                List<MDKeywordsPropertyType> copyDescriptiveKeywords = ((List<MDKeywordsPropertyType> ) strategy.copy(LocatorUtils.property(locator, "descriptiveKeywords", sourceDescriptiveKeywords), sourceDescriptiveKeywords));
                copy.descriptiveKeywords = null;
                if (copyDescriptiveKeywords!= null) {
                    List<MDKeywordsPropertyType> uniqueDescriptiveKeywordsl = copy.getDescriptiveKeywords();
                    uniqueDescriptiveKeywordsl.addAll(copyDescriptiveKeywords);
                }
            } else {
                copy.descriptiveKeywords = null;
            }
            if ((this.resourceSpecificUsage!= null)&&(!this.resourceSpecificUsage.isEmpty())) {
                List<MDUsagePropertyType> sourceResourceSpecificUsage;
                sourceResourceSpecificUsage = (((this.resourceSpecificUsage!= null)&&(!this.resourceSpecificUsage.isEmpty()))?this.getResourceSpecificUsage():null);
                @SuppressWarnings("unchecked")
                List<MDUsagePropertyType> copyResourceSpecificUsage = ((List<MDUsagePropertyType> ) strategy.copy(LocatorUtils.property(locator, "resourceSpecificUsage", sourceResourceSpecificUsage), sourceResourceSpecificUsage));
                copy.resourceSpecificUsage = null;
                if (copyResourceSpecificUsage!= null) {
                    List<MDUsagePropertyType> uniqueResourceSpecificUsagel = copy.getResourceSpecificUsage();
                    uniqueResourceSpecificUsagel.addAll(copyResourceSpecificUsage);
                }
            } else {
                copy.resourceSpecificUsage = null;
            }
            if ((this.resourceConstraints!= null)&&(!this.resourceConstraints.isEmpty())) {
                List<MDConstraintsPropertyType> sourceResourceConstraints;
                sourceResourceConstraints = (((this.resourceConstraints!= null)&&(!this.resourceConstraints.isEmpty()))?this.getResourceConstraints():null);
                @SuppressWarnings("unchecked")
                List<MDConstraintsPropertyType> copyResourceConstraints = ((List<MDConstraintsPropertyType> ) strategy.copy(LocatorUtils.property(locator, "resourceConstraints", sourceResourceConstraints), sourceResourceConstraints));
                copy.resourceConstraints = null;
                if (copyResourceConstraints!= null) {
                    List<MDConstraintsPropertyType> uniqueResourceConstraintsl = copy.getResourceConstraints();
                    uniqueResourceConstraintsl.addAll(copyResourceConstraints);
                }
            } else {
                copy.resourceConstraints = null;
            }
            if ((this.aggregationInfo!= null)&&(!this.aggregationInfo.isEmpty())) {
                List<MDAggregateInformationPropertyType> sourceAggregationInfo;
                sourceAggregationInfo = (((this.aggregationInfo!= null)&&(!this.aggregationInfo.isEmpty()))?this.getAggregationInfo():null);
                @SuppressWarnings("unchecked")
                List<MDAggregateInformationPropertyType> copyAggregationInfo = ((List<MDAggregateInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "aggregationInfo", sourceAggregationInfo), sourceAggregationInfo));
                copy.aggregationInfo = null;
                if (copyAggregationInfo!= null) {
                    List<MDAggregateInformationPropertyType> uniqueAggregationInfol = copy.getAggregationInfo();
                    uniqueAggregationInfol.addAll(copyAggregationInfo);
                }
            } else {
                copy.aggregationInfo = null;
            }
        }
        return target;
    }

}
