//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DQ_DataQuality_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DQ_DataQuality_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="scope" type="{http://www.isotc211.org/2005/gmd}DQ_Scope_PropertyType"/&gt;
 *         &lt;element name="report" type="{http://www.isotc211.org/2005/gmd}DQ_Element_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="lineage" type="{http://www.isotc211.org/2005/gmd}LI_Lineage_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DQ_DataQuality_Type", propOrder = {
    "scope",
    "report",
    "lineage"
})
public class DQDataQualityType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected DQScopePropertyType scope;
    protected List<DQElementPropertyType> report;
    protected LILineagePropertyType lineage;

    /**
     * Gets the value of the scope property.
     * 
     * @return
     *     possible object is
     *     {@link DQScopePropertyType }
     *     
     */
    public DQScopePropertyType getScope() {
        return scope;
    }

    /**
     * Sets the value of the scope property.
     * 
     * @param value
     *     allowed object is
     *     {@link DQScopePropertyType }
     *     
     */
    public void setScope(DQScopePropertyType value) {
        this.scope = value;
    }

    /**
     * Gets the value of the report property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the report property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReport().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DQElementPropertyType }
     * 
     * 
     */
    public List<DQElementPropertyType> getReport() {
        if (report == null) {
            report = new ArrayList<DQElementPropertyType>();
        }
        return this.report;
    }

    /**
     * Gets the value of the lineage property.
     * 
     * @return
     *     possible object is
     *     {@link LILineagePropertyType }
     *     
     */
    public LILineagePropertyType getLineage() {
        return lineage;
    }

    /**
     * Sets the value of the lineage property.
     * 
     * @param value
     *     allowed object is
     *     {@link LILineagePropertyType }
     *     
     */
    public void setLineage(LILineagePropertyType value) {
        this.lineage = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            DQScopePropertyType theScope;
            theScope = this.getScope();
            strategy.appendField(locator, this, "scope", buffer, theScope);
        }
        {
            List<DQElementPropertyType> theReport;
            theReport = (((this.report!= null)&&(!this.report.isEmpty()))?this.getReport():null);
            strategy.appendField(locator, this, "report", buffer, theReport);
        }
        {
            LILineagePropertyType theLineage;
            theLineage = this.getLineage();
            strategy.appendField(locator, this, "lineage", buffer, theLineage);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DQDataQualityType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DQDataQualityType that = ((DQDataQualityType) object);
        {
            DQScopePropertyType lhsScope;
            lhsScope = this.getScope();
            DQScopePropertyType rhsScope;
            rhsScope = that.getScope();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scope", lhsScope), LocatorUtils.property(thatLocator, "scope", rhsScope), lhsScope, rhsScope)) {
                return false;
            }
        }
        {
            List<DQElementPropertyType> lhsReport;
            lhsReport = (((this.report!= null)&&(!this.report.isEmpty()))?this.getReport():null);
            List<DQElementPropertyType> rhsReport;
            rhsReport = (((that.report!= null)&&(!that.report.isEmpty()))?that.getReport():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "report", lhsReport), LocatorUtils.property(thatLocator, "report", rhsReport), lhsReport, rhsReport)) {
                return false;
            }
        }
        {
            LILineagePropertyType lhsLineage;
            lhsLineage = this.getLineage();
            LILineagePropertyType rhsLineage;
            rhsLineage = that.getLineage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lineage", lhsLineage), LocatorUtils.property(thatLocator, "lineage", rhsLineage), lhsLineage, rhsLineage)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DQScopePropertyType theScope;
            theScope = this.getScope();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scope", theScope), currentHashCode, theScope);
        }
        {
            List<DQElementPropertyType> theReport;
            theReport = (((this.report!= null)&&(!this.report.isEmpty()))?this.getReport():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "report", theReport), currentHashCode, theReport);
        }
        {
            LILineagePropertyType theLineage;
            theLineage = this.getLineage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lineage", theLineage), currentHashCode, theLineage);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DQDataQualityType) {
            final DQDataQualityType copy = ((DQDataQualityType) draftCopy);
            if (this.scope!= null) {
                DQScopePropertyType sourceScope;
                sourceScope = this.getScope();
                DQScopePropertyType copyScope = ((DQScopePropertyType) strategy.copy(LocatorUtils.property(locator, "scope", sourceScope), sourceScope));
                copy.setScope(copyScope);
            } else {
                copy.scope = null;
            }
            if ((this.report!= null)&&(!this.report.isEmpty())) {
                List<DQElementPropertyType> sourceReport;
                sourceReport = (((this.report!= null)&&(!this.report.isEmpty()))?this.getReport():null);
                @SuppressWarnings("unchecked")
                List<DQElementPropertyType> copyReport = ((List<DQElementPropertyType> ) strategy.copy(LocatorUtils.property(locator, "report", sourceReport), sourceReport));
                copy.report = null;
                if (copyReport!= null) {
                    List<DQElementPropertyType> uniqueReportl = copy.getReport();
                    uniqueReportl.addAll(copyReport);
                }
            } else {
                copy.report = null;
            }
            if (this.lineage!= null) {
                LILineagePropertyType sourceLineage;
                sourceLineage = this.getLineage();
                LILineagePropertyType copyLineage = ((LILineagePropertyType) strategy.copy(LocatorUtils.property(locator, "lineage", sourceLineage), sourceLineage));
                copy.setLineage(copyLineage);
            } else {
                copy.lineage = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DQDataQualityType();
    }

}
