//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.DatePropertyType;
import org.isotc211._2005.gco.ObjectReferencePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the metadata
 * 
 * <p>Java class for MD_Metadata_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Metadata_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="fileIdentifier" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="language" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="characterSet" type="{http://www.isotc211.org/2005/gmd}MD_CharacterSetCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="parentIdentifier" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="hierarchyLevel" type="{http://www.isotc211.org/2005/gmd}MD_ScopeCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="hierarchyLevelName" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="contact" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="dateStamp" type="{http://www.isotc211.org/2005/gco}Date_PropertyType"/&gt;
 *         &lt;element name="metadataStandardName" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="metadataStandardVersion" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="dataSetURI" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="locale" type="{http://www.isotc211.org/2005/gmd}PT_Locale_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="spatialRepresentationInfo" type="{http://www.isotc211.org/2005/gmd}MD_SpatialRepresentation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="referenceSystemInfo" type="{http://www.isotc211.org/2005/gmd}MD_ReferenceSystem_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="metadataExtensionInfo" type="{http://www.isotc211.org/2005/gmd}MD_MetadataExtensionInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="identificationInfo" type="{http://www.isotc211.org/2005/gmd}MD_Identification_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="contentInfo" type="{http://www.isotc211.org/2005/gmd}MD_ContentInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="distributionInfo" type="{http://www.isotc211.org/2005/gmd}MD_Distribution_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="dataQualityInfo" type="{http://www.isotc211.org/2005/gmd}DQ_DataQuality_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="portrayalCatalogueInfo" type="{http://www.isotc211.org/2005/gmd}MD_PortrayalCatalogueReference_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="metadataConstraints" type="{http://www.isotc211.org/2005/gmd}MD_Constraints_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="applicationSchemaInfo" type="{http://www.isotc211.org/2005/gmd}MD_ApplicationSchemaInformation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="metadataMaintenance" type="{http://www.isotc211.org/2005/gmd}MD_MaintenanceInformation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="series" type="{http://www.isotc211.org/2005/gmd}DS_Aggregate_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="describes" type="{http://www.isotc211.org/2005/gmd}DS_DataSet_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="propertyType" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="featureType" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="featureAttribute" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Metadata_Type", propOrder = {
    "fileIdentifier",
    "language",
    "characterSet",
    "parentIdentifier",
    "hierarchyLevel",
    "hierarchyLevelName",
    "contact",
    "dateStamp",
    "metadataStandardName",
    "metadataStandardVersion",
    "dataSetURI",
    "locale",
    "spatialRepresentationInfo",
    "referenceSystemInfo",
    "metadataExtensionInfo",
    "identificationInfo",
    "contentInfo",
    "distributionInfo",
    "dataQualityInfo",
    "portrayalCatalogueInfo",
    "metadataConstraints",
    "applicationSchemaInfo",
    "metadataMaintenance",
    "series",
    "describes",
    "propertyType",
    "featureType",
    "featureAttribute"
})
public class MDMetadataType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CharacterStringPropertyType fileIdentifier;
    protected CharacterStringPropertyType language;
    protected MDCharacterSetCodePropertyType characterSet;
    protected CharacterStringPropertyType parentIdentifier;
    protected List<MDScopeCodePropertyType> hierarchyLevel;
    protected List<CharacterStringPropertyType> hierarchyLevelName;
    @XmlElement(required = true)
    protected List<CIResponsiblePartyPropertyType> contact;
    @XmlElement(required = true)
    protected DatePropertyType dateStamp;
    protected CharacterStringPropertyType metadataStandardName;
    protected CharacterStringPropertyType metadataStandardVersion;
    protected CharacterStringPropertyType dataSetURI;
    protected List<PTLocalePropertyType> locale;
    protected List<MDSpatialRepresentationPropertyType> spatialRepresentationInfo;
    protected List<MDReferenceSystemPropertyType> referenceSystemInfo;
    protected List<MDMetadataExtensionInformationPropertyType> metadataExtensionInfo;
    @XmlElement(required = true)
    protected List<MDIdentificationPropertyType> identificationInfo;
    protected List<MDContentInformationPropertyType> contentInfo;
    protected MDDistributionPropertyType distributionInfo;
    protected List<DQDataQualityPropertyType> dataQualityInfo;
    protected List<MDPortrayalCatalogueReferencePropertyType> portrayalCatalogueInfo;
    protected List<MDConstraintsPropertyType> metadataConstraints;
    protected List<MDApplicationSchemaInformationPropertyType> applicationSchemaInfo;
    protected MDMaintenanceInformationPropertyType metadataMaintenance;
    protected List<DSAggregatePropertyType> series;
    protected List<DSDataSetPropertyType> describes;
    protected List<ObjectReferencePropertyType> propertyType;
    protected List<ObjectReferencePropertyType> featureType;
    protected List<ObjectReferencePropertyType> featureAttribute;

    /**
     * Gets the value of the fileIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getFileIdentifier() {
        return fileIdentifier;
    }

    /**
     * Sets the value of the fileIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setFileIdentifier(CharacterStringPropertyType value) {
        this.fileIdentifier = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setLanguage(CharacterStringPropertyType value) {
        this.language = value;
    }

    /**
     * Gets the value of the characterSet property.
     * 
     * @return
     *     possible object is
     *     {@link MDCharacterSetCodePropertyType }
     *     
     */
    public MDCharacterSetCodePropertyType getCharacterSet() {
        return characterSet;
    }

    /**
     * Sets the value of the characterSet property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDCharacterSetCodePropertyType }
     *     
     */
    public void setCharacterSet(MDCharacterSetCodePropertyType value) {
        this.characterSet = value;
    }

    /**
     * Gets the value of the parentIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getParentIdentifier() {
        return parentIdentifier;
    }

    /**
     * Sets the value of the parentIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setParentIdentifier(CharacterStringPropertyType value) {
        this.parentIdentifier = value;
    }

    /**
     * Gets the value of the hierarchyLevel property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hierarchyLevel property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHierarchyLevel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDScopeCodePropertyType }
     * 
     * 
     */
    public List<MDScopeCodePropertyType> getHierarchyLevel() {
        if (hierarchyLevel == null) {
            hierarchyLevel = new ArrayList<MDScopeCodePropertyType>();
        }
        return this.hierarchyLevel;
    }

    /**
     * Gets the value of the hierarchyLevelName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hierarchyLevelName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHierarchyLevelName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getHierarchyLevelName() {
        if (hierarchyLevelName == null) {
            hierarchyLevelName = new ArrayList<CharacterStringPropertyType>();
        }
        return this.hierarchyLevelName;
    }

    /**
     * Gets the value of the contact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getContact() {
        if (contact == null) {
            contact = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.contact;
    }

    /**
     * Gets the value of the dateStamp property.
     * 
     * @return
     *     possible object is
     *     {@link DatePropertyType }
     *     
     */
    public DatePropertyType getDateStamp() {
        return dateStamp;
    }

    /**
     * Sets the value of the dateStamp property.
     * 
     * @param value
     *     allowed object is
     *     {@link DatePropertyType }
     *     
     */
    public void setDateStamp(DatePropertyType value) {
        this.dateStamp = value;
    }

    /**
     * Gets the value of the metadataStandardName property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getMetadataStandardName() {
        return metadataStandardName;
    }

    /**
     * Sets the value of the metadataStandardName property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setMetadataStandardName(CharacterStringPropertyType value) {
        this.metadataStandardName = value;
    }

    /**
     * Gets the value of the metadataStandardVersion property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getMetadataStandardVersion() {
        return metadataStandardVersion;
    }

    /**
     * Sets the value of the metadataStandardVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setMetadataStandardVersion(CharacterStringPropertyType value) {
        this.metadataStandardVersion = value;
    }

    /**
     * Gets the value of the dataSetURI property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDataSetURI() {
        return dataSetURI;
    }

    /**
     * Sets the value of the dataSetURI property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDataSetURI(CharacterStringPropertyType value) {
        this.dataSetURI = value;
    }

    /**
     * Gets the value of the locale property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the locale property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocale().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PTLocalePropertyType }
     * 
     * 
     */
    public List<PTLocalePropertyType> getLocale() {
        if (locale == null) {
            locale = new ArrayList<PTLocalePropertyType>();
        }
        return this.locale;
    }

    /**
     * Gets the value of the spatialRepresentationInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the spatialRepresentationInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpatialRepresentationInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDSpatialRepresentationPropertyType }
     * 
     * 
     */
    public List<MDSpatialRepresentationPropertyType> getSpatialRepresentationInfo() {
        if (spatialRepresentationInfo == null) {
            spatialRepresentationInfo = new ArrayList<MDSpatialRepresentationPropertyType>();
        }
        return this.spatialRepresentationInfo;
    }

    /**
     * Gets the value of the referenceSystemInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the referenceSystemInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReferenceSystemInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDReferenceSystemPropertyType }
     * 
     * 
     */
    public List<MDReferenceSystemPropertyType> getReferenceSystemInfo() {
        if (referenceSystemInfo == null) {
            referenceSystemInfo = new ArrayList<MDReferenceSystemPropertyType>();
        }
        return this.referenceSystemInfo;
    }

    /**
     * Gets the value of the metadataExtensionInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the metadataExtensionInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMetadataExtensionInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDMetadataExtensionInformationPropertyType }
     * 
     * 
     */
    public List<MDMetadataExtensionInformationPropertyType> getMetadataExtensionInfo() {
        if (metadataExtensionInfo == null) {
            metadataExtensionInfo = new ArrayList<MDMetadataExtensionInformationPropertyType>();
        }
        return this.metadataExtensionInfo;
    }

    /**
     * Gets the value of the identificationInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identificationInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentificationInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDIdentificationPropertyType }
     * 
     * 
     */
    public List<MDIdentificationPropertyType> getIdentificationInfo() {
        if (identificationInfo == null) {
            identificationInfo = new ArrayList<MDIdentificationPropertyType>();
        }
        return this.identificationInfo;
    }

    /**
     * Gets the value of the contentInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contentInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContentInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDContentInformationPropertyType }
     * 
     * 
     */
    public List<MDContentInformationPropertyType> getContentInfo() {
        if (contentInfo == null) {
            contentInfo = new ArrayList<MDContentInformationPropertyType>();
        }
        return this.contentInfo;
    }

    /**
     * Gets the value of the distributionInfo property.
     * 
     * @return
     *     possible object is
     *     {@link MDDistributionPropertyType }
     *     
     */
    public MDDistributionPropertyType getDistributionInfo() {
        return distributionInfo;
    }

    /**
     * Sets the value of the distributionInfo property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDDistributionPropertyType }
     *     
     */
    public void setDistributionInfo(MDDistributionPropertyType value) {
        this.distributionInfo = value;
    }

    /**
     * Gets the value of the dataQualityInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataQualityInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataQualityInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DQDataQualityPropertyType }
     * 
     * 
     */
    public List<DQDataQualityPropertyType> getDataQualityInfo() {
        if (dataQualityInfo == null) {
            dataQualityInfo = new ArrayList<DQDataQualityPropertyType>();
        }
        return this.dataQualityInfo;
    }

    /**
     * Gets the value of the portrayalCatalogueInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the portrayalCatalogueInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPortrayalCatalogueInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDPortrayalCatalogueReferencePropertyType }
     * 
     * 
     */
    public List<MDPortrayalCatalogueReferencePropertyType> getPortrayalCatalogueInfo() {
        if (portrayalCatalogueInfo == null) {
            portrayalCatalogueInfo = new ArrayList<MDPortrayalCatalogueReferencePropertyType>();
        }
        return this.portrayalCatalogueInfo;
    }

    /**
     * Gets the value of the metadataConstraints property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the metadataConstraints property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMetadataConstraints().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDConstraintsPropertyType }
     * 
     * 
     */
    public List<MDConstraintsPropertyType> getMetadataConstraints() {
        if (metadataConstraints == null) {
            metadataConstraints = new ArrayList<MDConstraintsPropertyType>();
        }
        return this.metadataConstraints;
    }

    /**
     * Gets the value of the applicationSchemaInfo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the applicationSchemaInfo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getApplicationSchemaInfo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDApplicationSchemaInformationPropertyType }
     * 
     * 
     */
    public List<MDApplicationSchemaInformationPropertyType> getApplicationSchemaInfo() {
        if (applicationSchemaInfo == null) {
            applicationSchemaInfo = new ArrayList<MDApplicationSchemaInformationPropertyType>();
        }
        return this.applicationSchemaInfo;
    }

    /**
     * Gets the value of the metadataMaintenance property.
     * 
     * @return
     *     possible object is
     *     {@link MDMaintenanceInformationPropertyType }
     *     
     */
    public MDMaintenanceInformationPropertyType getMetadataMaintenance() {
        return metadataMaintenance;
    }

    /**
     * Sets the value of the metadataMaintenance property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDMaintenanceInformationPropertyType }
     *     
     */
    public void setMetadataMaintenance(MDMaintenanceInformationPropertyType value) {
        this.metadataMaintenance = value;
    }

    /**
     * Gets the value of the series property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the series property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSeries().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DSAggregatePropertyType }
     * 
     * 
     */
    public List<DSAggregatePropertyType> getSeries() {
        if (series == null) {
            series = new ArrayList<DSAggregatePropertyType>();
        }
        return this.series;
    }

    /**
     * Gets the value of the describes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the describes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescribes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DSDataSetPropertyType }
     * 
     * 
     */
    public List<DSDataSetPropertyType> getDescribes() {
        if (describes == null) {
            describes = new ArrayList<DSDataSetPropertyType>();
        }
        return this.describes;
    }

    /**
     * Gets the value of the propertyType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the propertyType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPropertyType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getPropertyType() {
        if (propertyType == null) {
            propertyType = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.propertyType;
    }

    /**
     * Gets the value of the featureType property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the featureType property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFeatureType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getFeatureType() {
        if (featureType == null) {
            featureType = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.featureType;
    }

    /**
     * Gets the value of the featureAttribute property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the featureAttribute property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFeatureAttribute().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getFeatureAttribute() {
        if (featureAttribute == null) {
            featureAttribute = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.featureAttribute;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theFileIdentifier;
            theFileIdentifier = this.getFileIdentifier();
            strategy.appendField(locator, this, "fileIdentifier", buffer, theFileIdentifier);
        }
        {
            CharacterStringPropertyType theLanguage;
            theLanguage = this.getLanguage();
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        {
            MDCharacterSetCodePropertyType theCharacterSet;
            theCharacterSet = this.getCharacterSet();
            strategy.appendField(locator, this, "characterSet", buffer, theCharacterSet);
        }
        {
            CharacterStringPropertyType theParentIdentifier;
            theParentIdentifier = this.getParentIdentifier();
            strategy.appendField(locator, this, "parentIdentifier", buffer, theParentIdentifier);
        }
        {
            List<MDScopeCodePropertyType> theHierarchyLevel;
            theHierarchyLevel = (((this.hierarchyLevel!= null)&&(!this.hierarchyLevel.isEmpty()))?this.getHierarchyLevel():null);
            strategy.appendField(locator, this, "hierarchyLevel", buffer, theHierarchyLevel);
        }
        {
            List<CharacterStringPropertyType> theHierarchyLevelName;
            theHierarchyLevelName = (((this.hierarchyLevelName!= null)&&(!this.hierarchyLevelName.isEmpty()))?this.getHierarchyLevelName():null);
            strategy.appendField(locator, this, "hierarchyLevelName", buffer, theHierarchyLevelName);
        }
        {
            List<CIResponsiblePartyPropertyType> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            strategy.appendField(locator, this, "contact", buffer, theContact);
        }
        {
            DatePropertyType theDateStamp;
            theDateStamp = this.getDateStamp();
            strategy.appendField(locator, this, "dateStamp", buffer, theDateStamp);
        }
        {
            CharacterStringPropertyType theMetadataStandardName;
            theMetadataStandardName = this.getMetadataStandardName();
            strategy.appendField(locator, this, "metadataStandardName", buffer, theMetadataStandardName);
        }
        {
            CharacterStringPropertyType theMetadataStandardVersion;
            theMetadataStandardVersion = this.getMetadataStandardVersion();
            strategy.appendField(locator, this, "metadataStandardVersion", buffer, theMetadataStandardVersion);
        }
        {
            CharacterStringPropertyType theDataSetURI;
            theDataSetURI = this.getDataSetURI();
            strategy.appendField(locator, this, "dataSetURI", buffer, theDataSetURI);
        }
        {
            List<PTLocalePropertyType> theLocale;
            theLocale = (((this.locale!= null)&&(!this.locale.isEmpty()))?this.getLocale():null);
            strategy.appendField(locator, this, "locale", buffer, theLocale);
        }
        {
            List<MDSpatialRepresentationPropertyType> theSpatialRepresentationInfo;
            theSpatialRepresentationInfo = (((this.spatialRepresentationInfo!= null)&&(!this.spatialRepresentationInfo.isEmpty()))?this.getSpatialRepresentationInfo():null);
            strategy.appendField(locator, this, "spatialRepresentationInfo", buffer, theSpatialRepresentationInfo);
        }
        {
            List<MDReferenceSystemPropertyType> theReferenceSystemInfo;
            theReferenceSystemInfo = (((this.referenceSystemInfo!= null)&&(!this.referenceSystemInfo.isEmpty()))?this.getReferenceSystemInfo():null);
            strategy.appendField(locator, this, "referenceSystemInfo", buffer, theReferenceSystemInfo);
        }
        {
            List<MDMetadataExtensionInformationPropertyType> theMetadataExtensionInfo;
            theMetadataExtensionInfo = (((this.metadataExtensionInfo!= null)&&(!this.metadataExtensionInfo.isEmpty()))?this.getMetadataExtensionInfo():null);
            strategy.appendField(locator, this, "metadataExtensionInfo", buffer, theMetadataExtensionInfo);
        }
        {
            List<MDIdentificationPropertyType> theIdentificationInfo;
            theIdentificationInfo = (((this.identificationInfo!= null)&&(!this.identificationInfo.isEmpty()))?this.getIdentificationInfo():null);
            strategy.appendField(locator, this, "identificationInfo", buffer, theIdentificationInfo);
        }
        {
            List<MDContentInformationPropertyType> theContentInfo;
            theContentInfo = (((this.contentInfo!= null)&&(!this.contentInfo.isEmpty()))?this.getContentInfo():null);
            strategy.appendField(locator, this, "contentInfo", buffer, theContentInfo);
        }
        {
            MDDistributionPropertyType theDistributionInfo;
            theDistributionInfo = this.getDistributionInfo();
            strategy.appendField(locator, this, "distributionInfo", buffer, theDistributionInfo);
        }
        {
            List<DQDataQualityPropertyType> theDataQualityInfo;
            theDataQualityInfo = (((this.dataQualityInfo!= null)&&(!this.dataQualityInfo.isEmpty()))?this.getDataQualityInfo():null);
            strategy.appendField(locator, this, "dataQualityInfo", buffer, theDataQualityInfo);
        }
        {
            List<MDPortrayalCatalogueReferencePropertyType> thePortrayalCatalogueInfo;
            thePortrayalCatalogueInfo = (((this.portrayalCatalogueInfo!= null)&&(!this.portrayalCatalogueInfo.isEmpty()))?this.getPortrayalCatalogueInfo():null);
            strategy.appendField(locator, this, "portrayalCatalogueInfo", buffer, thePortrayalCatalogueInfo);
        }
        {
            List<MDConstraintsPropertyType> theMetadataConstraints;
            theMetadataConstraints = (((this.metadataConstraints!= null)&&(!this.metadataConstraints.isEmpty()))?this.getMetadataConstraints():null);
            strategy.appendField(locator, this, "metadataConstraints", buffer, theMetadataConstraints);
        }
        {
            List<MDApplicationSchemaInformationPropertyType> theApplicationSchemaInfo;
            theApplicationSchemaInfo = (((this.applicationSchemaInfo!= null)&&(!this.applicationSchemaInfo.isEmpty()))?this.getApplicationSchemaInfo():null);
            strategy.appendField(locator, this, "applicationSchemaInfo", buffer, theApplicationSchemaInfo);
        }
        {
            MDMaintenanceInformationPropertyType theMetadataMaintenance;
            theMetadataMaintenance = this.getMetadataMaintenance();
            strategy.appendField(locator, this, "metadataMaintenance", buffer, theMetadataMaintenance);
        }
        {
            List<DSAggregatePropertyType> theSeries;
            theSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
            strategy.appendField(locator, this, "series", buffer, theSeries);
        }
        {
            List<DSDataSetPropertyType> theDescribes;
            theDescribes = (((this.describes!= null)&&(!this.describes.isEmpty()))?this.getDescribes():null);
            strategy.appendField(locator, this, "describes", buffer, theDescribes);
        }
        {
            List<ObjectReferencePropertyType> thePropertyType;
            thePropertyType = (((this.propertyType!= null)&&(!this.propertyType.isEmpty()))?this.getPropertyType():null);
            strategy.appendField(locator, this, "propertyType", buffer, thePropertyType);
        }
        {
            List<ObjectReferencePropertyType> theFeatureType;
            theFeatureType = (((this.featureType!= null)&&(!this.featureType.isEmpty()))?this.getFeatureType():null);
            strategy.appendField(locator, this, "featureType", buffer, theFeatureType);
        }
        {
            List<ObjectReferencePropertyType> theFeatureAttribute;
            theFeatureAttribute = (((this.featureAttribute!= null)&&(!this.featureAttribute.isEmpty()))?this.getFeatureAttribute():null);
            strategy.appendField(locator, this, "featureAttribute", buffer, theFeatureAttribute);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDMetadataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDMetadataType that = ((MDMetadataType) object);
        {
            CharacterStringPropertyType lhsFileIdentifier;
            lhsFileIdentifier = this.getFileIdentifier();
            CharacterStringPropertyType rhsFileIdentifier;
            rhsFileIdentifier = that.getFileIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileIdentifier", lhsFileIdentifier), LocatorUtils.property(thatLocator, "fileIdentifier", rhsFileIdentifier), lhsFileIdentifier, rhsFileIdentifier)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsLanguage;
            lhsLanguage = this.getLanguage();
            CharacterStringPropertyType rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            MDCharacterSetCodePropertyType lhsCharacterSet;
            lhsCharacterSet = this.getCharacterSet();
            MDCharacterSetCodePropertyType rhsCharacterSet;
            rhsCharacterSet = that.getCharacterSet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "characterSet", lhsCharacterSet), LocatorUtils.property(thatLocator, "characterSet", rhsCharacterSet), lhsCharacterSet, rhsCharacterSet)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsParentIdentifier;
            lhsParentIdentifier = this.getParentIdentifier();
            CharacterStringPropertyType rhsParentIdentifier;
            rhsParentIdentifier = that.getParentIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "parentIdentifier", lhsParentIdentifier), LocatorUtils.property(thatLocator, "parentIdentifier", rhsParentIdentifier), lhsParentIdentifier, rhsParentIdentifier)) {
                return false;
            }
        }
        {
            List<MDScopeCodePropertyType> lhsHierarchyLevel;
            lhsHierarchyLevel = (((this.hierarchyLevel!= null)&&(!this.hierarchyLevel.isEmpty()))?this.getHierarchyLevel():null);
            List<MDScopeCodePropertyType> rhsHierarchyLevel;
            rhsHierarchyLevel = (((that.hierarchyLevel!= null)&&(!that.hierarchyLevel.isEmpty()))?that.getHierarchyLevel():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hierarchyLevel", lhsHierarchyLevel), LocatorUtils.property(thatLocator, "hierarchyLevel", rhsHierarchyLevel), lhsHierarchyLevel, rhsHierarchyLevel)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsHierarchyLevelName;
            lhsHierarchyLevelName = (((this.hierarchyLevelName!= null)&&(!this.hierarchyLevelName.isEmpty()))?this.getHierarchyLevelName():null);
            List<CharacterStringPropertyType> rhsHierarchyLevelName;
            rhsHierarchyLevelName = (((that.hierarchyLevelName!= null)&&(!that.hierarchyLevelName.isEmpty()))?that.getHierarchyLevelName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hierarchyLevelName", lhsHierarchyLevelName), LocatorUtils.property(thatLocator, "hierarchyLevelName", rhsHierarchyLevelName), lhsHierarchyLevelName, rhsHierarchyLevelName)) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsContact;
            lhsContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            List<CIResponsiblePartyPropertyType> rhsContact;
            rhsContact = (((that.contact!= null)&&(!that.contact.isEmpty()))?that.getContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contact", lhsContact), LocatorUtils.property(thatLocator, "contact", rhsContact), lhsContact, rhsContact)) {
                return false;
            }
        }
        {
            DatePropertyType lhsDateStamp;
            lhsDateStamp = this.getDateStamp();
            DatePropertyType rhsDateStamp;
            rhsDateStamp = that.getDateStamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateStamp", lhsDateStamp), LocatorUtils.property(thatLocator, "dateStamp", rhsDateStamp), lhsDateStamp, rhsDateStamp)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsMetadataStandardName;
            lhsMetadataStandardName = this.getMetadataStandardName();
            CharacterStringPropertyType rhsMetadataStandardName;
            rhsMetadataStandardName = that.getMetadataStandardName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "metadataStandardName", lhsMetadataStandardName), LocatorUtils.property(thatLocator, "metadataStandardName", rhsMetadataStandardName), lhsMetadataStandardName, rhsMetadataStandardName)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsMetadataStandardVersion;
            lhsMetadataStandardVersion = this.getMetadataStandardVersion();
            CharacterStringPropertyType rhsMetadataStandardVersion;
            rhsMetadataStandardVersion = that.getMetadataStandardVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "metadataStandardVersion", lhsMetadataStandardVersion), LocatorUtils.property(thatLocator, "metadataStandardVersion", rhsMetadataStandardVersion), lhsMetadataStandardVersion, rhsMetadataStandardVersion)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDataSetURI;
            lhsDataSetURI = this.getDataSetURI();
            CharacterStringPropertyType rhsDataSetURI;
            rhsDataSetURI = that.getDataSetURI();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataSetURI", lhsDataSetURI), LocatorUtils.property(thatLocator, "dataSetURI", rhsDataSetURI), lhsDataSetURI, rhsDataSetURI)) {
                return false;
            }
        }
        {
            List<PTLocalePropertyType> lhsLocale;
            lhsLocale = (((this.locale!= null)&&(!this.locale.isEmpty()))?this.getLocale():null);
            List<PTLocalePropertyType> rhsLocale;
            rhsLocale = (((that.locale!= null)&&(!that.locale.isEmpty()))?that.getLocale():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locale", lhsLocale), LocatorUtils.property(thatLocator, "locale", rhsLocale), lhsLocale, rhsLocale)) {
                return false;
            }
        }
        {
            List<MDSpatialRepresentationPropertyType> lhsSpatialRepresentationInfo;
            lhsSpatialRepresentationInfo = (((this.spatialRepresentationInfo!= null)&&(!this.spatialRepresentationInfo.isEmpty()))?this.getSpatialRepresentationInfo():null);
            List<MDSpatialRepresentationPropertyType> rhsSpatialRepresentationInfo;
            rhsSpatialRepresentationInfo = (((that.spatialRepresentationInfo!= null)&&(!that.spatialRepresentationInfo.isEmpty()))?that.getSpatialRepresentationInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "spatialRepresentationInfo", lhsSpatialRepresentationInfo), LocatorUtils.property(thatLocator, "spatialRepresentationInfo", rhsSpatialRepresentationInfo), lhsSpatialRepresentationInfo, rhsSpatialRepresentationInfo)) {
                return false;
            }
        }
        {
            List<MDReferenceSystemPropertyType> lhsReferenceSystemInfo;
            lhsReferenceSystemInfo = (((this.referenceSystemInfo!= null)&&(!this.referenceSystemInfo.isEmpty()))?this.getReferenceSystemInfo():null);
            List<MDReferenceSystemPropertyType> rhsReferenceSystemInfo;
            rhsReferenceSystemInfo = (((that.referenceSystemInfo!= null)&&(!that.referenceSystemInfo.isEmpty()))?that.getReferenceSystemInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceSystemInfo", lhsReferenceSystemInfo), LocatorUtils.property(thatLocator, "referenceSystemInfo", rhsReferenceSystemInfo), lhsReferenceSystemInfo, rhsReferenceSystemInfo)) {
                return false;
            }
        }
        {
            List<MDMetadataExtensionInformationPropertyType> lhsMetadataExtensionInfo;
            lhsMetadataExtensionInfo = (((this.metadataExtensionInfo!= null)&&(!this.metadataExtensionInfo.isEmpty()))?this.getMetadataExtensionInfo():null);
            List<MDMetadataExtensionInformationPropertyType> rhsMetadataExtensionInfo;
            rhsMetadataExtensionInfo = (((that.metadataExtensionInfo!= null)&&(!that.metadataExtensionInfo.isEmpty()))?that.getMetadataExtensionInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "metadataExtensionInfo", lhsMetadataExtensionInfo), LocatorUtils.property(thatLocator, "metadataExtensionInfo", rhsMetadataExtensionInfo), lhsMetadataExtensionInfo, rhsMetadataExtensionInfo)) {
                return false;
            }
        }
        {
            List<MDIdentificationPropertyType> lhsIdentificationInfo;
            lhsIdentificationInfo = (((this.identificationInfo!= null)&&(!this.identificationInfo.isEmpty()))?this.getIdentificationInfo():null);
            List<MDIdentificationPropertyType> rhsIdentificationInfo;
            rhsIdentificationInfo = (((that.identificationInfo!= null)&&(!that.identificationInfo.isEmpty()))?that.getIdentificationInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identificationInfo", lhsIdentificationInfo), LocatorUtils.property(thatLocator, "identificationInfo", rhsIdentificationInfo), lhsIdentificationInfo, rhsIdentificationInfo)) {
                return false;
            }
        }
        {
            List<MDContentInformationPropertyType> lhsContentInfo;
            lhsContentInfo = (((this.contentInfo!= null)&&(!this.contentInfo.isEmpty()))?this.getContentInfo():null);
            List<MDContentInformationPropertyType> rhsContentInfo;
            rhsContentInfo = (((that.contentInfo!= null)&&(!that.contentInfo.isEmpty()))?that.getContentInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contentInfo", lhsContentInfo), LocatorUtils.property(thatLocator, "contentInfo", rhsContentInfo), lhsContentInfo, rhsContentInfo)) {
                return false;
            }
        }
        {
            MDDistributionPropertyType lhsDistributionInfo;
            lhsDistributionInfo = this.getDistributionInfo();
            MDDistributionPropertyType rhsDistributionInfo;
            rhsDistributionInfo = that.getDistributionInfo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distributionInfo", lhsDistributionInfo), LocatorUtils.property(thatLocator, "distributionInfo", rhsDistributionInfo), lhsDistributionInfo, rhsDistributionInfo)) {
                return false;
            }
        }
        {
            List<DQDataQualityPropertyType> lhsDataQualityInfo;
            lhsDataQualityInfo = (((this.dataQualityInfo!= null)&&(!this.dataQualityInfo.isEmpty()))?this.getDataQualityInfo():null);
            List<DQDataQualityPropertyType> rhsDataQualityInfo;
            rhsDataQualityInfo = (((that.dataQualityInfo!= null)&&(!that.dataQualityInfo.isEmpty()))?that.getDataQualityInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataQualityInfo", lhsDataQualityInfo), LocatorUtils.property(thatLocator, "dataQualityInfo", rhsDataQualityInfo), lhsDataQualityInfo, rhsDataQualityInfo)) {
                return false;
            }
        }
        {
            List<MDPortrayalCatalogueReferencePropertyType> lhsPortrayalCatalogueInfo;
            lhsPortrayalCatalogueInfo = (((this.portrayalCatalogueInfo!= null)&&(!this.portrayalCatalogueInfo.isEmpty()))?this.getPortrayalCatalogueInfo():null);
            List<MDPortrayalCatalogueReferencePropertyType> rhsPortrayalCatalogueInfo;
            rhsPortrayalCatalogueInfo = (((that.portrayalCatalogueInfo!= null)&&(!that.portrayalCatalogueInfo.isEmpty()))?that.getPortrayalCatalogueInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portrayalCatalogueInfo", lhsPortrayalCatalogueInfo), LocatorUtils.property(thatLocator, "portrayalCatalogueInfo", rhsPortrayalCatalogueInfo), lhsPortrayalCatalogueInfo, rhsPortrayalCatalogueInfo)) {
                return false;
            }
        }
        {
            List<MDConstraintsPropertyType> lhsMetadataConstraints;
            lhsMetadataConstraints = (((this.metadataConstraints!= null)&&(!this.metadataConstraints.isEmpty()))?this.getMetadataConstraints():null);
            List<MDConstraintsPropertyType> rhsMetadataConstraints;
            rhsMetadataConstraints = (((that.metadataConstraints!= null)&&(!that.metadataConstraints.isEmpty()))?that.getMetadataConstraints():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "metadataConstraints", lhsMetadataConstraints), LocatorUtils.property(thatLocator, "metadataConstraints", rhsMetadataConstraints), lhsMetadataConstraints, rhsMetadataConstraints)) {
                return false;
            }
        }
        {
            List<MDApplicationSchemaInformationPropertyType> lhsApplicationSchemaInfo;
            lhsApplicationSchemaInfo = (((this.applicationSchemaInfo!= null)&&(!this.applicationSchemaInfo.isEmpty()))?this.getApplicationSchemaInfo():null);
            List<MDApplicationSchemaInformationPropertyType> rhsApplicationSchemaInfo;
            rhsApplicationSchemaInfo = (((that.applicationSchemaInfo!= null)&&(!that.applicationSchemaInfo.isEmpty()))?that.getApplicationSchemaInfo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "applicationSchemaInfo", lhsApplicationSchemaInfo), LocatorUtils.property(thatLocator, "applicationSchemaInfo", rhsApplicationSchemaInfo), lhsApplicationSchemaInfo, rhsApplicationSchemaInfo)) {
                return false;
            }
        }
        {
            MDMaintenanceInformationPropertyType lhsMetadataMaintenance;
            lhsMetadataMaintenance = this.getMetadataMaintenance();
            MDMaintenanceInformationPropertyType rhsMetadataMaintenance;
            rhsMetadataMaintenance = that.getMetadataMaintenance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "metadataMaintenance", lhsMetadataMaintenance), LocatorUtils.property(thatLocator, "metadataMaintenance", rhsMetadataMaintenance), lhsMetadataMaintenance, rhsMetadataMaintenance)) {
                return false;
            }
        }
        {
            List<DSAggregatePropertyType> lhsSeries;
            lhsSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
            List<DSAggregatePropertyType> rhsSeries;
            rhsSeries = (((that.series!= null)&&(!that.series.isEmpty()))?that.getSeries():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "series", lhsSeries), LocatorUtils.property(thatLocator, "series", rhsSeries), lhsSeries, rhsSeries)) {
                return false;
            }
        }
        {
            List<DSDataSetPropertyType> lhsDescribes;
            lhsDescribes = (((this.describes!= null)&&(!this.describes.isEmpty()))?this.getDescribes():null);
            List<DSDataSetPropertyType> rhsDescribes;
            rhsDescribes = (((that.describes!= null)&&(!that.describes.isEmpty()))?that.getDescribes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "describes", lhsDescribes), LocatorUtils.property(thatLocator, "describes", rhsDescribes), lhsDescribes, rhsDescribes)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsPropertyType;
            lhsPropertyType = (((this.propertyType!= null)&&(!this.propertyType.isEmpty()))?this.getPropertyType():null);
            List<ObjectReferencePropertyType> rhsPropertyType;
            rhsPropertyType = (((that.propertyType!= null)&&(!that.propertyType.isEmpty()))?that.getPropertyType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "propertyType", lhsPropertyType), LocatorUtils.property(thatLocator, "propertyType", rhsPropertyType), lhsPropertyType, rhsPropertyType)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsFeatureType;
            lhsFeatureType = (((this.featureType!= null)&&(!this.featureType.isEmpty()))?this.getFeatureType():null);
            List<ObjectReferencePropertyType> rhsFeatureType;
            rhsFeatureType = (((that.featureType!= null)&&(!that.featureType.isEmpty()))?that.getFeatureType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "featureType", lhsFeatureType), LocatorUtils.property(thatLocator, "featureType", rhsFeatureType), lhsFeatureType, rhsFeatureType)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsFeatureAttribute;
            lhsFeatureAttribute = (((this.featureAttribute!= null)&&(!this.featureAttribute.isEmpty()))?this.getFeatureAttribute():null);
            List<ObjectReferencePropertyType> rhsFeatureAttribute;
            rhsFeatureAttribute = (((that.featureAttribute!= null)&&(!that.featureAttribute.isEmpty()))?that.getFeatureAttribute():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "featureAttribute", lhsFeatureAttribute), LocatorUtils.property(thatLocator, "featureAttribute", rhsFeatureAttribute), lhsFeatureAttribute, rhsFeatureAttribute)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theFileIdentifier;
            theFileIdentifier = this.getFileIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileIdentifier", theFileIdentifier), currentHashCode, theFileIdentifier);
        }
        {
            CharacterStringPropertyType theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            MDCharacterSetCodePropertyType theCharacterSet;
            theCharacterSet = this.getCharacterSet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characterSet", theCharacterSet), currentHashCode, theCharacterSet);
        }
        {
            CharacterStringPropertyType theParentIdentifier;
            theParentIdentifier = this.getParentIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parentIdentifier", theParentIdentifier), currentHashCode, theParentIdentifier);
        }
        {
            List<MDScopeCodePropertyType> theHierarchyLevel;
            theHierarchyLevel = (((this.hierarchyLevel!= null)&&(!this.hierarchyLevel.isEmpty()))?this.getHierarchyLevel():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hierarchyLevel", theHierarchyLevel), currentHashCode, theHierarchyLevel);
        }
        {
            List<CharacterStringPropertyType> theHierarchyLevelName;
            theHierarchyLevelName = (((this.hierarchyLevelName!= null)&&(!this.hierarchyLevelName.isEmpty()))?this.getHierarchyLevelName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hierarchyLevelName", theHierarchyLevelName), currentHashCode, theHierarchyLevelName);
        }
        {
            List<CIResponsiblePartyPropertyType> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contact", theContact), currentHashCode, theContact);
        }
        {
            DatePropertyType theDateStamp;
            theDateStamp = this.getDateStamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateStamp", theDateStamp), currentHashCode, theDateStamp);
        }
        {
            CharacterStringPropertyType theMetadataStandardName;
            theMetadataStandardName = this.getMetadataStandardName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metadataStandardName", theMetadataStandardName), currentHashCode, theMetadataStandardName);
        }
        {
            CharacterStringPropertyType theMetadataStandardVersion;
            theMetadataStandardVersion = this.getMetadataStandardVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metadataStandardVersion", theMetadataStandardVersion), currentHashCode, theMetadataStandardVersion);
        }
        {
            CharacterStringPropertyType theDataSetURI;
            theDataSetURI = this.getDataSetURI();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataSetURI", theDataSetURI), currentHashCode, theDataSetURI);
        }
        {
            List<PTLocalePropertyType> theLocale;
            theLocale = (((this.locale!= null)&&(!this.locale.isEmpty()))?this.getLocale():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locale", theLocale), currentHashCode, theLocale);
        }
        {
            List<MDSpatialRepresentationPropertyType> theSpatialRepresentationInfo;
            theSpatialRepresentationInfo = (((this.spatialRepresentationInfo!= null)&&(!this.spatialRepresentationInfo.isEmpty()))?this.getSpatialRepresentationInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "spatialRepresentationInfo", theSpatialRepresentationInfo), currentHashCode, theSpatialRepresentationInfo);
        }
        {
            List<MDReferenceSystemPropertyType> theReferenceSystemInfo;
            theReferenceSystemInfo = (((this.referenceSystemInfo!= null)&&(!this.referenceSystemInfo.isEmpty()))?this.getReferenceSystemInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceSystemInfo", theReferenceSystemInfo), currentHashCode, theReferenceSystemInfo);
        }
        {
            List<MDMetadataExtensionInformationPropertyType> theMetadataExtensionInfo;
            theMetadataExtensionInfo = (((this.metadataExtensionInfo!= null)&&(!this.metadataExtensionInfo.isEmpty()))?this.getMetadataExtensionInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metadataExtensionInfo", theMetadataExtensionInfo), currentHashCode, theMetadataExtensionInfo);
        }
        {
            List<MDIdentificationPropertyType> theIdentificationInfo;
            theIdentificationInfo = (((this.identificationInfo!= null)&&(!this.identificationInfo.isEmpty()))?this.getIdentificationInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identificationInfo", theIdentificationInfo), currentHashCode, theIdentificationInfo);
        }
        {
            List<MDContentInformationPropertyType> theContentInfo;
            theContentInfo = (((this.contentInfo!= null)&&(!this.contentInfo.isEmpty()))?this.getContentInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contentInfo", theContentInfo), currentHashCode, theContentInfo);
        }
        {
            MDDistributionPropertyType theDistributionInfo;
            theDistributionInfo = this.getDistributionInfo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distributionInfo", theDistributionInfo), currentHashCode, theDistributionInfo);
        }
        {
            List<DQDataQualityPropertyType> theDataQualityInfo;
            theDataQualityInfo = (((this.dataQualityInfo!= null)&&(!this.dataQualityInfo.isEmpty()))?this.getDataQualityInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataQualityInfo", theDataQualityInfo), currentHashCode, theDataQualityInfo);
        }
        {
            List<MDPortrayalCatalogueReferencePropertyType> thePortrayalCatalogueInfo;
            thePortrayalCatalogueInfo = (((this.portrayalCatalogueInfo!= null)&&(!this.portrayalCatalogueInfo.isEmpty()))?this.getPortrayalCatalogueInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portrayalCatalogueInfo", thePortrayalCatalogueInfo), currentHashCode, thePortrayalCatalogueInfo);
        }
        {
            List<MDConstraintsPropertyType> theMetadataConstraints;
            theMetadataConstraints = (((this.metadataConstraints!= null)&&(!this.metadataConstraints.isEmpty()))?this.getMetadataConstraints():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metadataConstraints", theMetadataConstraints), currentHashCode, theMetadataConstraints);
        }
        {
            List<MDApplicationSchemaInformationPropertyType> theApplicationSchemaInfo;
            theApplicationSchemaInfo = (((this.applicationSchemaInfo!= null)&&(!this.applicationSchemaInfo.isEmpty()))?this.getApplicationSchemaInfo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "applicationSchemaInfo", theApplicationSchemaInfo), currentHashCode, theApplicationSchemaInfo);
        }
        {
            MDMaintenanceInformationPropertyType theMetadataMaintenance;
            theMetadataMaintenance = this.getMetadataMaintenance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "metadataMaintenance", theMetadataMaintenance), currentHashCode, theMetadataMaintenance);
        }
        {
            List<DSAggregatePropertyType> theSeries;
            theSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "series", theSeries), currentHashCode, theSeries);
        }
        {
            List<DSDataSetPropertyType> theDescribes;
            theDescribes = (((this.describes!= null)&&(!this.describes.isEmpty()))?this.getDescribes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "describes", theDescribes), currentHashCode, theDescribes);
        }
        {
            List<ObjectReferencePropertyType> thePropertyType;
            thePropertyType = (((this.propertyType!= null)&&(!this.propertyType.isEmpty()))?this.getPropertyType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "propertyType", thePropertyType), currentHashCode, thePropertyType);
        }
        {
            List<ObjectReferencePropertyType> theFeatureType;
            theFeatureType = (((this.featureType!= null)&&(!this.featureType.isEmpty()))?this.getFeatureType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "featureType", theFeatureType), currentHashCode, theFeatureType);
        }
        {
            List<ObjectReferencePropertyType> theFeatureAttribute;
            theFeatureAttribute = (((this.featureAttribute!= null)&&(!this.featureAttribute.isEmpty()))?this.getFeatureAttribute():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "featureAttribute", theFeatureAttribute), currentHashCode, theFeatureAttribute);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDMetadataType) {
            final MDMetadataType copy = ((MDMetadataType) draftCopy);
            if (this.fileIdentifier!= null) {
                CharacterStringPropertyType sourceFileIdentifier;
                sourceFileIdentifier = this.getFileIdentifier();
                CharacterStringPropertyType copyFileIdentifier = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "fileIdentifier", sourceFileIdentifier), sourceFileIdentifier));
                copy.setFileIdentifier(copyFileIdentifier);
            } else {
                copy.fileIdentifier = null;
            }
            if (this.language!= null) {
                CharacterStringPropertyType sourceLanguage;
                sourceLanguage = this.getLanguage();
                CharacterStringPropertyType copyLanguage = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.setLanguage(copyLanguage);
            } else {
                copy.language = null;
            }
            if (this.characterSet!= null) {
                MDCharacterSetCodePropertyType sourceCharacterSet;
                sourceCharacterSet = this.getCharacterSet();
                MDCharacterSetCodePropertyType copyCharacterSet = ((MDCharacterSetCodePropertyType) strategy.copy(LocatorUtils.property(locator, "characterSet", sourceCharacterSet), sourceCharacterSet));
                copy.setCharacterSet(copyCharacterSet);
            } else {
                copy.characterSet = null;
            }
            if (this.parentIdentifier!= null) {
                CharacterStringPropertyType sourceParentIdentifier;
                sourceParentIdentifier = this.getParentIdentifier();
                CharacterStringPropertyType copyParentIdentifier = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "parentIdentifier", sourceParentIdentifier), sourceParentIdentifier));
                copy.setParentIdentifier(copyParentIdentifier);
            } else {
                copy.parentIdentifier = null;
            }
            if ((this.hierarchyLevel!= null)&&(!this.hierarchyLevel.isEmpty())) {
                List<MDScopeCodePropertyType> sourceHierarchyLevel;
                sourceHierarchyLevel = (((this.hierarchyLevel!= null)&&(!this.hierarchyLevel.isEmpty()))?this.getHierarchyLevel():null);
                @SuppressWarnings("unchecked")
                List<MDScopeCodePropertyType> copyHierarchyLevel = ((List<MDScopeCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "hierarchyLevel", sourceHierarchyLevel), sourceHierarchyLevel));
                copy.hierarchyLevel = null;
                if (copyHierarchyLevel!= null) {
                    List<MDScopeCodePropertyType> uniqueHierarchyLevell = copy.getHierarchyLevel();
                    uniqueHierarchyLevell.addAll(copyHierarchyLevel);
                }
            } else {
                copy.hierarchyLevel = null;
            }
            if ((this.hierarchyLevelName!= null)&&(!this.hierarchyLevelName.isEmpty())) {
                List<CharacterStringPropertyType> sourceHierarchyLevelName;
                sourceHierarchyLevelName = (((this.hierarchyLevelName!= null)&&(!this.hierarchyLevelName.isEmpty()))?this.getHierarchyLevelName():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyHierarchyLevelName = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "hierarchyLevelName", sourceHierarchyLevelName), sourceHierarchyLevelName));
                copy.hierarchyLevelName = null;
                if (copyHierarchyLevelName!= null) {
                    List<CharacterStringPropertyType> uniqueHierarchyLevelNamel = copy.getHierarchyLevelName();
                    uniqueHierarchyLevelNamel.addAll(copyHierarchyLevelName);
                }
            } else {
                copy.hierarchyLevelName = null;
            }
            if ((this.contact!= null)&&(!this.contact.isEmpty())) {
                List<CIResponsiblePartyPropertyType> sourceContact;
                sourceContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
                @SuppressWarnings("unchecked")
                List<CIResponsiblePartyPropertyType> copyContact = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "contact", sourceContact), sourceContact));
                copy.contact = null;
                if (copyContact!= null) {
                    List<CIResponsiblePartyPropertyType> uniqueContactl = copy.getContact();
                    uniqueContactl.addAll(copyContact);
                }
            } else {
                copy.contact = null;
            }
            if (this.dateStamp!= null) {
                DatePropertyType sourceDateStamp;
                sourceDateStamp = this.getDateStamp();
                DatePropertyType copyDateStamp = ((DatePropertyType) strategy.copy(LocatorUtils.property(locator, "dateStamp", sourceDateStamp), sourceDateStamp));
                copy.setDateStamp(copyDateStamp);
            } else {
                copy.dateStamp = null;
            }
            if (this.metadataStandardName!= null) {
                CharacterStringPropertyType sourceMetadataStandardName;
                sourceMetadataStandardName = this.getMetadataStandardName();
                CharacterStringPropertyType copyMetadataStandardName = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "metadataStandardName", sourceMetadataStandardName), sourceMetadataStandardName));
                copy.setMetadataStandardName(copyMetadataStandardName);
            } else {
                copy.metadataStandardName = null;
            }
            if (this.metadataStandardVersion!= null) {
                CharacterStringPropertyType sourceMetadataStandardVersion;
                sourceMetadataStandardVersion = this.getMetadataStandardVersion();
                CharacterStringPropertyType copyMetadataStandardVersion = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "metadataStandardVersion", sourceMetadataStandardVersion), sourceMetadataStandardVersion));
                copy.setMetadataStandardVersion(copyMetadataStandardVersion);
            } else {
                copy.metadataStandardVersion = null;
            }
            if (this.dataSetURI!= null) {
                CharacterStringPropertyType sourceDataSetURI;
                sourceDataSetURI = this.getDataSetURI();
                CharacterStringPropertyType copyDataSetURI = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "dataSetURI", sourceDataSetURI), sourceDataSetURI));
                copy.setDataSetURI(copyDataSetURI);
            } else {
                copy.dataSetURI = null;
            }
            if ((this.locale!= null)&&(!this.locale.isEmpty())) {
                List<PTLocalePropertyType> sourceLocale;
                sourceLocale = (((this.locale!= null)&&(!this.locale.isEmpty()))?this.getLocale():null);
                @SuppressWarnings("unchecked")
                List<PTLocalePropertyType> copyLocale = ((List<PTLocalePropertyType> ) strategy.copy(LocatorUtils.property(locator, "locale", sourceLocale), sourceLocale));
                copy.locale = null;
                if (copyLocale!= null) {
                    List<PTLocalePropertyType> uniqueLocalel = copy.getLocale();
                    uniqueLocalel.addAll(copyLocale);
                }
            } else {
                copy.locale = null;
            }
            if ((this.spatialRepresentationInfo!= null)&&(!this.spatialRepresentationInfo.isEmpty())) {
                List<MDSpatialRepresentationPropertyType> sourceSpatialRepresentationInfo;
                sourceSpatialRepresentationInfo = (((this.spatialRepresentationInfo!= null)&&(!this.spatialRepresentationInfo.isEmpty()))?this.getSpatialRepresentationInfo():null);
                @SuppressWarnings("unchecked")
                List<MDSpatialRepresentationPropertyType> copySpatialRepresentationInfo = ((List<MDSpatialRepresentationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "spatialRepresentationInfo", sourceSpatialRepresentationInfo), sourceSpatialRepresentationInfo));
                copy.spatialRepresentationInfo = null;
                if (copySpatialRepresentationInfo!= null) {
                    List<MDSpatialRepresentationPropertyType> uniqueSpatialRepresentationInfol = copy.getSpatialRepresentationInfo();
                    uniqueSpatialRepresentationInfol.addAll(copySpatialRepresentationInfo);
                }
            } else {
                copy.spatialRepresentationInfo = null;
            }
            if ((this.referenceSystemInfo!= null)&&(!this.referenceSystemInfo.isEmpty())) {
                List<MDReferenceSystemPropertyType> sourceReferenceSystemInfo;
                sourceReferenceSystemInfo = (((this.referenceSystemInfo!= null)&&(!this.referenceSystemInfo.isEmpty()))?this.getReferenceSystemInfo():null);
                @SuppressWarnings("unchecked")
                List<MDReferenceSystemPropertyType> copyReferenceSystemInfo = ((List<MDReferenceSystemPropertyType> ) strategy.copy(LocatorUtils.property(locator, "referenceSystemInfo", sourceReferenceSystemInfo), sourceReferenceSystemInfo));
                copy.referenceSystemInfo = null;
                if (copyReferenceSystemInfo!= null) {
                    List<MDReferenceSystemPropertyType> uniqueReferenceSystemInfol = copy.getReferenceSystemInfo();
                    uniqueReferenceSystemInfol.addAll(copyReferenceSystemInfo);
                }
            } else {
                copy.referenceSystemInfo = null;
            }
            if ((this.metadataExtensionInfo!= null)&&(!this.metadataExtensionInfo.isEmpty())) {
                List<MDMetadataExtensionInformationPropertyType> sourceMetadataExtensionInfo;
                sourceMetadataExtensionInfo = (((this.metadataExtensionInfo!= null)&&(!this.metadataExtensionInfo.isEmpty()))?this.getMetadataExtensionInfo():null);
                @SuppressWarnings("unchecked")
                List<MDMetadataExtensionInformationPropertyType> copyMetadataExtensionInfo = ((List<MDMetadataExtensionInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "metadataExtensionInfo", sourceMetadataExtensionInfo), sourceMetadataExtensionInfo));
                copy.metadataExtensionInfo = null;
                if (copyMetadataExtensionInfo!= null) {
                    List<MDMetadataExtensionInformationPropertyType> uniqueMetadataExtensionInfol = copy.getMetadataExtensionInfo();
                    uniqueMetadataExtensionInfol.addAll(copyMetadataExtensionInfo);
                }
            } else {
                copy.metadataExtensionInfo = null;
            }
            if ((this.identificationInfo!= null)&&(!this.identificationInfo.isEmpty())) {
                List<MDIdentificationPropertyType> sourceIdentificationInfo;
                sourceIdentificationInfo = (((this.identificationInfo!= null)&&(!this.identificationInfo.isEmpty()))?this.getIdentificationInfo():null);
                @SuppressWarnings("unchecked")
                List<MDIdentificationPropertyType> copyIdentificationInfo = ((List<MDIdentificationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "identificationInfo", sourceIdentificationInfo), sourceIdentificationInfo));
                copy.identificationInfo = null;
                if (copyIdentificationInfo!= null) {
                    List<MDIdentificationPropertyType> uniqueIdentificationInfol = copy.getIdentificationInfo();
                    uniqueIdentificationInfol.addAll(copyIdentificationInfo);
                }
            } else {
                copy.identificationInfo = null;
            }
            if ((this.contentInfo!= null)&&(!this.contentInfo.isEmpty())) {
                List<MDContentInformationPropertyType> sourceContentInfo;
                sourceContentInfo = (((this.contentInfo!= null)&&(!this.contentInfo.isEmpty()))?this.getContentInfo():null);
                @SuppressWarnings("unchecked")
                List<MDContentInformationPropertyType> copyContentInfo = ((List<MDContentInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "contentInfo", sourceContentInfo), sourceContentInfo));
                copy.contentInfo = null;
                if (copyContentInfo!= null) {
                    List<MDContentInformationPropertyType> uniqueContentInfol = copy.getContentInfo();
                    uniqueContentInfol.addAll(copyContentInfo);
                }
            } else {
                copy.contentInfo = null;
            }
            if (this.distributionInfo!= null) {
                MDDistributionPropertyType sourceDistributionInfo;
                sourceDistributionInfo = this.getDistributionInfo();
                MDDistributionPropertyType copyDistributionInfo = ((MDDistributionPropertyType) strategy.copy(LocatorUtils.property(locator, "distributionInfo", sourceDistributionInfo), sourceDistributionInfo));
                copy.setDistributionInfo(copyDistributionInfo);
            } else {
                copy.distributionInfo = null;
            }
            if ((this.dataQualityInfo!= null)&&(!this.dataQualityInfo.isEmpty())) {
                List<DQDataQualityPropertyType> sourceDataQualityInfo;
                sourceDataQualityInfo = (((this.dataQualityInfo!= null)&&(!this.dataQualityInfo.isEmpty()))?this.getDataQualityInfo():null);
                @SuppressWarnings("unchecked")
                List<DQDataQualityPropertyType> copyDataQualityInfo = ((List<DQDataQualityPropertyType> ) strategy.copy(LocatorUtils.property(locator, "dataQualityInfo", sourceDataQualityInfo), sourceDataQualityInfo));
                copy.dataQualityInfo = null;
                if (copyDataQualityInfo!= null) {
                    List<DQDataQualityPropertyType> uniqueDataQualityInfol = copy.getDataQualityInfo();
                    uniqueDataQualityInfol.addAll(copyDataQualityInfo);
                }
            } else {
                copy.dataQualityInfo = null;
            }
            if ((this.portrayalCatalogueInfo!= null)&&(!this.portrayalCatalogueInfo.isEmpty())) {
                List<MDPortrayalCatalogueReferencePropertyType> sourcePortrayalCatalogueInfo;
                sourcePortrayalCatalogueInfo = (((this.portrayalCatalogueInfo!= null)&&(!this.portrayalCatalogueInfo.isEmpty()))?this.getPortrayalCatalogueInfo():null);
                @SuppressWarnings("unchecked")
                List<MDPortrayalCatalogueReferencePropertyType> copyPortrayalCatalogueInfo = ((List<MDPortrayalCatalogueReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "portrayalCatalogueInfo", sourcePortrayalCatalogueInfo), sourcePortrayalCatalogueInfo));
                copy.portrayalCatalogueInfo = null;
                if (copyPortrayalCatalogueInfo!= null) {
                    List<MDPortrayalCatalogueReferencePropertyType> uniquePortrayalCatalogueInfol = copy.getPortrayalCatalogueInfo();
                    uniquePortrayalCatalogueInfol.addAll(copyPortrayalCatalogueInfo);
                }
            } else {
                copy.portrayalCatalogueInfo = null;
            }
            if ((this.metadataConstraints!= null)&&(!this.metadataConstraints.isEmpty())) {
                List<MDConstraintsPropertyType> sourceMetadataConstraints;
                sourceMetadataConstraints = (((this.metadataConstraints!= null)&&(!this.metadataConstraints.isEmpty()))?this.getMetadataConstraints():null);
                @SuppressWarnings("unchecked")
                List<MDConstraintsPropertyType> copyMetadataConstraints = ((List<MDConstraintsPropertyType> ) strategy.copy(LocatorUtils.property(locator, "metadataConstraints", sourceMetadataConstraints), sourceMetadataConstraints));
                copy.metadataConstraints = null;
                if (copyMetadataConstraints!= null) {
                    List<MDConstraintsPropertyType> uniqueMetadataConstraintsl = copy.getMetadataConstraints();
                    uniqueMetadataConstraintsl.addAll(copyMetadataConstraints);
                }
            } else {
                copy.metadataConstraints = null;
            }
            if ((this.applicationSchemaInfo!= null)&&(!this.applicationSchemaInfo.isEmpty())) {
                List<MDApplicationSchemaInformationPropertyType> sourceApplicationSchemaInfo;
                sourceApplicationSchemaInfo = (((this.applicationSchemaInfo!= null)&&(!this.applicationSchemaInfo.isEmpty()))?this.getApplicationSchemaInfo():null);
                @SuppressWarnings("unchecked")
                List<MDApplicationSchemaInformationPropertyType> copyApplicationSchemaInfo = ((List<MDApplicationSchemaInformationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "applicationSchemaInfo", sourceApplicationSchemaInfo), sourceApplicationSchemaInfo));
                copy.applicationSchemaInfo = null;
                if (copyApplicationSchemaInfo!= null) {
                    List<MDApplicationSchemaInformationPropertyType> uniqueApplicationSchemaInfol = copy.getApplicationSchemaInfo();
                    uniqueApplicationSchemaInfol.addAll(copyApplicationSchemaInfo);
                }
            } else {
                copy.applicationSchemaInfo = null;
            }
            if (this.metadataMaintenance!= null) {
                MDMaintenanceInformationPropertyType sourceMetadataMaintenance;
                sourceMetadataMaintenance = this.getMetadataMaintenance();
                MDMaintenanceInformationPropertyType copyMetadataMaintenance = ((MDMaintenanceInformationPropertyType) strategy.copy(LocatorUtils.property(locator, "metadataMaintenance", sourceMetadataMaintenance), sourceMetadataMaintenance));
                copy.setMetadataMaintenance(copyMetadataMaintenance);
            } else {
                copy.metadataMaintenance = null;
            }
            if ((this.series!= null)&&(!this.series.isEmpty())) {
                List<DSAggregatePropertyType> sourceSeries;
                sourceSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
                @SuppressWarnings("unchecked")
                List<DSAggregatePropertyType> copySeries = ((List<DSAggregatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "series", sourceSeries), sourceSeries));
                copy.series = null;
                if (copySeries!= null) {
                    List<DSAggregatePropertyType> uniqueSeriesl = copy.getSeries();
                    uniqueSeriesl.addAll(copySeries);
                }
            } else {
                copy.series = null;
            }
            if ((this.describes!= null)&&(!this.describes.isEmpty())) {
                List<DSDataSetPropertyType> sourceDescribes;
                sourceDescribes = (((this.describes!= null)&&(!this.describes.isEmpty()))?this.getDescribes():null);
                @SuppressWarnings("unchecked")
                List<DSDataSetPropertyType> copyDescribes = ((List<DSDataSetPropertyType> ) strategy.copy(LocatorUtils.property(locator, "describes", sourceDescribes), sourceDescribes));
                copy.describes = null;
                if (copyDescribes!= null) {
                    List<DSDataSetPropertyType> uniqueDescribesl = copy.getDescribes();
                    uniqueDescribesl.addAll(copyDescribes);
                }
            } else {
                copy.describes = null;
            }
            if ((this.propertyType!= null)&&(!this.propertyType.isEmpty())) {
                List<ObjectReferencePropertyType> sourcePropertyType;
                sourcePropertyType = (((this.propertyType!= null)&&(!this.propertyType.isEmpty()))?this.getPropertyType():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyPropertyType = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "propertyType", sourcePropertyType), sourcePropertyType));
                copy.propertyType = null;
                if (copyPropertyType!= null) {
                    List<ObjectReferencePropertyType> uniquePropertyTypel = copy.getPropertyType();
                    uniquePropertyTypel.addAll(copyPropertyType);
                }
            } else {
                copy.propertyType = null;
            }
            if ((this.featureType!= null)&&(!this.featureType.isEmpty())) {
                List<ObjectReferencePropertyType> sourceFeatureType;
                sourceFeatureType = (((this.featureType!= null)&&(!this.featureType.isEmpty()))?this.getFeatureType():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyFeatureType = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "featureType", sourceFeatureType), sourceFeatureType));
                copy.featureType = null;
                if (copyFeatureType!= null) {
                    List<ObjectReferencePropertyType> uniqueFeatureTypel = copy.getFeatureType();
                    uniqueFeatureTypel.addAll(copyFeatureType);
                }
            } else {
                copy.featureType = null;
            }
            if ((this.featureAttribute!= null)&&(!this.featureAttribute.isEmpty())) {
                List<ObjectReferencePropertyType> sourceFeatureAttribute;
                sourceFeatureAttribute = (((this.featureAttribute!= null)&&(!this.featureAttribute.isEmpty()))?this.getFeatureAttribute():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyFeatureAttribute = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "featureAttribute", sourceFeatureAttribute), sourceFeatureAttribute));
                copy.featureAttribute = null;
                if (copyFeatureAttribute!= null) {
                    List<ObjectReferencePropertyType> uniqueFeatureAttributel = copy.getFeatureAttribute();
                    uniqueFeatureAttributel.addAll(copyFeatureAttribute);
                }
            } else {
                copy.featureAttribute = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDMetadataType();
    }

}
