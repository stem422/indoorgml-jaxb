//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.MemberNamePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Set of adjacent wavelengths in the electro-magnetic spectrum with a common characteristic, such as the visible band
 * 
 * <p>Java class for MD_RangeDimension_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_RangeDimension_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="sequenceIdentifier" type="{http://www.isotc211.org/2005/gco}MemberName_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="descriptor" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_RangeDimension_Type", propOrder = {
    "sequenceIdentifier",
    "descriptor"
})
@XmlSeeAlso({
    MDBandType.class
})
public class MDRangeDimensionType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MemberNamePropertyType sequenceIdentifier;
    protected CharacterStringPropertyType descriptor;

    /**
     * Gets the value of the sequenceIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link MemberNamePropertyType }
     *     
     */
    public MemberNamePropertyType getSequenceIdentifier() {
        return sequenceIdentifier;
    }

    /**
     * Sets the value of the sequenceIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemberNamePropertyType }
     *     
     */
    public void setSequenceIdentifier(MemberNamePropertyType value) {
        this.sequenceIdentifier = value;
    }

    /**
     * Gets the value of the descriptor property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescriptor() {
        return descriptor;
    }

    /**
     * Sets the value of the descriptor property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescriptor(CharacterStringPropertyType value) {
        this.descriptor = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MemberNamePropertyType theSequenceIdentifier;
            theSequenceIdentifier = this.getSequenceIdentifier();
            strategy.appendField(locator, this, "sequenceIdentifier", buffer, theSequenceIdentifier);
        }
        {
            CharacterStringPropertyType theDescriptor;
            theDescriptor = this.getDescriptor();
            strategy.appendField(locator, this, "descriptor", buffer, theDescriptor);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDRangeDimensionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDRangeDimensionType that = ((MDRangeDimensionType) object);
        {
            MemberNamePropertyType lhsSequenceIdentifier;
            lhsSequenceIdentifier = this.getSequenceIdentifier();
            MemberNamePropertyType rhsSequenceIdentifier;
            rhsSequenceIdentifier = that.getSequenceIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sequenceIdentifier", lhsSequenceIdentifier), LocatorUtils.property(thatLocator, "sequenceIdentifier", rhsSequenceIdentifier), lhsSequenceIdentifier, rhsSequenceIdentifier)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDescriptor;
            lhsDescriptor = this.getDescriptor();
            CharacterStringPropertyType rhsDescriptor;
            rhsDescriptor = that.getDescriptor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "descriptor", lhsDescriptor), LocatorUtils.property(thatLocator, "descriptor", rhsDescriptor), lhsDescriptor, rhsDescriptor)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MemberNamePropertyType theSequenceIdentifier;
            theSequenceIdentifier = this.getSequenceIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sequenceIdentifier", theSequenceIdentifier), currentHashCode, theSequenceIdentifier);
        }
        {
            CharacterStringPropertyType theDescriptor;
            theDescriptor = this.getDescriptor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "descriptor", theDescriptor), currentHashCode, theDescriptor);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDRangeDimensionType) {
            final MDRangeDimensionType copy = ((MDRangeDimensionType) draftCopy);
            if (this.sequenceIdentifier!= null) {
                MemberNamePropertyType sourceSequenceIdentifier;
                sourceSequenceIdentifier = this.getSequenceIdentifier();
                MemberNamePropertyType copySequenceIdentifier = ((MemberNamePropertyType) strategy.copy(LocatorUtils.property(locator, "sequenceIdentifier", sourceSequenceIdentifier), sourceSequenceIdentifier));
                copy.setSequenceIdentifier(copySequenceIdentifier);
            } else {
                copy.sequenceIdentifier = null;
            }
            if (this.descriptor!= null) {
                CharacterStringPropertyType sourceDescriptor;
                sourceDescriptor = this.getDescriptor();
                CharacterStringPropertyType copyDescriptor = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "descriptor", sourceDescriptor), sourceDescriptor));
                copy.setDescriptor(copyDescriptor);
            } else {
                copy.descriptor = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDRangeDimensionType();
    }

}
