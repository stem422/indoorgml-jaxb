//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.IntegerPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MD_GeometricObjects_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_GeometricObjects_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="geometricObjectType" type="{http://www.isotc211.org/2005/gmd}MD_GeometricObjectTypeCode_PropertyType"/&gt;
 *         &lt;element name="geometricObjectCount" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_GeometricObjects_Type", propOrder = {
    "geometricObjectType",
    "geometricObjectCount"
})
public class MDGeometricObjectsType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected MDGeometricObjectTypeCodePropertyType geometricObjectType;
    protected IntegerPropertyType geometricObjectCount;

    /**
     * Gets the value of the geometricObjectType property.
     * 
     * @return
     *     possible object is
     *     {@link MDGeometricObjectTypeCodePropertyType }
     *     
     */
    public MDGeometricObjectTypeCodePropertyType getGeometricObjectType() {
        return geometricObjectType;
    }

    /**
     * Sets the value of the geometricObjectType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDGeometricObjectTypeCodePropertyType }
     *     
     */
    public void setGeometricObjectType(MDGeometricObjectTypeCodePropertyType value) {
        this.geometricObjectType = value;
    }

    /**
     * Gets the value of the geometricObjectCount property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getGeometricObjectCount() {
        return geometricObjectCount;
    }

    /**
     * Sets the value of the geometricObjectCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setGeometricObjectCount(IntegerPropertyType value) {
        this.geometricObjectCount = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDGeometricObjectTypeCodePropertyType theGeometricObjectType;
            theGeometricObjectType = this.getGeometricObjectType();
            strategy.appendField(locator, this, "geometricObjectType", buffer, theGeometricObjectType);
        }
        {
            IntegerPropertyType theGeometricObjectCount;
            theGeometricObjectCount = this.getGeometricObjectCount();
            strategy.appendField(locator, this, "geometricObjectCount", buffer, theGeometricObjectCount);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDGeometricObjectsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDGeometricObjectsType that = ((MDGeometricObjectsType) object);
        {
            MDGeometricObjectTypeCodePropertyType lhsGeometricObjectType;
            lhsGeometricObjectType = this.getGeometricObjectType();
            MDGeometricObjectTypeCodePropertyType rhsGeometricObjectType;
            rhsGeometricObjectType = that.getGeometricObjectType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometricObjectType", lhsGeometricObjectType), LocatorUtils.property(thatLocator, "geometricObjectType", rhsGeometricObjectType), lhsGeometricObjectType, rhsGeometricObjectType)) {
                return false;
            }
        }
        {
            IntegerPropertyType lhsGeometricObjectCount;
            lhsGeometricObjectCount = this.getGeometricObjectCount();
            IntegerPropertyType rhsGeometricObjectCount;
            rhsGeometricObjectCount = that.getGeometricObjectCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometricObjectCount", lhsGeometricObjectCount), LocatorUtils.property(thatLocator, "geometricObjectCount", rhsGeometricObjectCount), lhsGeometricObjectCount, rhsGeometricObjectCount)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDGeometricObjectTypeCodePropertyType theGeometricObjectType;
            theGeometricObjectType = this.getGeometricObjectType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometricObjectType", theGeometricObjectType), currentHashCode, theGeometricObjectType);
        }
        {
            IntegerPropertyType theGeometricObjectCount;
            theGeometricObjectCount = this.getGeometricObjectCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometricObjectCount", theGeometricObjectCount), currentHashCode, theGeometricObjectCount);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDGeometricObjectsType) {
            final MDGeometricObjectsType copy = ((MDGeometricObjectsType) draftCopy);
            if (this.geometricObjectType!= null) {
                MDGeometricObjectTypeCodePropertyType sourceGeometricObjectType;
                sourceGeometricObjectType = this.getGeometricObjectType();
                MDGeometricObjectTypeCodePropertyType copyGeometricObjectType = ((MDGeometricObjectTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "geometricObjectType", sourceGeometricObjectType), sourceGeometricObjectType));
                copy.setGeometricObjectType(copyGeometricObjectType);
            } else {
                copy.geometricObjectType = null;
            }
            if (this.geometricObjectCount!= null) {
                IntegerPropertyType sourceGeometricObjectCount;
                sourceGeometricObjectCount = this.getGeometricObjectCount();
                IntegerPropertyType copyGeometricObjectCount = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "geometricObjectCount", sourceGeometricObjectCount), sourceGeometricObjectCount));
                copy.setGeometricObjectCount(copyGeometricObjectCount);
            } else {
                copy.geometricObjectCount = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDGeometricObjectsType();
    }

}
