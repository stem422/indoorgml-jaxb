//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.DateTimePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for AbstractDQ_Element_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractDQ_Element_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="nameOfMeasure" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="measureIdentification" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="measureDescription" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="evaluationMethodType" type="{http://www.isotc211.org/2005/gmd}DQ_EvaluationMethodTypeCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="evaluationMethodDescription" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="evaluationProcedure" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="dateTime" type="{http://www.isotc211.org/2005/gco}DateTime_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="result" type="{http://www.isotc211.org/2005/gmd}DQ_Result_PropertyType" maxOccurs="2"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractDQ_Element_Type", propOrder = {
    "nameOfMeasure",
    "measureIdentification",
    "measureDescription",
    "evaluationMethodType",
    "evaluationMethodDescription",
    "evaluationProcedure",
    "dateTime",
    "result"
})
@XmlSeeAlso({
    AbstractDQTemporalAccuracyType.class,
    AbstractDQThematicAccuracyType.class,
    AbstractDQPositionalAccuracyType.class,
    AbstractDQLogicalConsistencyType.class,
    AbstractDQCompletenessType.class
})
public abstract class AbstractDQElementType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<CharacterStringPropertyType> nameOfMeasure;
    protected MDIdentifierPropertyType measureIdentification;
    protected CharacterStringPropertyType measureDescription;
    protected DQEvaluationMethodTypeCodePropertyType evaluationMethodType;
    protected CharacterStringPropertyType evaluationMethodDescription;
    protected CICitationPropertyType evaluationProcedure;
    protected List<DateTimePropertyType> dateTime;
    @XmlElement(required = true)
    protected List<DQResultPropertyType> result;

    /**
     * Gets the value of the nameOfMeasure property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nameOfMeasure property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNameOfMeasure().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getNameOfMeasure() {
        if (nameOfMeasure == null) {
            nameOfMeasure = new ArrayList<CharacterStringPropertyType>();
        }
        return this.nameOfMeasure;
    }

    /**
     * Gets the value of the measureIdentification property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getMeasureIdentification() {
        return measureIdentification;
    }

    /**
     * Sets the value of the measureIdentification property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setMeasureIdentification(MDIdentifierPropertyType value) {
        this.measureIdentification = value;
    }

    /**
     * Gets the value of the measureDescription property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getMeasureDescription() {
        return measureDescription;
    }

    /**
     * Sets the value of the measureDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setMeasureDescription(CharacterStringPropertyType value) {
        this.measureDescription = value;
    }

    /**
     * Gets the value of the evaluationMethodType property.
     * 
     * @return
     *     possible object is
     *     {@link DQEvaluationMethodTypeCodePropertyType }
     *     
     */
    public DQEvaluationMethodTypeCodePropertyType getEvaluationMethodType() {
        return evaluationMethodType;
    }

    /**
     * Sets the value of the evaluationMethodType property.
     * 
     * @param value
     *     allowed object is
     *     {@link DQEvaluationMethodTypeCodePropertyType }
     *     
     */
    public void setEvaluationMethodType(DQEvaluationMethodTypeCodePropertyType value) {
        this.evaluationMethodType = value;
    }

    /**
     * Gets the value of the evaluationMethodDescription property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getEvaluationMethodDescription() {
        return evaluationMethodDescription;
    }

    /**
     * Sets the value of the evaluationMethodDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setEvaluationMethodDescription(CharacterStringPropertyType value) {
        this.evaluationMethodDescription = value;
    }

    /**
     * Gets the value of the evaluationProcedure property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getEvaluationProcedure() {
        return evaluationProcedure;
    }

    /**
     * Sets the value of the evaluationProcedure property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setEvaluationProcedure(CICitationPropertyType value) {
        this.evaluationProcedure = value;
    }

    /**
     * Gets the value of the dateTime property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dateTime property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDateTime().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DateTimePropertyType }
     * 
     * 
     */
    public List<DateTimePropertyType> getDateTime() {
        if (dateTime == null) {
            dateTime = new ArrayList<DateTimePropertyType>();
        }
        return this.dateTime;
    }

    /**
     * Gets the value of the result property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the result property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResult().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DQResultPropertyType }
     * 
     * 
     */
    public List<DQResultPropertyType> getResult() {
        if (result == null) {
            result = new ArrayList<DQResultPropertyType>();
        }
        return this.result;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CharacterStringPropertyType> theNameOfMeasure;
            theNameOfMeasure = (((this.nameOfMeasure!= null)&&(!this.nameOfMeasure.isEmpty()))?this.getNameOfMeasure():null);
            strategy.appendField(locator, this, "nameOfMeasure", buffer, theNameOfMeasure);
        }
        {
            MDIdentifierPropertyType theMeasureIdentification;
            theMeasureIdentification = this.getMeasureIdentification();
            strategy.appendField(locator, this, "measureIdentification", buffer, theMeasureIdentification);
        }
        {
            CharacterStringPropertyType theMeasureDescription;
            theMeasureDescription = this.getMeasureDescription();
            strategy.appendField(locator, this, "measureDescription", buffer, theMeasureDescription);
        }
        {
            DQEvaluationMethodTypeCodePropertyType theEvaluationMethodType;
            theEvaluationMethodType = this.getEvaluationMethodType();
            strategy.appendField(locator, this, "evaluationMethodType", buffer, theEvaluationMethodType);
        }
        {
            CharacterStringPropertyType theEvaluationMethodDescription;
            theEvaluationMethodDescription = this.getEvaluationMethodDescription();
            strategy.appendField(locator, this, "evaluationMethodDescription", buffer, theEvaluationMethodDescription);
        }
        {
            CICitationPropertyType theEvaluationProcedure;
            theEvaluationProcedure = this.getEvaluationProcedure();
            strategy.appendField(locator, this, "evaluationProcedure", buffer, theEvaluationProcedure);
        }
        {
            List<DateTimePropertyType> theDateTime;
            theDateTime = (((this.dateTime!= null)&&(!this.dateTime.isEmpty()))?this.getDateTime():null);
            strategy.appendField(locator, this, "dateTime", buffer, theDateTime);
        }
        {
            List<DQResultPropertyType> theResult;
            theResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            strategy.appendField(locator, this, "result", buffer, theResult);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractDQElementType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractDQElementType that = ((AbstractDQElementType) object);
        {
            List<CharacterStringPropertyType> lhsNameOfMeasure;
            lhsNameOfMeasure = (((this.nameOfMeasure!= null)&&(!this.nameOfMeasure.isEmpty()))?this.getNameOfMeasure():null);
            List<CharacterStringPropertyType> rhsNameOfMeasure;
            rhsNameOfMeasure = (((that.nameOfMeasure!= null)&&(!that.nameOfMeasure.isEmpty()))?that.getNameOfMeasure():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nameOfMeasure", lhsNameOfMeasure), LocatorUtils.property(thatLocator, "nameOfMeasure", rhsNameOfMeasure), lhsNameOfMeasure, rhsNameOfMeasure)) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsMeasureIdentification;
            lhsMeasureIdentification = this.getMeasureIdentification();
            MDIdentifierPropertyType rhsMeasureIdentification;
            rhsMeasureIdentification = that.getMeasureIdentification();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureIdentification", lhsMeasureIdentification), LocatorUtils.property(thatLocator, "measureIdentification", rhsMeasureIdentification), lhsMeasureIdentification, rhsMeasureIdentification)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsMeasureDescription;
            lhsMeasureDescription = this.getMeasureDescription();
            CharacterStringPropertyType rhsMeasureDescription;
            rhsMeasureDescription = that.getMeasureDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureDescription", lhsMeasureDescription), LocatorUtils.property(thatLocator, "measureDescription", rhsMeasureDescription), lhsMeasureDescription, rhsMeasureDescription)) {
                return false;
            }
        }
        {
            DQEvaluationMethodTypeCodePropertyType lhsEvaluationMethodType;
            lhsEvaluationMethodType = this.getEvaluationMethodType();
            DQEvaluationMethodTypeCodePropertyType rhsEvaluationMethodType;
            rhsEvaluationMethodType = that.getEvaluationMethodType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "evaluationMethodType", lhsEvaluationMethodType), LocatorUtils.property(thatLocator, "evaluationMethodType", rhsEvaluationMethodType), lhsEvaluationMethodType, rhsEvaluationMethodType)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsEvaluationMethodDescription;
            lhsEvaluationMethodDescription = this.getEvaluationMethodDescription();
            CharacterStringPropertyType rhsEvaluationMethodDescription;
            rhsEvaluationMethodDescription = that.getEvaluationMethodDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "evaluationMethodDescription", lhsEvaluationMethodDescription), LocatorUtils.property(thatLocator, "evaluationMethodDescription", rhsEvaluationMethodDescription), lhsEvaluationMethodDescription, rhsEvaluationMethodDescription)) {
                return false;
            }
        }
        {
            CICitationPropertyType lhsEvaluationProcedure;
            lhsEvaluationProcedure = this.getEvaluationProcedure();
            CICitationPropertyType rhsEvaluationProcedure;
            rhsEvaluationProcedure = that.getEvaluationProcedure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "evaluationProcedure", lhsEvaluationProcedure), LocatorUtils.property(thatLocator, "evaluationProcedure", rhsEvaluationProcedure), lhsEvaluationProcedure, rhsEvaluationProcedure)) {
                return false;
            }
        }
        {
            List<DateTimePropertyType> lhsDateTime;
            lhsDateTime = (((this.dateTime!= null)&&(!this.dateTime.isEmpty()))?this.getDateTime():null);
            List<DateTimePropertyType> rhsDateTime;
            rhsDateTime = (((that.dateTime!= null)&&(!that.dateTime.isEmpty()))?that.getDateTime():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                return false;
            }
        }
        {
            List<DQResultPropertyType> lhsResult;
            lhsResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            List<DQResultPropertyType> rhsResult;
            rhsResult = (((that.result!= null)&&(!that.result.isEmpty()))?that.getResult():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "result", lhsResult), LocatorUtils.property(thatLocator, "result", rhsResult), lhsResult, rhsResult)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CharacterStringPropertyType> theNameOfMeasure;
            theNameOfMeasure = (((this.nameOfMeasure!= null)&&(!this.nameOfMeasure.isEmpty()))?this.getNameOfMeasure():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nameOfMeasure", theNameOfMeasure), currentHashCode, theNameOfMeasure);
        }
        {
            MDIdentifierPropertyType theMeasureIdentification;
            theMeasureIdentification = this.getMeasureIdentification();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureIdentification", theMeasureIdentification), currentHashCode, theMeasureIdentification);
        }
        {
            CharacterStringPropertyType theMeasureDescription;
            theMeasureDescription = this.getMeasureDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureDescription", theMeasureDescription), currentHashCode, theMeasureDescription);
        }
        {
            DQEvaluationMethodTypeCodePropertyType theEvaluationMethodType;
            theEvaluationMethodType = this.getEvaluationMethodType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "evaluationMethodType", theEvaluationMethodType), currentHashCode, theEvaluationMethodType);
        }
        {
            CharacterStringPropertyType theEvaluationMethodDescription;
            theEvaluationMethodDescription = this.getEvaluationMethodDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "evaluationMethodDescription", theEvaluationMethodDescription), currentHashCode, theEvaluationMethodDescription);
        }
        {
            CICitationPropertyType theEvaluationProcedure;
            theEvaluationProcedure = this.getEvaluationProcedure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "evaluationProcedure", theEvaluationProcedure), currentHashCode, theEvaluationProcedure);
        }
        {
            List<DateTimePropertyType> theDateTime;
            theDateTime = (((this.dateTime!= null)&&(!this.dateTime.isEmpty()))?this.getDateTime():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
        }
        {
            List<DQResultPropertyType> theResult;
            theResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "result", theResult), currentHashCode, theResult);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractDQElementType) {
            final AbstractDQElementType copy = ((AbstractDQElementType) target);
            if ((this.nameOfMeasure!= null)&&(!this.nameOfMeasure.isEmpty())) {
                List<CharacterStringPropertyType> sourceNameOfMeasure;
                sourceNameOfMeasure = (((this.nameOfMeasure!= null)&&(!this.nameOfMeasure.isEmpty()))?this.getNameOfMeasure():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyNameOfMeasure = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "nameOfMeasure", sourceNameOfMeasure), sourceNameOfMeasure));
                copy.nameOfMeasure = null;
                if (copyNameOfMeasure!= null) {
                    List<CharacterStringPropertyType> uniqueNameOfMeasurel = copy.getNameOfMeasure();
                    uniqueNameOfMeasurel.addAll(copyNameOfMeasure);
                }
            } else {
                copy.nameOfMeasure = null;
            }
            if (this.measureIdentification!= null) {
                MDIdentifierPropertyType sourceMeasureIdentification;
                sourceMeasureIdentification = this.getMeasureIdentification();
                MDIdentifierPropertyType copyMeasureIdentification = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "measureIdentification", sourceMeasureIdentification), sourceMeasureIdentification));
                copy.setMeasureIdentification(copyMeasureIdentification);
            } else {
                copy.measureIdentification = null;
            }
            if (this.measureDescription!= null) {
                CharacterStringPropertyType sourceMeasureDescription;
                sourceMeasureDescription = this.getMeasureDescription();
                CharacterStringPropertyType copyMeasureDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "measureDescription", sourceMeasureDescription), sourceMeasureDescription));
                copy.setMeasureDescription(copyMeasureDescription);
            } else {
                copy.measureDescription = null;
            }
            if (this.evaluationMethodType!= null) {
                DQEvaluationMethodTypeCodePropertyType sourceEvaluationMethodType;
                sourceEvaluationMethodType = this.getEvaluationMethodType();
                DQEvaluationMethodTypeCodePropertyType copyEvaluationMethodType = ((DQEvaluationMethodTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "evaluationMethodType", sourceEvaluationMethodType), sourceEvaluationMethodType));
                copy.setEvaluationMethodType(copyEvaluationMethodType);
            } else {
                copy.evaluationMethodType = null;
            }
            if (this.evaluationMethodDescription!= null) {
                CharacterStringPropertyType sourceEvaluationMethodDescription;
                sourceEvaluationMethodDescription = this.getEvaluationMethodDescription();
                CharacterStringPropertyType copyEvaluationMethodDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "evaluationMethodDescription", sourceEvaluationMethodDescription), sourceEvaluationMethodDescription));
                copy.setEvaluationMethodDescription(copyEvaluationMethodDescription);
            } else {
                copy.evaluationMethodDescription = null;
            }
            if (this.evaluationProcedure!= null) {
                CICitationPropertyType sourceEvaluationProcedure;
                sourceEvaluationProcedure = this.getEvaluationProcedure();
                CICitationPropertyType copyEvaluationProcedure = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "evaluationProcedure", sourceEvaluationProcedure), sourceEvaluationProcedure));
                copy.setEvaluationProcedure(copyEvaluationProcedure);
            } else {
                copy.evaluationProcedure = null;
            }
            if ((this.dateTime!= null)&&(!this.dateTime.isEmpty())) {
                List<DateTimePropertyType> sourceDateTime;
                sourceDateTime = (((this.dateTime!= null)&&(!this.dateTime.isEmpty()))?this.getDateTime():null);
                @SuppressWarnings("unchecked")
                List<DateTimePropertyType> copyDateTime = ((List<DateTimePropertyType> ) strategy.copy(LocatorUtils.property(locator, "dateTime", sourceDateTime), sourceDateTime));
                copy.dateTime = null;
                if (copyDateTime!= null) {
                    List<DateTimePropertyType> uniqueDateTimel = copy.getDateTime();
                    uniqueDateTimel.addAll(copyDateTime);
                }
            } else {
                copy.dateTime = null;
            }
            if ((this.result!= null)&&(!this.result.isEmpty())) {
                List<DQResultPropertyType> sourceResult;
                sourceResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
                @SuppressWarnings("unchecked")
                List<DQResultPropertyType> copyResult = ((List<DQResultPropertyType> ) strategy.copy(LocatorUtils.property(locator, "result", sourceResult), sourceResult));
                copy.result = null;
                if (copyResult!= null) {
                    List<DQResultPropertyType> uniqueResultl = copy.getResult();
                    uniqueResultl.addAll(copyResult);
                }
            } else {
                copy.result = null;
            }
        }
        return target;
    }

}
