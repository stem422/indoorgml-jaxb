//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.DatePropertyType;
import org.isotc211._2005.gts.TMPeriodDurationPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the scope and frequency of updating
 * 
 * <p>Java class for MD_MaintenanceInformation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_MaintenanceInformation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="maintenanceAndUpdateFrequency" type="{http://www.isotc211.org/2005/gmd}MD_MaintenanceFrequencyCode_PropertyType"/&gt;
 *         &lt;element name="dateOfNextUpdate" type="{http://www.isotc211.org/2005/gco}Date_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="userDefinedMaintenanceFrequency" type="{http://www.isotc211.org/2005/gts}TM_PeriodDuration_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="updateScope" type="{http://www.isotc211.org/2005/gmd}MD_ScopeCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="updateScopeDescription" type="{http://www.isotc211.org/2005/gmd}MD_ScopeDescription_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="maintenanceNote" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="contact" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_MaintenanceInformation_Type", propOrder = {
    "maintenanceAndUpdateFrequency",
    "dateOfNextUpdate",
    "userDefinedMaintenanceFrequency",
    "updateScope",
    "updateScopeDescription",
    "maintenanceNote",
    "contact"
})
public class MDMaintenanceInformationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected MDMaintenanceFrequencyCodePropertyType maintenanceAndUpdateFrequency;
    protected DatePropertyType dateOfNextUpdate;
    protected TMPeriodDurationPropertyType userDefinedMaintenanceFrequency;
    protected List<MDScopeCodePropertyType> updateScope;
    protected List<MDScopeDescriptionPropertyType> updateScopeDescription;
    protected List<CharacterStringPropertyType> maintenanceNote;
    protected List<CIResponsiblePartyPropertyType> contact;

    /**
     * Gets the value of the maintenanceAndUpdateFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link MDMaintenanceFrequencyCodePropertyType }
     *     
     */
    public MDMaintenanceFrequencyCodePropertyType getMaintenanceAndUpdateFrequency() {
        return maintenanceAndUpdateFrequency;
    }

    /**
     * Sets the value of the maintenanceAndUpdateFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDMaintenanceFrequencyCodePropertyType }
     *     
     */
    public void setMaintenanceAndUpdateFrequency(MDMaintenanceFrequencyCodePropertyType value) {
        this.maintenanceAndUpdateFrequency = value;
    }

    /**
     * Gets the value of the dateOfNextUpdate property.
     * 
     * @return
     *     possible object is
     *     {@link DatePropertyType }
     *     
     */
    public DatePropertyType getDateOfNextUpdate() {
        return dateOfNextUpdate;
    }

    /**
     * Sets the value of the dateOfNextUpdate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DatePropertyType }
     *     
     */
    public void setDateOfNextUpdate(DatePropertyType value) {
        this.dateOfNextUpdate = value;
    }

    /**
     * Gets the value of the userDefinedMaintenanceFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link TMPeriodDurationPropertyType }
     *     
     */
    public TMPeriodDurationPropertyType getUserDefinedMaintenanceFrequency() {
        return userDefinedMaintenanceFrequency;
    }

    /**
     * Sets the value of the userDefinedMaintenanceFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link TMPeriodDurationPropertyType }
     *     
     */
    public void setUserDefinedMaintenanceFrequency(TMPeriodDurationPropertyType value) {
        this.userDefinedMaintenanceFrequency = value;
    }

    /**
     * Gets the value of the updateScope property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the updateScope property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUpdateScope().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDScopeCodePropertyType }
     * 
     * 
     */
    public List<MDScopeCodePropertyType> getUpdateScope() {
        if (updateScope == null) {
            updateScope = new ArrayList<MDScopeCodePropertyType>();
        }
        return this.updateScope;
    }

    /**
     * Gets the value of the updateScopeDescription property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the updateScopeDescription property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUpdateScopeDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDScopeDescriptionPropertyType }
     * 
     * 
     */
    public List<MDScopeDescriptionPropertyType> getUpdateScopeDescription() {
        if (updateScopeDescription == null) {
            updateScopeDescription = new ArrayList<MDScopeDescriptionPropertyType>();
        }
        return this.updateScopeDescription;
    }

    /**
     * Gets the value of the maintenanceNote property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the maintenanceNote property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMaintenanceNote().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getMaintenanceNote() {
        if (maintenanceNote == null) {
            maintenanceNote = new ArrayList<CharacterStringPropertyType>();
        }
        return this.maintenanceNote;
    }

    /**
     * Gets the value of the contact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getContact() {
        if (contact == null) {
            contact = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.contact;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDMaintenanceFrequencyCodePropertyType theMaintenanceAndUpdateFrequency;
            theMaintenanceAndUpdateFrequency = this.getMaintenanceAndUpdateFrequency();
            strategy.appendField(locator, this, "maintenanceAndUpdateFrequency", buffer, theMaintenanceAndUpdateFrequency);
        }
        {
            DatePropertyType theDateOfNextUpdate;
            theDateOfNextUpdate = this.getDateOfNextUpdate();
            strategy.appendField(locator, this, "dateOfNextUpdate", buffer, theDateOfNextUpdate);
        }
        {
            TMPeriodDurationPropertyType theUserDefinedMaintenanceFrequency;
            theUserDefinedMaintenanceFrequency = this.getUserDefinedMaintenanceFrequency();
            strategy.appendField(locator, this, "userDefinedMaintenanceFrequency", buffer, theUserDefinedMaintenanceFrequency);
        }
        {
            List<MDScopeCodePropertyType> theUpdateScope;
            theUpdateScope = (((this.updateScope!= null)&&(!this.updateScope.isEmpty()))?this.getUpdateScope():null);
            strategy.appendField(locator, this, "updateScope", buffer, theUpdateScope);
        }
        {
            List<MDScopeDescriptionPropertyType> theUpdateScopeDescription;
            theUpdateScopeDescription = (((this.updateScopeDescription!= null)&&(!this.updateScopeDescription.isEmpty()))?this.getUpdateScopeDescription():null);
            strategy.appendField(locator, this, "updateScopeDescription", buffer, theUpdateScopeDescription);
        }
        {
            List<CharacterStringPropertyType> theMaintenanceNote;
            theMaintenanceNote = (((this.maintenanceNote!= null)&&(!this.maintenanceNote.isEmpty()))?this.getMaintenanceNote():null);
            strategy.appendField(locator, this, "maintenanceNote", buffer, theMaintenanceNote);
        }
        {
            List<CIResponsiblePartyPropertyType> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            strategy.appendField(locator, this, "contact", buffer, theContact);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDMaintenanceInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDMaintenanceInformationType that = ((MDMaintenanceInformationType) object);
        {
            MDMaintenanceFrequencyCodePropertyType lhsMaintenanceAndUpdateFrequency;
            lhsMaintenanceAndUpdateFrequency = this.getMaintenanceAndUpdateFrequency();
            MDMaintenanceFrequencyCodePropertyType rhsMaintenanceAndUpdateFrequency;
            rhsMaintenanceAndUpdateFrequency = that.getMaintenanceAndUpdateFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maintenanceAndUpdateFrequency", lhsMaintenanceAndUpdateFrequency), LocatorUtils.property(thatLocator, "maintenanceAndUpdateFrequency", rhsMaintenanceAndUpdateFrequency), lhsMaintenanceAndUpdateFrequency, rhsMaintenanceAndUpdateFrequency)) {
                return false;
            }
        }
        {
            DatePropertyType lhsDateOfNextUpdate;
            lhsDateOfNextUpdate = this.getDateOfNextUpdate();
            DatePropertyType rhsDateOfNextUpdate;
            rhsDateOfNextUpdate = that.getDateOfNextUpdate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateOfNextUpdate", lhsDateOfNextUpdate), LocatorUtils.property(thatLocator, "dateOfNextUpdate", rhsDateOfNextUpdate), lhsDateOfNextUpdate, rhsDateOfNextUpdate)) {
                return false;
            }
        }
        {
            TMPeriodDurationPropertyType lhsUserDefinedMaintenanceFrequency;
            lhsUserDefinedMaintenanceFrequency = this.getUserDefinedMaintenanceFrequency();
            TMPeriodDurationPropertyType rhsUserDefinedMaintenanceFrequency;
            rhsUserDefinedMaintenanceFrequency = that.getUserDefinedMaintenanceFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userDefinedMaintenanceFrequency", lhsUserDefinedMaintenanceFrequency), LocatorUtils.property(thatLocator, "userDefinedMaintenanceFrequency", rhsUserDefinedMaintenanceFrequency), lhsUserDefinedMaintenanceFrequency, rhsUserDefinedMaintenanceFrequency)) {
                return false;
            }
        }
        {
            List<MDScopeCodePropertyType> lhsUpdateScope;
            lhsUpdateScope = (((this.updateScope!= null)&&(!this.updateScope.isEmpty()))?this.getUpdateScope():null);
            List<MDScopeCodePropertyType> rhsUpdateScope;
            rhsUpdateScope = (((that.updateScope!= null)&&(!that.updateScope.isEmpty()))?that.getUpdateScope():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "updateScope", lhsUpdateScope), LocatorUtils.property(thatLocator, "updateScope", rhsUpdateScope), lhsUpdateScope, rhsUpdateScope)) {
                return false;
            }
        }
        {
            List<MDScopeDescriptionPropertyType> lhsUpdateScopeDescription;
            lhsUpdateScopeDescription = (((this.updateScopeDescription!= null)&&(!this.updateScopeDescription.isEmpty()))?this.getUpdateScopeDescription():null);
            List<MDScopeDescriptionPropertyType> rhsUpdateScopeDescription;
            rhsUpdateScopeDescription = (((that.updateScopeDescription!= null)&&(!that.updateScopeDescription.isEmpty()))?that.getUpdateScopeDescription():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "updateScopeDescription", lhsUpdateScopeDescription), LocatorUtils.property(thatLocator, "updateScopeDescription", rhsUpdateScopeDescription), lhsUpdateScopeDescription, rhsUpdateScopeDescription)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsMaintenanceNote;
            lhsMaintenanceNote = (((this.maintenanceNote!= null)&&(!this.maintenanceNote.isEmpty()))?this.getMaintenanceNote():null);
            List<CharacterStringPropertyType> rhsMaintenanceNote;
            rhsMaintenanceNote = (((that.maintenanceNote!= null)&&(!that.maintenanceNote.isEmpty()))?that.getMaintenanceNote():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maintenanceNote", lhsMaintenanceNote), LocatorUtils.property(thatLocator, "maintenanceNote", rhsMaintenanceNote), lhsMaintenanceNote, rhsMaintenanceNote)) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsContact;
            lhsContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            List<CIResponsiblePartyPropertyType> rhsContact;
            rhsContact = (((that.contact!= null)&&(!that.contact.isEmpty()))?that.getContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contact", lhsContact), LocatorUtils.property(thatLocator, "contact", rhsContact), lhsContact, rhsContact)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDMaintenanceFrequencyCodePropertyType theMaintenanceAndUpdateFrequency;
            theMaintenanceAndUpdateFrequency = this.getMaintenanceAndUpdateFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maintenanceAndUpdateFrequency", theMaintenanceAndUpdateFrequency), currentHashCode, theMaintenanceAndUpdateFrequency);
        }
        {
            DatePropertyType theDateOfNextUpdate;
            theDateOfNextUpdate = this.getDateOfNextUpdate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateOfNextUpdate", theDateOfNextUpdate), currentHashCode, theDateOfNextUpdate);
        }
        {
            TMPeriodDurationPropertyType theUserDefinedMaintenanceFrequency;
            theUserDefinedMaintenanceFrequency = this.getUserDefinedMaintenanceFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userDefinedMaintenanceFrequency", theUserDefinedMaintenanceFrequency), currentHashCode, theUserDefinedMaintenanceFrequency);
        }
        {
            List<MDScopeCodePropertyType> theUpdateScope;
            theUpdateScope = (((this.updateScope!= null)&&(!this.updateScope.isEmpty()))?this.getUpdateScope():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "updateScope", theUpdateScope), currentHashCode, theUpdateScope);
        }
        {
            List<MDScopeDescriptionPropertyType> theUpdateScopeDescription;
            theUpdateScopeDescription = (((this.updateScopeDescription!= null)&&(!this.updateScopeDescription.isEmpty()))?this.getUpdateScopeDescription():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "updateScopeDescription", theUpdateScopeDescription), currentHashCode, theUpdateScopeDescription);
        }
        {
            List<CharacterStringPropertyType> theMaintenanceNote;
            theMaintenanceNote = (((this.maintenanceNote!= null)&&(!this.maintenanceNote.isEmpty()))?this.getMaintenanceNote():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maintenanceNote", theMaintenanceNote), currentHashCode, theMaintenanceNote);
        }
        {
            List<CIResponsiblePartyPropertyType> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contact", theContact), currentHashCode, theContact);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDMaintenanceInformationType) {
            final MDMaintenanceInformationType copy = ((MDMaintenanceInformationType) draftCopy);
            if (this.maintenanceAndUpdateFrequency!= null) {
                MDMaintenanceFrequencyCodePropertyType sourceMaintenanceAndUpdateFrequency;
                sourceMaintenanceAndUpdateFrequency = this.getMaintenanceAndUpdateFrequency();
                MDMaintenanceFrequencyCodePropertyType copyMaintenanceAndUpdateFrequency = ((MDMaintenanceFrequencyCodePropertyType) strategy.copy(LocatorUtils.property(locator, "maintenanceAndUpdateFrequency", sourceMaintenanceAndUpdateFrequency), sourceMaintenanceAndUpdateFrequency));
                copy.setMaintenanceAndUpdateFrequency(copyMaintenanceAndUpdateFrequency);
            } else {
                copy.maintenanceAndUpdateFrequency = null;
            }
            if (this.dateOfNextUpdate!= null) {
                DatePropertyType sourceDateOfNextUpdate;
                sourceDateOfNextUpdate = this.getDateOfNextUpdate();
                DatePropertyType copyDateOfNextUpdate = ((DatePropertyType) strategy.copy(LocatorUtils.property(locator, "dateOfNextUpdate", sourceDateOfNextUpdate), sourceDateOfNextUpdate));
                copy.setDateOfNextUpdate(copyDateOfNextUpdate);
            } else {
                copy.dateOfNextUpdate = null;
            }
            if (this.userDefinedMaintenanceFrequency!= null) {
                TMPeriodDurationPropertyType sourceUserDefinedMaintenanceFrequency;
                sourceUserDefinedMaintenanceFrequency = this.getUserDefinedMaintenanceFrequency();
                TMPeriodDurationPropertyType copyUserDefinedMaintenanceFrequency = ((TMPeriodDurationPropertyType) strategy.copy(LocatorUtils.property(locator, "userDefinedMaintenanceFrequency", sourceUserDefinedMaintenanceFrequency), sourceUserDefinedMaintenanceFrequency));
                copy.setUserDefinedMaintenanceFrequency(copyUserDefinedMaintenanceFrequency);
            } else {
                copy.userDefinedMaintenanceFrequency = null;
            }
            if ((this.updateScope!= null)&&(!this.updateScope.isEmpty())) {
                List<MDScopeCodePropertyType> sourceUpdateScope;
                sourceUpdateScope = (((this.updateScope!= null)&&(!this.updateScope.isEmpty()))?this.getUpdateScope():null);
                @SuppressWarnings("unchecked")
                List<MDScopeCodePropertyType> copyUpdateScope = ((List<MDScopeCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "updateScope", sourceUpdateScope), sourceUpdateScope));
                copy.updateScope = null;
                if (copyUpdateScope!= null) {
                    List<MDScopeCodePropertyType> uniqueUpdateScopel = copy.getUpdateScope();
                    uniqueUpdateScopel.addAll(copyUpdateScope);
                }
            } else {
                copy.updateScope = null;
            }
            if ((this.updateScopeDescription!= null)&&(!this.updateScopeDescription.isEmpty())) {
                List<MDScopeDescriptionPropertyType> sourceUpdateScopeDescription;
                sourceUpdateScopeDescription = (((this.updateScopeDescription!= null)&&(!this.updateScopeDescription.isEmpty()))?this.getUpdateScopeDescription():null);
                @SuppressWarnings("unchecked")
                List<MDScopeDescriptionPropertyType> copyUpdateScopeDescription = ((List<MDScopeDescriptionPropertyType> ) strategy.copy(LocatorUtils.property(locator, "updateScopeDescription", sourceUpdateScopeDescription), sourceUpdateScopeDescription));
                copy.updateScopeDescription = null;
                if (copyUpdateScopeDescription!= null) {
                    List<MDScopeDescriptionPropertyType> uniqueUpdateScopeDescriptionl = copy.getUpdateScopeDescription();
                    uniqueUpdateScopeDescriptionl.addAll(copyUpdateScopeDescription);
                }
            } else {
                copy.updateScopeDescription = null;
            }
            if ((this.maintenanceNote!= null)&&(!this.maintenanceNote.isEmpty())) {
                List<CharacterStringPropertyType> sourceMaintenanceNote;
                sourceMaintenanceNote = (((this.maintenanceNote!= null)&&(!this.maintenanceNote.isEmpty()))?this.getMaintenanceNote():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyMaintenanceNote = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "maintenanceNote", sourceMaintenanceNote), sourceMaintenanceNote));
                copy.maintenanceNote = null;
                if (copyMaintenanceNote!= null) {
                    List<CharacterStringPropertyType> uniqueMaintenanceNotel = copy.getMaintenanceNote();
                    uniqueMaintenanceNotel.addAll(copyMaintenanceNote);
                }
            } else {
                copy.maintenanceNote = null;
            }
            if ((this.contact!= null)&&(!this.contact.isEmpty())) {
                List<CIResponsiblePartyPropertyType> sourceContact;
                sourceContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
                @SuppressWarnings("unchecked")
                List<CIResponsiblePartyPropertyType> copyContact = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "contact", sourceContact), sourceContact));
                copy.contact = null;
                if (copyContact!= null) {
                    List<CIResponsiblePartyPropertyType> uniqueContactl = copy.getContact();
                    uniqueContactl.addAll(copyContact);
                }
            } else {
                copy.contact = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDMaintenanceInformationType();
    }

}
