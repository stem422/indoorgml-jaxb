//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Location of the responsible individual or organisation
 * 
 * <p>Java class for CI_Address_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CI_Address_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="deliveryPoint" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="city" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="administrativeArea" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="postalCode" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="country" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="electronicMailAddress" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CI_Address_Type", propOrder = {
    "deliveryPoint",
    "city",
    "administrativeArea",
    "postalCode",
    "country",
    "electronicMailAddress"
})
public class CIAddressType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<CharacterStringPropertyType> deliveryPoint;
    protected CharacterStringPropertyType city;
    protected CharacterStringPropertyType administrativeArea;
    protected CharacterStringPropertyType postalCode;
    protected CharacterStringPropertyType country;
    protected List<CharacterStringPropertyType> electronicMailAddress;

    /**
     * Gets the value of the deliveryPoint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the deliveryPoint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDeliveryPoint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getDeliveryPoint() {
        if (deliveryPoint == null) {
            deliveryPoint = new ArrayList<CharacterStringPropertyType>();
        }
        return this.deliveryPoint;
    }

    /**
     * Gets the value of the city property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getCity() {
        return city;
    }

    /**
     * Sets the value of the city property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setCity(CharacterStringPropertyType value) {
        this.city = value;
    }

    /**
     * Gets the value of the administrativeArea property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getAdministrativeArea() {
        return administrativeArea;
    }

    /**
     * Sets the value of the administrativeArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setAdministrativeArea(CharacterStringPropertyType value) {
        this.administrativeArea = value;
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setPostalCode(CharacterStringPropertyType value) {
        this.postalCode = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setCountry(CharacterStringPropertyType value) {
        this.country = value;
    }

    /**
     * Gets the value of the electronicMailAddress property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the electronicMailAddress property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getElectronicMailAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getElectronicMailAddress() {
        if (electronicMailAddress == null) {
            electronicMailAddress = new ArrayList<CharacterStringPropertyType>();
        }
        return this.electronicMailAddress;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CharacterStringPropertyType> theDeliveryPoint;
            theDeliveryPoint = (((this.deliveryPoint!= null)&&(!this.deliveryPoint.isEmpty()))?this.getDeliveryPoint():null);
            strategy.appendField(locator, this, "deliveryPoint", buffer, theDeliveryPoint);
        }
        {
            CharacterStringPropertyType theCity;
            theCity = this.getCity();
            strategy.appendField(locator, this, "city", buffer, theCity);
        }
        {
            CharacterStringPropertyType theAdministrativeArea;
            theAdministrativeArea = this.getAdministrativeArea();
            strategy.appendField(locator, this, "administrativeArea", buffer, theAdministrativeArea);
        }
        {
            CharacterStringPropertyType thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            CharacterStringPropertyType theCountry;
            theCountry = this.getCountry();
            strategy.appendField(locator, this, "country", buffer, theCountry);
        }
        {
            List<CharacterStringPropertyType> theElectronicMailAddress;
            theElectronicMailAddress = (((this.electronicMailAddress!= null)&&(!this.electronicMailAddress.isEmpty()))?this.getElectronicMailAddress():null);
            strategy.appendField(locator, this, "electronicMailAddress", buffer, theElectronicMailAddress);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CIAddressType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CIAddressType that = ((CIAddressType) object);
        {
            List<CharacterStringPropertyType> lhsDeliveryPoint;
            lhsDeliveryPoint = (((this.deliveryPoint!= null)&&(!this.deliveryPoint.isEmpty()))?this.getDeliveryPoint():null);
            List<CharacterStringPropertyType> rhsDeliveryPoint;
            rhsDeliveryPoint = (((that.deliveryPoint!= null)&&(!that.deliveryPoint.isEmpty()))?that.getDeliveryPoint():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deliveryPoint", lhsDeliveryPoint), LocatorUtils.property(thatLocator, "deliveryPoint", rhsDeliveryPoint), lhsDeliveryPoint, rhsDeliveryPoint)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsCity;
            lhsCity = this.getCity();
            CharacterStringPropertyType rhsCity;
            rhsCity = that.getCity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "city", lhsCity), LocatorUtils.property(thatLocator, "city", rhsCity), lhsCity, rhsCity)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsAdministrativeArea;
            lhsAdministrativeArea = this.getAdministrativeArea();
            CharacterStringPropertyType rhsAdministrativeArea;
            rhsAdministrativeArea = that.getAdministrativeArea();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "administrativeArea", lhsAdministrativeArea), LocatorUtils.property(thatLocator, "administrativeArea", rhsAdministrativeArea), lhsAdministrativeArea, rhsAdministrativeArea)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            CharacterStringPropertyType rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsCountry;
            lhsCountry = this.getCountry();
            CharacterStringPropertyType rhsCountry;
            rhsCountry = that.getCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "country", lhsCountry), LocatorUtils.property(thatLocator, "country", rhsCountry), lhsCountry, rhsCountry)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsElectronicMailAddress;
            lhsElectronicMailAddress = (((this.electronicMailAddress!= null)&&(!this.electronicMailAddress.isEmpty()))?this.getElectronicMailAddress():null);
            List<CharacterStringPropertyType> rhsElectronicMailAddress;
            rhsElectronicMailAddress = (((that.electronicMailAddress!= null)&&(!that.electronicMailAddress.isEmpty()))?that.getElectronicMailAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "electronicMailAddress", lhsElectronicMailAddress), LocatorUtils.property(thatLocator, "electronicMailAddress", rhsElectronicMailAddress), lhsElectronicMailAddress, rhsElectronicMailAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CharacterStringPropertyType> theDeliveryPoint;
            theDeliveryPoint = (((this.deliveryPoint!= null)&&(!this.deliveryPoint.isEmpty()))?this.getDeliveryPoint():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deliveryPoint", theDeliveryPoint), currentHashCode, theDeliveryPoint);
        }
        {
            CharacterStringPropertyType theCity;
            theCity = this.getCity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "city", theCity), currentHashCode, theCity);
        }
        {
            CharacterStringPropertyType theAdministrativeArea;
            theAdministrativeArea = this.getAdministrativeArea();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "administrativeArea", theAdministrativeArea), currentHashCode, theAdministrativeArea);
        }
        {
            CharacterStringPropertyType thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            CharacterStringPropertyType theCountry;
            theCountry = this.getCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "country", theCountry), currentHashCode, theCountry);
        }
        {
            List<CharacterStringPropertyType> theElectronicMailAddress;
            theElectronicMailAddress = (((this.electronicMailAddress!= null)&&(!this.electronicMailAddress.isEmpty()))?this.getElectronicMailAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "electronicMailAddress", theElectronicMailAddress), currentHashCode, theElectronicMailAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CIAddressType) {
            final CIAddressType copy = ((CIAddressType) draftCopy);
            if ((this.deliveryPoint!= null)&&(!this.deliveryPoint.isEmpty())) {
                List<CharacterStringPropertyType> sourceDeliveryPoint;
                sourceDeliveryPoint = (((this.deliveryPoint!= null)&&(!this.deliveryPoint.isEmpty()))?this.getDeliveryPoint():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyDeliveryPoint = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "deliveryPoint", sourceDeliveryPoint), sourceDeliveryPoint));
                copy.deliveryPoint = null;
                if (copyDeliveryPoint!= null) {
                    List<CharacterStringPropertyType> uniqueDeliveryPointl = copy.getDeliveryPoint();
                    uniqueDeliveryPointl.addAll(copyDeliveryPoint);
                }
            } else {
                copy.deliveryPoint = null;
            }
            if (this.city!= null) {
                CharacterStringPropertyType sourceCity;
                sourceCity = this.getCity();
                CharacterStringPropertyType copyCity = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "city", sourceCity), sourceCity));
                copy.setCity(copyCity);
            } else {
                copy.city = null;
            }
            if (this.administrativeArea!= null) {
                CharacterStringPropertyType sourceAdministrativeArea;
                sourceAdministrativeArea = this.getAdministrativeArea();
                CharacterStringPropertyType copyAdministrativeArea = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "administrativeArea", sourceAdministrativeArea), sourceAdministrativeArea));
                copy.setAdministrativeArea(copyAdministrativeArea);
            } else {
                copy.administrativeArea = null;
            }
            if (this.postalCode!= null) {
                CharacterStringPropertyType sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                CharacterStringPropertyType copyPostalCode = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.country!= null) {
                CharacterStringPropertyType sourceCountry;
                sourceCountry = this.getCountry();
                CharacterStringPropertyType copyCountry = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "country", sourceCountry), sourceCountry));
                copy.setCountry(copyCountry);
            } else {
                copy.country = null;
            }
            if ((this.electronicMailAddress!= null)&&(!this.electronicMailAddress.isEmpty())) {
                List<CharacterStringPropertyType> sourceElectronicMailAddress;
                sourceElectronicMailAddress = (((this.electronicMailAddress!= null)&&(!this.electronicMailAddress.isEmpty()))?this.getElectronicMailAddress():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyElectronicMailAddress = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "electronicMailAddress", sourceElectronicMailAddress), sourceElectronicMailAddress));
                copy.electronicMailAddress = null;
                if (copyElectronicMailAddress!= null) {
                    List<CharacterStringPropertyType> uniqueElectronicMailAddressl = copy.getElectronicMailAddress();
                    uniqueElectronicMailAddressl.addAll(copyElectronicMailAddress);
                }
            } else {
                copy.electronicMailAddress = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CIAddressType();
    }

}
