//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.IntegerPropertyType;
import org.isotc211._2005.gco.RealPropertyType;
import org.isotc211._2005.gco.UomLengthPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MD_Band_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Band_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}MD_RangeDimension_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="maxValue" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="minValue" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="units" type="{http://www.isotc211.org/2005/gco}UomLength_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="peakResponse" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="bitsPerValue" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="toneGradation" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="scaleFactor" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="offset" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Band_Type", propOrder = {
    "maxValue",
    "minValue",
    "units",
    "peakResponse",
    "bitsPerValue",
    "toneGradation",
    "scaleFactor",
    "offset"
})
public class MDBandType
    extends MDRangeDimensionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected RealPropertyType maxValue;
    protected RealPropertyType minValue;
    protected UomLengthPropertyType units;
    protected RealPropertyType peakResponse;
    protected IntegerPropertyType bitsPerValue;
    protected IntegerPropertyType toneGradation;
    protected RealPropertyType scaleFactor;
    protected RealPropertyType offset;

    /**
     * Gets the value of the maxValue property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getMaxValue() {
        return maxValue;
    }

    /**
     * Sets the value of the maxValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setMaxValue(RealPropertyType value) {
        this.maxValue = value;
    }

    /**
     * Gets the value of the minValue property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getMinValue() {
        return minValue;
    }

    /**
     * Sets the value of the minValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setMinValue(RealPropertyType value) {
        this.minValue = value;
    }

    /**
     * Gets the value of the units property.
     * 
     * @return
     *     possible object is
     *     {@link UomLengthPropertyType }
     *     
     */
    public UomLengthPropertyType getUnits() {
        return units;
    }

    /**
     * Sets the value of the units property.
     * 
     * @param value
     *     allowed object is
     *     {@link UomLengthPropertyType }
     *     
     */
    public void setUnits(UomLengthPropertyType value) {
        this.units = value;
    }

    /**
     * Gets the value of the peakResponse property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getPeakResponse() {
        return peakResponse;
    }

    /**
     * Sets the value of the peakResponse property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setPeakResponse(RealPropertyType value) {
        this.peakResponse = value;
    }

    /**
     * Gets the value of the bitsPerValue property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getBitsPerValue() {
        return bitsPerValue;
    }

    /**
     * Sets the value of the bitsPerValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setBitsPerValue(IntegerPropertyType value) {
        this.bitsPerValue = value;
    }

    /**
     * Gets the value of the toneGradation property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getToneGradation() {
        return toneGradation;
    }

    /**
     * Sets the value of the toneGradation property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setToneGradation(IntegerPropertyType value) {
        this.toneGradation = value;
    }

    /**
     * Gets the value of the scaleFactor property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getScaleFactor() {
        return scaleFactor;
    }

    /**
     * Sets the value of the scaleFactor property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setScaleFactor(RealPropertyType value) {
        this.scaleFactor = value;
    }

    /**
     * Gets the value of the offset property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getOffset() {
        return offset;
    }

    /**
     * Sets the value of the offset property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setOffset(RealPropertyType value) {
        this.offset = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RealPropertyType theMaxValue;
            theMaxValue = this.getMaxValue();
            strategy.appendField(locator, this, "maxValue", buffer, theMaxValue);
        }
        {
            RealPropertyType theMinValue;
            theMinValue = this.getMinValue();
            strategy.appendField(locator, this, "minValue", buffer, theMinValue);
        }
        {
            UomLengthPropertyType theUnits;
            theUnits = this.getUnits();
            strategy.appendField(locator, this, "units", buffer, theUnits);
        }
        {
            RealPropertyType thePeakResponse;
            thePeakResponse = this.getPeakResponse();
            strategy.appendField(locator, this, "peakResponse", buffer, thePeakResponse);
        }
        {
            IntegerPropertyType theBitsPerValue;
            theBitsPerValue = this.getBitsPerValue();
            strategy.appendField(locator, this, "bitsPerValue", buffer, theBitsPerValue);
        }
        {
            IntegerPropertyType theToneGradation;
            theToneGradation = this.getToneGradation();
            strategy.appendField(locator, this, "toneGradation", buffer, theToneGradation);
        }
        {
            RealPropertyType theScaleFactor;
            theScaleFactor = this.getScaleFactor();
            strategy.appendField(locator, this, "scaleFactor", buffer, theScaleFactor);
        }
        {
            RealPropertyType theOffset;
            theOffset = this.getOffset();
            strategy.appendField(locator, this, "offset", buffer, theOffset);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDBandType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDBandType that = ((MDBandType) object);
        {
            RealPropertyType lhsMaxValue;
            lhsMaxValue = this.getMaxValue();
            RealPropertyType rhsMaxValue;
            rhsMaxValue = that.getMaxValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxValue", lhsMaxValue), LocatorUtils.property(thatLocator, "maxValue", rhsMaxValue), lhsMaxValue, rhsMaxValue)) {
                return false;
            }
        }
        {
            RealPropertyType lhsMinValue;
            lhsMinValue = this.getMinValue();
            RealPropertyType rhsMinValue;
            rhsMinValue = that.getMinValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minValue", lhsMinValue), LocatorUtils.property(thatLocator, "minValue", rhsMinValue), lhsMinValue, rhsMinValue)) {
                return false;
            }
        }
        {
            UomLengthPropertyType lhsUnits;
            lhsUnits = this.getUnits();
            UomLengthPropertyType rhsUnits;
            rhsUnits = that.getUnits();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "units", lhsUnits), LocatorUtils.property(thatLocator, "units", rhsUnits), lhsUnits, rhsUnits)) {
                return false;
            }
        }
        {
            RealPropertyType lhsPeakResponse;
            lhsPeakResponse = this.getPeakResponse();
            RealPropertyType rhsPeakResponse;
            rhsPeakResponse = that.getPeakResponse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "peakResponse", lhsPeakResponse), LocatorUtils.property(thatLocator, "peakResponse", rhsPeakResponse), lhsPeakResponse, rhsPeakResponse)) {
                return false;
            }
        }
        {
            IntegerPropertyType lhsBitsPerValue;
            lhsBitsPerValue = this.getBitsPerValue();
            IntegerPropertyType rhsBitsPerValue;
            rhsBitsPerValue = that.getBitsPerValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bitsPerValue", lhsBitsPerValue), LocatorUtils.property(thatLocator, "bitsPerValue", rhsBitsPerValue), lhsBitsPerValue, rhsBitsPerValue)) {
                return false;
            }
        }
        {
            IntegerPropertyType lhsToneGradation;
            lhsToneGradation = this.getToneGradation();
            IntegerPropertyType rhsToneGradation;
            rhsToneGradation = that.getToneGradation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "toneGradation", lhsToneGradation), LocatorUtils.property(thatLocator, "toneGradation", rhsToneGradation), lhsToneGradation, rhsToneGradation)) {
                return false;
            }
        }
        {
            RealPropertyType lhsScaleFactor;
            lhsScaleFactor = this.getScaleFactor();
            RealPropertyType rhsScaleFactor;
            rhsScaleFactor = that.getScaleFactor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scaleFactor", lhsScaleFactor), LocatorUtils.property(thatLocator, "scaleFactor", rhsScaleFactor), lhsScaleFactor, rhsScaleFactor)) {
                return false;
            }
        }
        {
            RealPropertyType lhsOffset;
            lhsOffset = this.getOffset();
            RealPropertyType rhsOffset;
            rhsOffset = that.getOffset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offset", lhsOffset), LocatorUtils.property(thatLocator, "offset", rhsOffset), lhsOffset, rhsOffset)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RealPropertyType theMaxValue;
            theMaxValue = this.getMaxValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxValue", theMaxValue), currentHashCode, theMaxValue);
        }
        {
            RealPropertyType theMinValue;
            theMinValue = this.getMinValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minValue", theMinValue), currentHashCode, theMinValue);
        }
        {
            UomLengthPropertyType theUnits;
            theUnits = this.getUnits();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "units", theUnits), currentHashCode, theUnits);
        }
        {
            RealPropertyType thePeakResponse;
            thePeakResponse = this.getPeakResponse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "peakResponse", thePeakResponse), currentHashCode, thePeakResponse);
        }
        {
            IntegerPropertyType theBitsPerValue;
            theBitsPerValue = this.getBitsPerValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bitsPerValue", theBitsPerValue), currentHashCode, theBitsPerValue);
        }
        {
            IntegerPropertyType theToneGradation;
            theToneGradation = this.getToneGradation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toneGradation", theToneGradation), currentHashCode, theToneGradation);
        }
        {
            RealPropertyType theScaleFactor;
            theScaleFactor = this.getScaleFactor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scaleFactor", theScaleFactor), currentHashCode, theScaleFactor);
        }
        {
            RealPropertyType theOffset;
            theOffset = this.getOffset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offset", theOffset), currentHashCode, theOffset);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDBandType) {
            final MDBandType copy = ((MDBandType) draftCopy);
            if (this.maxValue!= null) {
                RealPropertyType sourceMaxValue;
                sourceMaxValue = this.getMaxValue();
                RealPropertyType copyMaxValue = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "maxValue", sourceMaxValue), sourceMaxValue));
                copy.setMaxValue(copyMaxValue);
            } else {
                copy.maxValue = null;
            }
            if (this.minValue!= null) {
                RealPropertyType sourceMinValue;
                sourceMinValue = this.getMinValue();
                RealPropertyType copyMinValue = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "minValue", sourceMinValue), sourceMinValue));
                copy.setMinValue(copyMinValue);
            } else {
                copy.minValue = null;
            }
            if (this.units!= null) {
                UomLengthPropertyType sourceUnits;
                sourceUnits = this.getUnits();
                UomLengthPropertyType copyUnits = ((UomLengthPropertyType) strategy.copy(LocatorUtils.property(locator, "units", sourceUnits), sourceUnits));
                copy.setUnits(copyUnits);
            } else {
                copy.units = null;
            }
            if (this.peakResponse!= null) {
                RealPropertyType sourcePeakResponse;
                sourcePeakResponse = this.getPeakResponse();
                RealPropertyType copyPeakResponse = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "peakResponse", sourcePeakResponse), sourcePeakResponse));
                copy.setPeakResponse(copyPeakResponse);
            } else {
                copy.peakResponse = null;
            }
            if (this.bitsPerValue!= null) {
                IntegerPropertyType sourceBitsPerValue;
                sourceBitsPerValue = this.getBitsPerValue();
                IntegerPropertyType copyBitsPerValue = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "bitsPerValue", sourceBitsPerValue), sourceBitsPerValue));
                copy.setBitsPerValue(copyBitsPerValue);
            } else {
                copy.bitsPerValue = null;
            }
            if (this.toneGradation!= null) {
                IntegerPropertyType sourceToneGradation;
                sourceToneGradation = this.getToneGradation();
                IntegerPropertyType copyToneGradation = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "toneGradation", sourceToneGradation), sourceToneGradation));
                copy.setToneGradation(copyToneGradation);
            } else {
                copy.toneGradation = null;
            }
            if (this.scaleFactor!= null) {
                RealPropertyType sourceScaleFactor;
                sourceScaleFactor = this.getScaleFactor();
                RealPropertyType copyScaleFactor = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "scaleFactor", sourceScaleFactor), sourceScaleFactor));
                copy.setScaleFactor(copyScaleFactor);
            } else {
                copy.scaleFactor = null;
            }
            if (this.offset!= null) {
                RealPropertyType sourceOffset;
                sourceOffset = this.getOffset();
                RealPropertyType copyOffset = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "offset", sourceOffset), sourceOffset));
                copy.setOffset(copyOffset);
            } else {
                copy.offset = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDBandType();
    }

}
