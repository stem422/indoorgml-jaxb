//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PT_LocaleContainer_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PT_LocaleContainer_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="description" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="locale" type="{http://www.isotc211.org/2005/gmd}PT_Locale_PropertyType"/&gt;
 *         &lt;element name="date" type="{http://www.isotc211.org/2005/gmd}CI_Date_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="responsibleParty" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="localisedString" type="{http://www.isotc211.org/2005/gmd}LocalisedCharacterString_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PT_LocaleContainer_Type", propOrder = {
    "description",
    "locale",
    "date",
    "responsibleParty",
    "localisedString"
})
public class PTLocaleContainerType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected CharacterStringPropertyType description;
    @XmlElement(required = true)
    protected PTLocalePropertyType locale;
    @XmlElement(required = true)
    protected List<CIDatePropertyType> date;
    @XmlElement(required = true)
    protected List<CIResponsiblePartyPropertyType> responsibleParty;
    @XmlElement(required = true)
    protected List<LocalisedCharacterStringPropertyType> localisedString;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescription(CharacterStringPropertyType value) {
        this.description = value;
    }

    /**
     * Gets the value of the locale property.
     * 
     * @return
     *     possible object is
     *     {@link PTLocalePropertyType }
     *     
     */
    public PTLocalePropertyType getLocale() {
        return locale;
    }

    /**
     * Sets the value of the locale property.
     * 
     * @param value
     *     allowed object is
     *     {@link PTLocalePropertyType }
     *     
     */
    public void setLocale(PTLocalePropertyType value) {
        this.locale = value;
    }

    /**
     * Gets the value of the date property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the date property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIDatePropertyType }
     * 
     * 
     */
    public List<CIDatePropertyType> getDate() {
        if (date == null) {
            date = new ArrayList<CIDatePropertyType>();
        }
        return this.date;
    }

    /**
     * Gets the value of the responsibleParty property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the responsibleParty property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResponsibleParty().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getResponsibleParty() {
        if (responsibleParty == null) {
            responsibleParty = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.responsibleParty;
    }

    /**
     * Gets the value of the localisedString property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the localisedString property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocalisedString().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LocalisedCharacterStringPropertyType }
     * 
     * 
     */
    public List<LocalisedCharacterStringPropertyType> getLocalisedString() {
        if (localisedString == null) {
            localisedString = new ArrayList<LocalisedCharacterStringPropertyType>();
        }
        return this.localisedString;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            PTLocalePropertyType theLocale;
            theLocale = this.getLocale();
            strategy.appendField(locator, this, "locale", buffer, theLocale);
        }
        {
            List<CIDatePropertyType> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            List<CIResponsiblePartyPropertyType> theResponsibleParty;
            theResponsibleParty = (((this.responsibleParty!= null)&&(!this.responsibleParty.isEmpty()))?this.getResponsibleParty():null);
            strategy.appendField(locator, this, "responsibleParty", buffer, theResponsibleParty);
        }
        {
            List<LocalisedCharacterStringPropertyType> theLocalisedString;
            theLocalisedString = (((this.localisedString!= null)&&(!this.localisedString.isEmpty()))?this.getLocalisedString():null);
            strategy.appendField(locator, this, "localisedString", buffer, theLocalisedString);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PTLocaleContainerType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PTLocaleContainerType that = ((PTLocaleContainerType) object);
        {
            CharacterStringPropertyType lhsDescription;
            lhsDescription = this.getDescription();
            CharacterStringPropertyType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            PTLocalePropertyType lhsLocale;
            lhsLocale = this.getLocale();
            PTLocalePropertyType rhsLocale;
            rhsLocale = that.getLocale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locale", lhsLocale), LocatorUtils.property(thatLocator, "locale", rhsLocale), lhsLocale, rhsLocale)) {
                return false;
            }
        }
        {
            List<CIDatePropertyType> lhsDate;
            lhsDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            List<CIDatePropertyType> rhsDate;
            rhsDate = (((that.date!= null)&&(!that.date.isEmpty()))?that.getDate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsResponsibleParty;
            lhsResponsibleParty = (((this.responsibleParty!= null)&&(!this.responsibleParty.isEmpty()))?this.getResponsibleParty():null);
            List<CIResponsiblePartyPropertyType> rhsResponsibleParty;
            rhsResponsibleParty = (((that.responsibleParty!= null)&&(!that.responsibleParty.isEmpty()))?that.getResponsibleParty():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "responsibleParty", lhsResponsibleParty), LocatorUtils.property(thatLocator, "responsibleParty", rhsResponsibleParty), lhsResponsibleParty, rhsResponsibleParty)) {
                return false;
            }
        }
        {
            List<LocalisedCharacterStringPropertyType> lhsLocalisedString;
            lhsLocalisedString = (((this.localisedString!= null)&&(!this.localisedString.isEmpty()))?this.getLocalisedString():null);
            List<LocalisedCharacterStringPropertyType> rhsLocalisedString;
            rhsLocalisedString = (((that.localisedString!= null)&&(!that.localisedString.isEmpty()))?that.getLocalisedString():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "localisedString", lhsLocalisedString), LocatorUtils.property(thatLocator, "localisedString", rhsLocalisedString), lhsLocalisedString, rhsLocalisedString)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            PTLocalePropertyType theLocale;
            theLocale = this.getLocale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locale", theLocale), currentHashCode, theLocale);
        }
        {
            List<CIDatePropertyType> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            List<CIResponsiblePartyPropertyType> theResponsibleParty;
            theResponsibleParty = (((this.responsibleParty!= null)&&(!this.responsibleParty.isEmpty()))?this.getResponsibleParty():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "responsibleParty", theResponsibleParty), currentHashCode, theResponsibleParty);
        }
        {
            List<LocalisedCharacterStringPropertyType> theLocalisedString;
            theLocalisedString = (((this.localisedString!= null)&&(!this.localisedString.isEmpty()))?this.getLocalisedString():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "localisedString", theLocalisedString), currentHashCode, theLocalisedString);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PTLocaleContainerType) {
            final PTLocaleContainerType copy = ((PTLocaleContainerType) draftCopy);
            if (this.description!= null) {
                CharacterStringPropertyType sourceDescription;
                sourceDescription = this.getDescription();
                CharacterStringPropertyType copyDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.locale!= null) {
                PTLocalePropertyType sourceLocale;
                sourceLocale = this.getLocale();
                PTLocalePropertyType copyLocale = ((PTLocalePropertyType) strategy.copy(LocatorUtils.property(locator, "locale", sourceLocale), sourceLocale));
                copy.setLocale(copyLocale);
            } else {
                copy.locale = null;
            }
            if ((this.date!= null)&&(!this.date.isEmpty())) {
                List<CIDatePropertyType> sourceDate;
                sourceDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                @SuppressWarnings("unchecked")
                List<CIDatePropertyType> copyDate = ((List<CIDatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                copy.date = null;
                if (copyDate!= null) {
                    List<CIDatePropertyType> uniqueDatel = copy.getDate();
                    uniqueDatel.addAll(copyDate);
                }
            } else {
                copy.date = null;
            }
            if ((this.responsibleParty!= null)&&(!this.responsibleParty.isEmpty())) {
                List<CIResponsiblePartyPropertyType> sourceResponsibleParty;
                sourceResponsibleParty = (((this.responsibleParty!= null)&&(!this.responsibleParty.isEmpty()))?this.getResponsibleParty():null);
                @SuppressWarnings("unchecked")
                List<CIResponsiblePartyPropertyType> copyResponsibleParty = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "responsibleParty", sourceResponsibleParty), sourceResponsibleParty));
                copy.responsibleParty = null;
                if (copyResponsibleParty!= null) {
                    List<CIResponsiblePartyPropertyType> uniqueResponsiblePartyl = copy.getResponsibleParty();
                    uniqueResponsiblePartyl.addAll(copyResponsibleParty);
                }
            } else {
                copy.responsibleParty = null;
            }
            if ((this.localisedString!= null)&&(!this.localisedString.isEmpty())) {
                List<LocalisedCharacterStringPropertyType> sourceLocalisedString;
                sourceLocalisedString = (((this.localisedString!= null)&&(!this.localisedString.isEmpty()))?this.getLocalisedString():null);
                @SuppressWarnings("unchecked")
                List<LocalisedCharacterStringPropertyType> copyLocalisedString = ((List<LocalisedCharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "localisedString", sourceLocalisedString), sourceLocalisedString));
                copy.localisedString = null;
                if (copyLocalisedString!= null) {
                    List<LocalisedCharacterStringPropertyType> uniqueLocalisedStringl = copy.getLocalisedString();
                    uniqueLocalisedStringl.addAll(copyLocalisedString);
                }
            } else {
                copy.localisedString = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PTLocaleContainerType();
    }

}
