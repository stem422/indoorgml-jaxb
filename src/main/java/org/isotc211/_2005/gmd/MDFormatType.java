//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Description of the form of the data to be distributed
 * 
 * <p>Java class for MD_Format_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Format_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="version" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="amendmentNumber" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="specification" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="fileDecompressionTechnique" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="formatDistributor" type="{http://www.isotc211.org/2005/gmd}MD_Distributor_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Format_Type", propOrder = {
    "name",
    "version",
    "amendmentNumber",
    "specification",
    "fileDecompressionTechnique",
    "formatDistributor"
})
public class MDFormatType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected CharacterStringPropertyType name;
    @XmlElement(required = true)
    protected CharacterStringPropertyType version;
    protected CharacterStringPropertyType amendmentNumber;
    protected CharacterStringPropertyType specification;
    protected CharacterStringPropertyType fileDecompressionTechnique;
    protected List<MDDistributorPropertyType> formatDistributor;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setName(CharacterStringPropertyType value) {
        this.name = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setVersion(CharacterStringPropertyType value) {
        this.version = value;
    }

    /**
     * Gets the value of the amendmentNumber property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getAmendmentNumber() {
        return amendmentNumber;
    }

    /**
     * Sets the value of the amendmentNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setAmendmentNumber(CharacterStringPropertyType value) {
        this.amendmentNumber = value;
    }

    /**
     * Gets the value of the specification property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getSpecification() {
        return specification;
    }

    /**
     * Sets the value of the specification property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setSpecification(CharacterStringPropertyType value) {
        this.specification = value;
    }

    /**
     * Gets the value of the fileDecompressionTechnique property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getFileDecompressionTechnique() {
        return fileDecompressionTechnique;
    }

    /**
     * Sets the value of the fileDecompressionTechnique property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setFileDecompressionTechnique(CharacterStringPropertyType value) {
        this.fileDecompressionTechnique = value;
    }

    /**
     * Gets the value of the formatDistributor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the formatDistributor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFormatDistributor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDDistributorPropertyType }
     * 
     * 
     */
    public List<MDDistributorPropertyType> getFormatDistributor() {
        if (formatDistributor == null) {
            formatDistributor = new ArrayList<MDDistributorPropertyType>();
        }
        return this.formatDistributor;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            CharacterStringPropertyType theVersion;
            theVersion = this.getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion);
        }
        {
            CharacterStringPropertyType theAmendmentNumber;
            theAmendmentNumber = this.getAmendmentNumber();
            strategy.appendField(locator, this, "amendmentNumber", buffer, theAmendmentNumber);
        }
        {
            CharacterStringPropertyType theSpecification;
            theSpecification = this.getSpecification();
            strategy.appendField(locator, this, "specification", buffer, theSpecification);
        }
        {
            CharacterStringPropertyType theFileDecompressionTechnique;
            theFileDecompressionTechnique = this.getFileDecompressionTechnique();
            strategy.appendField(locator, this, "fileDecompressionTechnique", buffer, theFileDecompressionTechnique);
        }
        {
            List<MDDistributorPropertyType> theFormatDistributor;
            theFormatDistributor = (((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty()))?this.getFormatDistributor():null);
            strategy.appendField(locator, this, "formatDistributor", buffer, theFormatDistributor);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDFormatType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDFormatType that = ((MDFormatType) object);
        {
            CharacterStringPropertyType lhsName;
            lhsName = this.getName();
            CharacterStringPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsVersion;
            lhsVersion = this.getVersion();
            CharacterStringPropertyType rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsAmendmentNumber;
            lhsAmendmentNumber = this.getAmendmentNumber();
            CharacterStringPropertyType rhsAmendmentNumber;
            rhsAmendmentNumber = that.getAmendmentNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "amendmentNumber", lhsAmendmentNumber), LocatorUtils.property(thatLocator, "amendmentNumber", rhsAmendmentNumber), lhsAmendmentNumber, rhsAmendmentNumber)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsSpecification;
            lhsSpecification = this.getSpecification();
            CharacterStringPropertyType rhsSpecification;
            rhsSpecification = that.getSpecification();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specification", lhsSpecification), LocatorUtils.property(thatLocator, "specification", rhsSpecification), lhsSpecification, rhsSpecification)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsFileDecompressionTechnique;
            lhsFileDecompressionTechnique = this.getFileDecompressionTechnique();
            CharacterStringPropertyType rhsFileDecompressionTechnique;
            rhsFileDecompressionTechnique = that.getFileDecompressionTechnique();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileDecompressionTechnique", lhsFileDecompressionTechnique), LocatorUtils.property(thatLocator, "fileDecompressionTechnique", rhsFileDecompressionTechnique), lhsFileDecompressionTechnique, rhsFileDecompressionTechnique)) {
                return false;
            }
        }
        {
            List<MDDistributorPropertyType> lhsFormatDistributor;
            lhsFormatDistributor = (((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty()))?this.getFormatDistributor():null);
            List<MDDistributorPropertyType> rhsFormatDistributor;
            rhsFormatDistributor = (((that.formatDistributor!= null)&&(!that.formatDistributor.isEmpty()))?that.getFormatDistributor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "formatDistributor", lhsFormatDistributor), LocatorUtils.property(thatLocator, "formatDistributor", rhsFormatDistributor), lhsFormatDistributor, rhsFormatDistributor)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            CharacterStringPropertyType theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            CharacterStringPropertyType theAmendmentNumber;
            theAmendmentNumber = this.getAmendmentNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "amendmentNumber", theAmendmentNumber), currentHashCode, theAmendmentNumber);
        }
        {
            CharacterStringPropertyType theSpecification;
            theSpecification = this.getSpecification();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specification", theSpecification), currentHashCode, theSpecification);
        }
        {
            CharacterStringPropertyType theFileDecompressionTechnique;
            theFileDecompressionTechnique = this.getFileDecompressionTechnique();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileDecompressionTechnique", theFileDecompressionTechnique), currentHashCode, theFileDecompressionTechnique);
        }
        {
            List<MDDistributorPropertyType> theFormatDistributor;
            theFormatDistributor = (((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty()))?this.getFormatDistributor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formatDistributor", theFormatDistributor), currentHashCode, theFormatDistributor);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDFormatType) {
            final MDFormatType copy = ((MDFormatType) draftCopy);
            if (this.name!= null) {
                CharacterStringPropertyType sourceName;
                sourceName = this.getName();
                CharacterStringPropertyType copyName = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.version!= null) {
                CharacterStringPropertyType sourceVersion;
                sourceVersion = this.getVersion();
                CharacterStringPropertyType copyVersion = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion), sourceVersion));
                copy.setVersion(copyVersion);
            } else {
                copy.version = null;
            }
            if (this.amendmentNumber!= null) {
                CharacterStringPropertyType sourceAmendmentNumber;
                sourceAmendmentNumber = this.getAmendmentNumber();
                CharacterStringPropertyType copyAmendmentNumber = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "amendmentNumber", sourceAmendmentNumber), sourceAmendmentNumber));
                copy.setAmendmentNumber(copyAmendmentNumber);
            } else {
                copy.amendmentNumber = null;
            }
            if (this.specification!= null) {
                CharacterStringPropertyType sourceSpecification;
                sourceSpecification = this.getSpecification();
                CharacterStringPropertyType copySpecification = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "specification", sourceSpecification), sourceSpecification));
                copy.setSpecification(copySpecification);
            } else {
                copy.specification = null;
            }
            if (this.fileDecompressionTechnique!= null) {
                CharacterStringPropertyType sourceFileDecompressionTechnique;
                sourceFileDecompressionTechnique = this.getFileDecompressionTechnique();
                CharacterStringPropertyType copyFileDecompressionTechnique = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "fileDecompressionTechnique", sourceFileDecompressionTechnique), sourceFileDecompressionTechnique));
                copy.setFileDecompressionTechnique(copyFileDecompressionTechnique);
            } else {
                copy.fileDecompressionTechnique = null;
            }
            if ((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty())) {
                List<MDDistributorPropertyType> sourceFormatDistributor;
                sourceFormatDistributor = (((this.formatDistributor!= null)&&(!this.formatDistributor.isEmpty()))?this.getFormatDistributor():null);
                @SuppressWarnings("unchecked")
                List<MDDistributorPropertyType> copyFormatDistributor = ((List<MDDistributorPropertyType> ) strategy.copy(LocatorUtils.property(locator, "formatDistributor", sourceFormatDistributor), sourceFormatDistributor));
                copy.formatDistributor = null;
                if (copyFormatDistributor!= null) {
                    List<MDDistributorPropertyType> uniqueFormatDistributorl = copy.getFormatDistributor();
                    uniqueFormatDistributorl.addAll(copyFormatDistributor);
                }
            } else {
                copy.formatDistributor = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDFormatType();
    }

}
