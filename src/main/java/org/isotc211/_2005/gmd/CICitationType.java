//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.DatePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Standardized resource reference
 * 
 * <p>Java class for CI_Citation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CI_Citation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="title" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="alternateTitle" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="date" type="{http://www.isotc211.org/2005/gmd}CI_Date_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="edition" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="editionDate" type="{http://www.isotc211.org/2005/gco}Date_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="citedResponsibleParty" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="presentationForm" type="{http://www.isotc211.org/2005/gmd}CI_PresentationFormCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="series" type="{http://www.isotc211.org/2005/gmd}CI_Series_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="otherCitationDetails" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="collectiveTitle" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="ISBN" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="ISSN" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CI_Citation_Type", propOrder = {
    "title",
    "alternateTitle",
    "date",
    "edition",
    "editionDate",
    "identifier",
    "citedResponsibleParty",
    "presentationForm",
    "series",
    "otherCitationDetails",
    "collectiveTitle",
    "isbn",
    "issn"
})
public class CICitationType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected CharacterStringPropertyType title;
    protected List<CharacterStringPropertyType> alternateTitle;
    @XmlElement(required = true)
    protected List<CIDatePropertyType> date;
    protected CharacterStringPropertyType edition;
    protected DatePropertyType editionDate;
    protected List<MDIdentifierPropertyType> identifier;
    protected List<CIResponsiblePartyPropertyType> citedResponsibleParty;
    protected List<CIPresentationFormCodePropertyType> presentationForm;
    protected CISeriesPropertyType series;
    protected CharacterStringPropertyType otherCitationDetails;
    protected CharacterStringPropertyType collectiveTitle;
    @XmlElement(name = "ISBN")
    protected CharacterStringPropertyType isbn;
    @XmlElement(name = "ISSN")
    protected CharacterStringPropertyType issn;

    /**
     * Gets the value of the title property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getTitle() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setTitle(CharacterStringPropertyType value) {
        this.title = value;
    }

    /**
     * Gets the value of the alternateTitle property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alternateTitle property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlternateTitle().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getAlternateTitle() {
        if (alternateTitle == null) {
            alternateTitle = new ArrayList<CharacterStringPropertyType>();
        }
        return this.alternateTitle;
    }

    /**
     * Gets the value of the date property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the date property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIDatePropertyType }
     * 
     * 
     */
    public List<CIDatePropertyType> getDate() {
        if (date == null) {
            date = new ArrayList<CIDatePropertyType>();
        }
        return this.date;
    }

    /**
     * Gets the value of the edition property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getEdition() {
        return edition;
    }

    /**
     * Sets the value of the edition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setEdition(CharacterStringPropertyType value) {
        this.edition = value;
    }

    /**
     * Gets the value of the editionDate property.
     * 
     * @return
     *     possible object is
     *     {@link DatePropertyType }
     *     
     */
    public DatePropertyType getEditionDate() {
        return editionDate;
    }

    /**
     * Sets the value of the editionDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DatePropertyType }
     *     
     */
    public void setEditionDate(DatePropertyType value) {
        this.editionDate = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDIdentifierPropertyType }
     * 
     * 
     */
    public List<MDIdentifierPropertyType> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<MDIdentifierPropertyType>();
        }
        return this.identifier;
    }

    /**
     * Gets the value of the citedResponsibleParty property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the citedResponsibleParty property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCitedResponsibleParty().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getCitedResponsibleParty() {
        if (citedResponsibleParty == null) {
            citedResponsibleParty = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.citedResponsibleParty;
    }

    /**
     * Gets the value of the presentationForm property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the presentationForm property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPresentationForm().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIPresentationFormCodePropertyType }
     * 
     * 
     */
    public List<CIPresentationFormCodePropertyType> getPresentationForm() {
        if (presentationForm == null) {
            presentationForm = new ArrayList<CIPresentationFormCodePropertyType>();
        }
        return this.presentationForm;
    }

    /**
     * Gets the value of the series property.
     * 
     * @return
     *     possible object is
     *     {@link CISeriesPropertyType }
     *     
     */
    public CISeriesPropertyType getSeries() {
        return series;
    }

    /**
     * Sets the value of the series property.
     * 
     * @param value
     *     allowed object is
     *     {@link CISeriesPropertyType }
     *     
     */
    public void setSeries(CISeriesPropertyType value) {
        this.series = value;
    }

    /**
     * Gets the value of the otherCitationDetails property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getOtherCitationDetails() {
        return otherCitationDetails;
    }

    /**
     * Sets the value of the otherCitationDetails property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setOtherCitationDetails(CharacterStringPropertyType value) {
        this.otherCitationDetails = value;
    }

    /**
     * Gets the value of the collectiveTitle property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getCollectiveTitle() {
        return collectiveTitle;
    }

    /**
     * Sets the value of the collectiveTitle property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setCollectiveTitle(CharacterStringPropertyType value) {
        this.collectiveTitle = value;
    }

    /**
     * Gets the value of the isbn property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getISBN() {
        return isbn;
    }

    /**
     * Sets the value of the isbn property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setISBN(CharacterStringPropertyType value) {
        this.isbn = value;
    }

    /**
     * Gets the value of the issn property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getISSN() {
        return issn;
    }

    /**
     * Sets the value of the issn property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setISSN(CharacterStringPropertyType value) {
        this.issn = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theTitle;
            theTitle = this.getTitle();
            strategy.appendField(locator, this, "title", buffer, theTitle);
        }
        {
            List<CharacterStringPropertyType> theAlternateTitle;
            theAlternateTitle = (((this.alternateTitle!= null)&&(!this.alternateTitle.isEmpty()))?this.getAlternateTitle():null);
            strategy.appendField(locator, this, "alternateTitle", buffer, theAlternateTitle);
        }
        {
            List<CIDatePropertyType> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            CharacterStringPropertyType theEdition;
            theEdition = this.getEdition();
            strategy.appendField(locator, this, "edition", buffer, theEdition);
        }
        {
            DatePropertyType theEditionDate;
            theEditionDate = this.getEditionDate();
            strategy.appendField(locator, this, "editionDate", buffer, theEditionDate);
        }
        {
            List<MDIdentifierPropertyType> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            List<CIResponsiblePartyPropertyType> theCitedResponsibleParty;
            theCitedResponsibleParty = (((this.citedResponsibleParty!= null)&&(!this.citedResponsibleParty.isEmpty()))?this.getCitedResponsibleParty():null);
            strategy.appendField(locator, this, "citedResponsibleParty", buffer, theCitedResponsibleParty);
        }
        {
            List<CIPresentationFormCodePropertyType> thePresentationForm;
            thePresentationForm = (((this.presentationForm!= null)&&(!this.presentationForm.isEmpty()))?this.getPresentationForm():null);
            strategy.appendField(locator, this, "presentationForm", buffer, thePresentationForm);
        }
        {
            CISeriesPropertyType theSeries;
            theSeries = this.getSeries();
            strategy.appendField(locator, this, "series", buffer, theSeries);
        }
        {
            CharacterStringPropertyType theOtherCitationDetails;
            theOtherCitationDetails = this.getOtherCitationDetails();
            strategy.appendField(locator, this, "otherCitationDetails", buffer, theOtherCitationDetails);
        }
        {
            CharacterStringPropertyType theCollectiveTitle;
            theCollectiveTitle = this.getCollectiveTitle();
            strategy.appendField(locator, this, "collectiveTitle", buffer, theCollectiveTitle);
        }
        {
            CharacterStringPropertyType theISBN;
            theISBN = this.getISBN();
            strategy.appendField(locator, this, "isbn", buffer, theISBN);
        }
        {
            CharacterStringPropertyType theISSN;
            theISSN = this.getISSN();
            strategy.appendField(locator, this, "issn", buffer, theISSN);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CICitationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CICitationType that = ((CICitationType) object);
        {
            CharacterStringPropertyType lhsTitle;
            lhsTitle = this.getTitle();
            CharacterStringPropertyType rhsTitle;
            rhsTitle = that.getTitle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "title", lhsTitle), LocatorUtils.property(thatLocator, "title", rhsTitle), lhsTitle, rhsTitle)) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsAlternateTitle;
            lhsAlternateTitle = (((this.alternateTitle!= null)&&(!this.alternateTitle.isEmpty()))?this.getAlternateTitle():null);
            List<CharacterStringPropertyType> rhsAlternateTitle;
            rhsAlternateTitle = (((that.alternateTitle!= null)&&(!that.alternateTitle.isEmpty()))?that.getAlternateTitle():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alternateTitle", lhsAlternateTitle), LocatorUtils.property(thatLocator, "alternateTitle", rhsAlternateTitle), lhsAlternateTitle, rhsAlternateTitle)) {
                return false;
            }
        }
        {
            List<CIDatePropertyType> lhsDate;
            lhsDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            List<CIDatePropertyType> rhsDate;
            rhsDate = (((that.date!= null)&&(!that.date.isEmpty()))?that.getDate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsEdition;
            lhsEdition = this.getEdition();
            CharacterStringPropertyType rhsEdition;
            rhsEdition = that.getEdition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "edition", lhsEdition), LocatorUtils.property(thatLocator, "edition", rhsEdition), lhsEdition, rhsEdition)) {
                return false;
            }
        }
        {
            DatePropertyType lhsEditionDate;
            lhsEditionDate = this.getEditionDate();
            DatePropertyType rhsEditionDate;
            rhsEditionDate = that.getEditionDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "editionDate", lhsEditionDate), LocatorUtils.property(thatLocator, "editionDate", rhsEditionDate), lhsEditionDate, rhsEditionDate)) {
                return false;
            }
        }
        {
            List<MDIdentifierPropertyType> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<MDIdentifierPropertyType> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsCitedResponsibleParty;
            lhsCitedResponsibleParty = (((this.citedResponsibleParty!= null)&&(!this.citedResponsibleParty.isEmpty()))?this.getCitedResponsibleParty():null);
            List<CIResponsiblePartyPropertyType> rhsCitedResponsibleParty;
            rhsCitedResponsibleParty = (((that.citedResponsibleParty!= null)&&(!that.citedResponsibleParty.isEmpty()))?that.getCitedResponsibleParty():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citedResponsibleParty", lhsCitedResponsibleParty), LocatorUtils.property(thatLocator, "citedResponsibleParty", rhsCitedResponsibleParty), lhsCitedResponsibleParty, rhsCitedResponsibleParty)) {
                return false;
            }
        }
        {
            List<CIPresentationFormCodePropertyType> lhsPresentationForm;
            lhsPresentationForm = (((this.presentationForm!= null)&&(!this.presentationForm.isEmpty()))?this.getPresentationForm():null);
            List<CIPresentationFormCodePropertyType> rhsPresentationForm;
            rhsPresentationForm = (((that.presentationForm!= null)&&(!that.presentationForm.isEmpty()))?that.getPresentationForm():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "presentationForm", lhsPresentationForm), LocatorUtils.property(thatLocator, "presentationForm", rhsPresentationForm), lhsPresentationForm, rhsPresentationForm)) {
                return false;
            }
        }
        {
            CISeriesPropertyType lhsSeries;
            lhsSeries = this.getSeries();
            CISeriesPropertyType rhsSeries;
            rhsSeries = that.getSeries();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "series", lhsSeries), LocatorUtils.property(thatLocator, "series", rhsSeries), lhsSeries, rhsSeries)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsOtherCitationDetails;
            lhsOtherCitationDetails = this.getOtherCitationDetails();
            CharacterStringPropertyType rhsOtherCitationDetails;
            rhsOtherCitationDetails = that.getOtherCitationDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherCitationDetails", lhsOtherCitationDetails), LocatorUtils.property(thatLocator, "otherCitationDetails", rhsOtherCitationDetails), lhsOtherCitationDetails, rhsOtherCitationDetails)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsCollectiveTitle;
            lhsCollectiveTitle = this.getCollectiveTitle();
            CharacterStringPropertyType rhsCollectiveTitle;
            rhsCollectiveTitle = that.getCollectiveTitle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "collectiveTitle", lhsCollectiveTitle), LocatorUtils.property(thatLocator, "collectiveTitle", rhsCollectiveTitle), lhsCollectiveTitle, rhsCollectiveTitle)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsISBN;
            lhsISBN = this.getISBN();
            CharacterStringPropertyType rhsISBN;
            rhsISBN = that.getISBN();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isbn", lhsISBN), LocatorUtils.property(thatLocator, "isbn", rhsISBN), lhsISBN, rhsISBN)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsISSN;
            lhsISSN = this.getISSN();
            CharacterStringPropertyType rhsISSN;
            rhsISSN = that.getISSN();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issn", lhsISSN), LocatorUtils.property(thatLocator, "issn", rhsISSN), lhsISSN, rhsISSN)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theTitle;
            theTitle = this.getTitle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "title", theTitle), currentHashCode, theTitle);
        }
        {
            List<CharacterStringPropertyType> theAlternateTitle;
            theAlternateTitle = (((this.alternateTitle!= null)&&(!this.alternateTitle.isEmpty()))?this.getAlternateTitle():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alternateTitle", theAlternateTitle), currentHashCode, theAlternateTitle);
        }
        {
            List<CIDatePropertyType> theDate;
            theDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            CharacterStringPropertyType theEdition;
            theEdition = this.getEdition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "edition", theEdition), currentHashCode, theEdition);
        }
        {
            DatePropertyType theEditionDate;
            theEditionDate = this.getEditionDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "editionDate", theEditionDate), currentHashCode, theEditionDate);
        }
        {
            List<MDIdentifierPropertyType> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            List<CIResponsiblePartyPropertyType> theCitedResponsibleParty;
            theCitedResponsibleParty = (((this.citedResponsibleParty!= null)&&(!this.citedResponsibleParty.isEmpty()))?this.getCitedResponsibleParty():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citedResponsibleParty", theCitedResponsibleParty), currentHashCode, theCitedResponsibleParty);
        }
        {
            List<CIPresentationFormCodePropertyType> thePresentationForm;
            thePresentationForm = (((this.presentationForm!= null)&&(!this.presentationForm.isEmpty()))?this.getPresentationForm():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "presentationForm", thePresentationForm), currentHashCode, thePresentationForm);
        }
        {
            CISeriesPropertyType theSeries;
            theSeries = this.getSeries();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "series", theSeries), currentHashCode, theSeries);
        }
        {
            CharacterStringPropertyType theOtherCitationDetails;
            theOtherCitationDetails = this.getOtherCitationDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherCitationDetails", theOtherCitationDetails), currentHashCode, theOtherCitationDetails);
        }
        {
            CharacterStringPropertyType theCollectiveTitle;
            theCollectiveTitle = this.getCollectiveTitle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "collectiveTitle", theCollectiveTitle), currentHashCode, theCollectiveTitle);
        }
        {
            CharacterStringPropertyType theISBN;
            theISBN = this.getISBN();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isbn", theISBN), currentHashCode, theISBN);
        }
        {
            CharacterStringPropertyType theISSN;
            theISSN = this.getISSN();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issn", theISSN), currentHashCode, theISSN);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CICitationType) {
            final CICitationType copy = ((CICitationType) draftCopy);
            if (this.title!= null) {
                CharacterStringPropertyType sourceTitle;
                sourceTitle = this.getTitle();
                CharacterStringPropertyType copyTitle = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "title", sourceTitle), sourceTitle));
                copy.setTitle(copyTitle);
            } else {
                copy.title = null;
            }
            if ((this.alternateTitle!= null)&&(!this.alternateTitle.isEmpty())) {
                List<CharacterStringPropertyType> sourceAlternateTitle;
                sourceAlternateTitle = (((this.alternateTitle!= null)&&(!this.alternateTitle.isEmpty()))?this.getAlternateTitle():null);
                @SuppressWarnings("unchecked")
                List<CharacterStringPropertyType> copyAlternateTitle = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "alternateTitle", sourceAlternateTitle), sourceAlternateTitle));
                copy.alternateTitle = null;
                if (copyAlternateTitle!= null) {
                    List<CharacterStringPropertyType> uniqueAlternateTitlel = copy.getAlternateTitle();
                    uniqueAlternateTitlel.addAll(copyAlternateTitle);
                }
            } else {
                copy.alternateTitle = null;
            }
            if ((this.date!= null)&&(!this.date.isEmpty())) {
                List<CIDatePropertyType> sourceDate;
                sourceDate = (((this.date!= null)&&(!this.date.isEmpty()))?this.getDate():null);
                @SuppressWarnings("unchecked")
                List<CIDatePropertyType> copyDate = ((List<CIDatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "date", sourceDate), sourceDate));
                copy.date = null;
                if (copyDate!= null) {
                    List<CIDatePropertyType> uniqueDatel = copy.getDate();
                    uniqueDatel.addAll(copyDate);
                }
            } else {
                copy.date = null;
            }
            if (this.edition!= null) {
                CharacterStringPropertyType sourceEdition;
                sourceEdition = this.getEdition();
                CharacterStringPropertyType copyEdition = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "edition", sourceEdition), sourceEdition));
                copy.setEdition(copyEdition);
            } else {
                copy.edition = null;
            }
            if (this.editionDate!= null) {
                DatePropertyType sourceEditionDate;
                sourceEditionDate = this.getEditionDate();
                DatePropertyType copyEditionDate = ((DatePropertyType) strategy.copy(LocatorUtils.property(locator, "editionDate", sourceEditionDate), sourceEditionDate));
                copy.setEditionDate(copyEditionDate);
            } else {
                copy.editionDate = null;
            }
            if ((this.identifier!= null)&&(!this.identifier.isEmpty())) {
                List<MDIdentifierPropertyType> sourceIdentifier;
                sourceIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
                @SuppressWarnings("unchecked")
                List<MDIdentifierPropertyType> copyIdentifier = ((List<MDIdentifierPropertyType> ) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier));
                copy.identifier = null;
                if (copyIdentifier!= null) {
                    List<MDIdentifierPropertyType> uniqueIdentifierl = copy.getIdentifier();
                    uniqueIdentifierl.addAll(copyIdentifier);
                }
            } else {
                copy.identifier = null;
            }
            if ((this.citedResponsibleParty!= null)&&(!this.citedResponsibleParty.isEmpty())) {
                List<CIResponsiblePartyPropertyType> sourceCitedResponsibleParty;
                sourceCitedResponsibleParty = (((this.citedResponsibleParty!= null)&&(!this.citedResponsibleParty.isEmpty()))?this.getCitedResponsibleParty():null);
                @SuppressWarnings("unchecked")
                List<CIResponsiblePartyPropertyType> copyCitedResponsibleParty = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "citedResponsibleParty", sourceCitedResponsibleParty), sourceCitedResponsibleParty));
                copy.citedResponsibleParty = null;
                if (copyCitedResponsibleParty!= null) {
                    List<CIResponsiblePartyPropertyType> uniqueCitedResponsiblePartyl = copy.getCitedResponsibleParty();
                    uniqueCitedResponsiblePartyl.addAll(copyCitedResponsibleParty);
                }
            } else {
                copy.citedResponsibleParty = null;
            }
            if ((this.presentationForm!= null)&&(!this.presentationForm.isEmpty())) {
                List<CIPresentationFormCodePropertyType> sourcePresentationForm;
                sourcePresentationForm = (((this.presentationForm!= null)&&(!this.presentationForm.isEmpty()))?this.getPresentationForm():null);
                @SuppressWarnings("unchecked")
                List<CIPresentationFormCodePropertyType> copyPresentationForm = ((List<CIPresentationFormCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "presentationForm", sourcePresentationForm), sourcePresentationForm));
                copy.presentationForm = null;
                if (copyPresentationForm!= null) {
                    List<CIPresentationFormCodePropertyType> uniquePresentationForml = copy.getPresentationForm();
                    uniquePresentationForml.addAll(copyPresentationForm);
                }
            } else {
                copy.presentationForm = null;
            }
            if (this.series!= null) {
                CISeriesPropertyType sourceSeries;
                sourceSeries = this.getSeries();
                CISeriesPropertyType copySeries = ((CISeriesPropertyType) strategy.copy(LocatorUtils.property(locator, "series", sourceSeries), sourceSeries));
                copy.setSeries(copySeries);
            } else {
                copy.series = null;
            }
            if (this.otherCitationDetails!= null) {
                CharacterStringPropertyType sourceOtherCitationDetails;
                sourceOtherCitationDetails = this.getOtherCitationDetails();
                CharacterStringPropertyType copyOtherCitationDetails = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "otherCitationDetails", sourceOtherCitationDetails), sourceOtherCitationDetails));
                copy.setOtherCitationDetails(copyOtherCitationDetails);
            } else {
                copy.otherCitationDetails = null;
            }
            if (this.collectiveTitle!= null) {
                CharacterStringPropertyType sourceCollectiveTitle;
                sourceCollectiveTitle = this.getCollectiveTitle();
                CharacterStringPropertyType copyCollectiveTitle = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "collectiveTitle", sourceCollectiveTitle), sourceCollectiveTitle));
                copy.setCollectiveTitle(copyCollectiveTitle);
            } else {
                copy.collectiveTitle = null;
            }
            if (this.isbn!= null) {
                CharacterStringPropertyType sourceISBN;
                sourceISBN = this.getISBN();
                CharacterStringPropertyType copyISBN = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "isbn", sourceISBN), sourceISBN));
                copy.setISBN(copyISBN);
            } else {
                copy.isbn = null;
            }
            if (this.issn!= null) {
                CharacterStringPropertyType sourceISSN;
                sourceISSN = this.getISSN();
                CharacterStringPropertyType copyISSN = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "issn", sourceISSN), sourceISSN));
                copy.setISSN(copyISSN);
            } else {
                copy.issn = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CICitationType();
    }

}
