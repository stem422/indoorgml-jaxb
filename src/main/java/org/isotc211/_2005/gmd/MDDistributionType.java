//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the distributor of and options for obtaining the dataset
 * 
 * <p>Java class for MD_Distribution_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_Distribution_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="distributionFormat" type="{http://www.isotc211.org/2005/gmd}MD_Format_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="distributor" type="{http://www.isotc211.org/2005/gmd}MD_Distributor_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="transferOptions" type="{http://www.isotc211.org/2005/gmd}MD_DigitalTransferOptions_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_Distribution_Type", propOrder = {
    "distributionFormat",
    "distributor",
    "transferOptions"
})
public class MDDistributionType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<MDFormatPropertyType> distributionFormat;
    protected List<MDDistributorPropertyType> distributor;
    protected List<MDDigitalTransferOptionsPropertyType> transferOptions;

    /**
     * Gets the value of the distributionFormat property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the distributionFormat property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDistributionFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDFormatPropertyType }
     * 
     * 
     */
    public List<MDFormatPropertyType> getDistributionFormat() {
        if (distributionFormat == null) {
            distributionFormat = new ArrayList<MDFormatPropertyType>();
        }
        return this.distributionFormat;
    }

    /**
     * Gets the value of the distributor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the distributor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDistributor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDDistributorPropertyType }
     * 
     * 
     */
    public List<MDDistributorPropertyType> getDistributor() {
        if (distributor == null) {
            distributor = new ArrayList<MDDistributorPropertyType>();
        }
        return this.distributor;
    }

    /**
     * Gets the value of the transferOptions property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transferOptions property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransferOptions().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDDigitalTransferOptionsPropertyType }
     * 
     * 
     */
    public List<MDDigitalTransferOptionsPropertyType> getTransferOptions() {
        if (transferOptions == null) {
            transferOptions = new ArrayList<MDDigitalTransferOptionsPropertyType>();
        }
        return this.transferOptions;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MDFormatPropertyType> theDistributionFormat;
            theDistributionFormat = (((this.distributionFormat!= null)&&(!this.distributionFormat.isEmpty()))?this.getDistributionFormat():null);
            strategy.appendField(locator, this, "distributionFormat", buffer, theDistributionFormat);
        }
        {
            List<MDDistributorPropertyType> theDistributor;
            theDistributor = (((this.distributor!= null)&&(!this.distributor.isEmpty()))?this.getDistributor():null);
            strategy.appendField(locator, this, "distributor", buffer, theDistributor);
        }
        {
            List<MDDigitalTransferOptionsPropertyType> theTransferOptions;
            theTransferOptions = (((this.transferOptions!= null)&&(!this.transferOptions.isEmpty()))?this.getTransferOptions():null);
            strategy.appendField(locator, this, "transferOptions", buffer, theTransferOptions);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDDistributionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDDistributionType that = ((MDDistributionType) object);
        {
            List<MDFormatPropertyType> lhsDistributionFormat;
            lhsDistributionFormat = (((this.distributionFormat!= null)&&(!this.distributionFormat.isEmpty()))?this.getDistributionFormat():null);
            List<MDFormatPropertyType> rhsDistributionFormat;
            rhsDistributionFormat = (((that.distributionFormat!= null)&&(!that.distributionFormat.isEmpty()))?that.getDistributionFormat():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distributionFormat", lhsDistributionFormat), LocatorUtils.property(thatLocator, "distributionFormat", rhsDistributionFormat), lhsDistributionFormat, rhsDistributionFormat)) {
                return false;
            }
        }
        {
            List<MDDistributorPropertyType> lhsDistributor;
            lhsDistributor = (((this.distributor!= null)&&(!this.distributor.isEmpty()))?this.getDistributor():null);
            List<MDDistributorPropertyType> rhsDistributor;
            rhsDistributor = (((that.distributor!= null)&&(!that.distributor.isEmpty()))?that.getDistributor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distributor", lhsDistributor), LocatorUtils.property(thatLocator, "distributor", rhsDistributor), lhsDistributor, rhsDistributor)) {
                return false;
            }
        }
        {
            List<MDDigitalTransferOptionsPropertyType> lhsTransferOptions;
            lhsTransferOptions = (((this.transferOptions!= null)&&(!this.transferOptions.isEmpty()))?this.getTransferOptions():null);
            List<MDDigitalTransferOptionsPropertyType> rhsTransferOptions;
            rhsTransferOptions = (((that.transferOptions!= null)&&(!that.transferOptions.isEmpty()))?that.getTransferOptions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transferOptions", lhsTransferOptions), LocatorUtils.property(thatLocator, "transferOptions", rhsTransferOptions), lhsTransferOptions, rhsTransferOptions)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MDFormatPropertyType> theDistributionFormat;
            theDistributionFormat = (((this.distributionFormat!= null)&&(!this.distributionFormat.isEmpty()))?this.getDistributionFormat():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distributionFormat", theDistributionFormat), currentHashCode, theDistributionFormat);
        }
        {
            List<MDDistributorPropertyType> theDistributor;
            theDistributor = (((this.distributor!= null)&&(!this.distributor.isEmpty()))?this.getDistributor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distributor", theDistributor), currentHashCode, theDistributor);
        }
        {
            List<MDDigitalTransferOptionsPropertyType> theTransferOptions;
            theTransferOptions = (((this.transferOptions!= null)&&(!this.transferOptions.isEmpty()))?this.getTransferOptions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transferOptions", theTransferOptions), currentHashCode, theTransferOptions);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDDistributionType) {
            final MDDistributionType copy = ((MDDistributionType) draftCopy);
            if ((this.distributionFormat!= null)&&(!this.distributionFormat.isEmpty())) {
                List<MDFormatPropertyType> sourceDistributionFormat;
                sourceDistributionFormat = (((this.distributionFormat!= null)&&(!this.distributionFormat.isEmpty()))?this.getDistributionFormat():null);
                @SuppressWarnings("unchecked")
                List<MDFormatPropertyType> copyDistributionFormat = ((List<MDFormatPropertyType> ) strategy.copy(LocatorUtils.property(locator, "distributionFormat", sourceDistributionFormat), sourceDistributionFormat));
                copy.distributionFormat = null;
                if (copyDistributionFormat!= null) {
                    List<MDFormatPropertyType> uniqueDistributionFormatl = copy.getDistributionFormat();
                    uniqueDistributionFormatl.addAll(copyDistributionFormat);
                }
            } else {
                copy.distributionFormat = null;
            }
            if ((this.distributor!= null)&&(!this.distributor.isEmpty())) {
                List<MDDistributorPropertyType> sourceDistributor;
                sourceDistributor = (((this.distributor!= null)&&(!this.distributor.isEmpty()))?this.getDistributor():null);
                @SuppressWarnings("unchecked")
                List<MDDistributorPropertyType> copyDistributor = ((List<MDDistributorPropertyType> ) strategy.copy(LocatorUtils.property(locator, "distributor", sourceDistributor), sourceDistributor));
                copy.distributor = null;
                if (copyDistributor!= null) {
                    List<MDDistributorPropertyType> uniqueDistributorl = copy.getDistributor();
                    uniqueDistributorl.addAll(copyDistributor);
                }
            } else {
                copy.distributor = null;
            }
            if ((this.transferOptions!= null)&&(!this.transferOptions.isEmpty())) {
                List<MDDigitalTransferOptionsPropertyType> sourceTransferOptions;
                sourceTransferOptions = (((this.transferOptions!= null)&&(!this.transferOptions.isEmpty()))?this.getTransferOptions():null);
                @SuppressWarnings("unchecked")
                List<MDDigitalTransferOptionsPropertyType> copyTransferOptions = ((List<MDDigitalTransferOptionsPropertyType> ) strategy.copy(LocatorUtils.property(locator, "transferOptions", sourceTransferOptions), sourceTransferOptions));
                copy.transferOptions = null;
                if (copyTransferOptions!= null) {
                    List<MDDigitalTransferOptionsPropertyType> uniqueTransferOptionsl = copy.getTransferOptions();
                    uniqueTransferOptionsl.addAll(copyTransferOptions);
                }
            } else {
                copy.transferOptions = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDDistributionType();
    }

}
