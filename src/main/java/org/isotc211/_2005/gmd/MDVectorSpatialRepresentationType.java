//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about the vector spatial objects in the dataset
 * 
 * <p>Java class for MD_VectorSpatialRepresentation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_VectorSpatialRepresentation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}AbstractMD_SpatialRepresentation_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="topologyLevel" type="{http://www.isotc211.org/2005/gmd}MD_TopologyLevelCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="geometricObjects" type="{http://www.isotc211.org/2005/gmd}MD_GeometricObjects_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_VectorSpatialRepresentation_Type", propOrder = {
    "topologyLevel",
    "geometricObjects"
})
public class MDVectorSpatialRepresentationType
    extends AbstractMDSpatialRepresentationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MDTopologyLevelCodePropertyType topologyLevel;
    protected List<MDGeometricObjectsPropertyType> geometricObjects;

    /**
     * Gets the value of the topologyLevel property.
     * 
     * @return
     *     possible object is
     *     {@link MDTopologyLevelCodePropertyType }
     *     
     */
    public MDTopologyLevelCodePropertyType getTopologyLevel() {
        return topologyLevel;
    }

    /**
     * Sets the value of the topologyLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDTopologyLevelCodePropertyType }
     *     
     */
    public void setTopologyLevel(MDTopologyLevelCodePropertyType value) {
        this.topologyLevel = value;
    }

    /**
     * Gets the value of the geometricObjects property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the geometricObjects property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGeometricObjects().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDGeometricObjectsPropertyType }
     * 
     * 
     */
    public List<MDGeometricObjectsPropertyType> getGeometricObjects() {
        if (geometricObjects == null) {
            geometricObjects = new ArrayList<MDGeometricObjectsPropertyType>();
        }
        return this.geometricObjects;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDTopologyLevelCodePropertyType theTopologyLevel;
            theTopologyLevel = this.getTopologyLevel();
            strategy.appendField(locator, this, "topologyLevel", buffer, theTopologyLevel);
        }
        {
            List<MDGeometricObjectsPropertyType> theGeometricObjects;
            theGeometricObjects = (((this.geometricObjects!= null)&&(!this.geometricObjects.isEmpty()))?this.getGeometricObjects():null);
            strategy.appendField(locator, this, "geometricObjects", buffer, theGeometricObjects);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDVectorSpatialRepresentationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDVectorSpatialRepresentationType that = ((MDVectorSpatialRepresentationType) object);
        {
            MDTopologyLevelCodePropertyType lhsTopologyLevel;
            lhsTopologyLevel = this.getTopologyLevel();
            MDTopologyLevelCodePropertyType rhsTopologyLevel;
            rhsTopologyLevel = that.getTopologyLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "topologyLevel", lhsTopologyLevel), LocatorUtils.property(thatLocator, "topologyLevel", rhsTopologyLevel), lhsTopologyLevel, rhsTopologyLevel)) {
                return false;
            }
        }
        {
            List<MDGeometricObjectsPropertyType> lhsGeometricObjects;
            lhsGeometricObjects = (((this.geometricObjects!= null)&&(!this.geometricObjects.isEmpty()))?this.getGeometricObjects():null);
            List<MDGeometricObjectsPropertyType> rhsGeometricObjects;
            rhsGeometricObjects = (((that.geometricObjects!= null)&&(!that.geometricObjects.isEmpty()))?that.getGeometricObjects():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometricObjects", lhsGeometricObjects), LocatorUtils.property(thatLocator, "geometricObjects", rhsGeometricObjects), lhsGeometricObjects, rhsGeometricObjects)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDTopologyLevelCodePropertyType theTopologyLevel;
            theTopologyLevel = this.getTopologyLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "topologyLevel", theTopologyLevel), currentHashCode, theTopologyLevel);
        }
        {
            List<MDGeometricObjectsPropertyType> theGeometricObjects;
            theGeometricObjects = (((this.geometricObjects!= null)&&(!this.geometricObjects.isEmpty()))?this.getGeometricObjects():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometricObjects", theGeometricObjects), currentHashCode, theGeometricObjects);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDVectorSpatialRepresentationType) {
            final MDVectorSpatialRepresentationType copy = ((MDVectorSpatialRepresentationType) draftCopy);
            if (this.topologyLevel!= null) {
                MDTopologyLevelCodePropertyType sourceTopologyLevel;
                sourceTopologyLevel = this.getTopologyLevel();
                MDTopologyLevelCodePropertyType copyTopologyLevel = ((MDTopologyLevelCodePropertyType) strategy.copy(LocatorUtils.property(locator, "topologyLevel", sourceTopologyLevel), sourceTopologyLevel));
                copy.setTopologyLevel(copyTopologyLevel);
            } else {
                copy.topologyLevel = null;
            }
            if ((this.geometricObjects!= null)&&(!this.geometricObjects.isEmpty())) {
                List<MDGeometricObjectsPropertyType> sourceGeometricObjects;
                sourceGeometricObjects = (((this.geometricObjects!= null)&&(!this.geometricObjects.isEmpty()))?this.getGeometricObjects():null);
                @SuppressWarnings("unchecked")
                List<MDGeometricObjectsPropertyType> copyGeometricObjects = ((List<MDGeometricObjectsPropertyType> ) strategy.copy(LocatorUtils.property(locator, "geometricObjects", sourceGeometricObjects), sourceGeometricObjects));
                copy.geometricObjects = null;
                if (copyGeometricObjects!= null) {
                    List<MDGeometricObjectsPropertyType> uniqueGeometricObjectsl = copy.getGeometricObjects();
                    uniqueGeometricObjectsl.addAll(copyGeometricObjects);
                }
            } else {
                copy.geometricObjects = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDVectorSpatialRepresentationType();
    }

}
