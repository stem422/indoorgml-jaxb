//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.ObjectReferencePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Description of the class of information covered by the information
 * 
 * <p>Java class for MD_ScopeDescription_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_ScopeDescription_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="attributes" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="features" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="featureInstances" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="attributeInstances" type="{http://www.isotc211.org/2005/gco}ObjectReference_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="dataset" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="other" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_ScopeDescription_Type", propOrder = {
    "attributes",
    "features",
    "featureInstances",
    "attributeInstances",
    "dataset",
    "other"
})
public class MDScopeDescriptionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<ObjectReferencePropertyType> attributes;
    protected List<ObjectReferencePropertyType> features;
    protected List<ObjectReferencePropertyType> featureInstances;
    protected List<ObjectReferencePropertyType> attributeInstances;
    protected CharacterStringPropertyType dataset;
    protected CharacterStringPropertyType other;

    /**
     * Gets the value of the attributes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the attributes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAttributes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getAttributes() {
        if (attributes == null) {
            attributes = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.attributes;
    }

    /**
     * Gets the value of the features property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the features property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFeatures().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getFeatures() {
        if (features == null) {
            features = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.features;
    }

    /**
     * Gets the value of the featureInstances property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the featureInstances property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFeatureInstances().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getFeatureInstances() {
        if (featureInstances == null) {
            featureInstances = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.featureInstances;
    }

    /**
     * Gets the value of the attributeInstances property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the attributeInstances property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAttributeInstances().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ObjectReferencePropertyType }
     * 
     * 
     */
    public List<ObjectReferencePropertyType> getAttributeInstances() {
        if (attributeInstances == null) {
            attributeInstances = new ArrayList<ObjectReferencePropertyType>();
        }
        return this.attributeInstances;
    }

    /**
     * Gets the value of the dataset property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDataset() {
        return dataset;
    }

    /**
     * Sets the value of the dataset property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDataset(CharacterStringPropertyType value) {
        this.dataset = value;
    }

    /**
     * Gets the value of the other property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getOther() {
        return other;
    }

    /**
     * Sets the value of the other property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setOther(CharacterStringPropertyType value) {
        this.other = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<ObjectReferencePropertyType> theAttributes;
            theAttributes = (((this.attributes!= null)&&(!this.attributes.isEmpty()))?this.getAttributes():null);
            strategy.appendField(locator, this, "attributes", buffer, theAttributes);
        }
        {
            List<ObjectReferencePropertyType> theFeatures;
            theFeatures = (((this.features!= null)&&(!this.features.isEmpty()))?this.getFeatures():null);
            strategy.appendField(locator, this, "features", buffer, theFeatures);
        }
        {
            List<ObjectReferencePropertyType> theFeatureInstances;
            theFeatureInstances = (((this.featureInstances!= null)&&(!this.featureInstances.isEmpty()))?this.getFeatureInstances():null);
            strategy.appendField(locator, this, "featureInstances", buffer, theFeatureInstances);
        }
        {
            List<ObjectReferencePropertyType> theAttributeInstances;
            theAttributeInstances = (((this.attributeInstances!= null)&&(!this.attributeInstances.isEmpty()))?this.getAttributeInstances():null);
            strategy.appendField(locator, this, "attributeInstances", buffer, theAttributeInstances);
        }
        {
            CharacterStringPropertyType theDataset;
            theDataset = this.getDataset();
            strategy.appendField(locator, this, "dataset", buffer, theDataset);
        }
        {
            CharacterStringPropertyType theOther;
            theOther = this.getOther();
            strategy.appendField(locator, this, "other", buffer, theOther);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDScopeDescriptionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MDScopeDescriptionType that = ((MDScopeDescriptionType) object);
        {
            List<ObjectReferencePropertyType> lhsAttributes;
            lhsAttributes = (((this.attributes!= null)&&(!this.attributes.isEmpty()))?this.getAttributes():null);
            List<ObjectReferencePropertyType> rhsAttributes;
            rhsAttributes = (((that.attributes!= null)&&(!that.attributes.isEmpty()))?that.getAttributes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attributes", lhsAttributes), LocatorUtils.property(thatLocator, "attributes", rhsAttributes), lhsAttributes, rhsAttributes)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsFeatures;
            lhsFeatures = (((this.features!= null)&&(!this.features.isEmpty()))?this.getFeatures():null);
            List<ObjectReferencePropertyType> rhsFeatures;
            rhsFeatures = (((that.features!= null)&&(!that.features.isEmpty()))?that.getFeatures():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "features", lhsFeatures), LocatorUtils.property(thatLocator, "features", rhsFeatures), lhsFeatures, rhsFeatures)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsFeatureInstances;
            lhsFeatureInstances = (((this.featureInstances!= null)&&(!this.featureInstances.isEmpty()))?this.getFeatureInstances():null);
            List<ObjectReferencePropertyType> rhsFeatureInstances;
            rhsFeatureInstances = (((that.featureInstances!= null)&&(!that.featureInstances.isEmpty()))?that.getFeatureInstances():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "featureInstances", lhsFeatureInstances), LocatorUtils.property(thatLocator, "featureInstances", rhsFeatureInstances), lhsFeatureInstances, rhsFeatureInstances)) {
                return false;
            }
        }
        {
            List<ObjectReferencePropertyType> lhsAttributeInstances;
            lhsAttributeInstances = (((this.attributeInstances!= null)&&(!this.attributeInstances.isEmpty()))?this.getAttributeInstances():null);
            List<ObjectReferencePropertyType> rhsAttributeInstances;
            rhsAttributeInstances = (((that.attributeInstances!= null)&&(!that.attributeInstances.isEmpty()))?that.getAttributeInstances():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attributeInstances", lhsAttributeInstances), LocatorUtils.property(thatLocator, "attributeInstances", rhsAttributeInstances), lhsAttributeInstances, rhsAttributeInstances)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDataset;
            lhsDataset = this.getDataset();
            CharacterStringPropertyType rhsDataset;
            rhsDataset = that.getDataset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataset", lhsDataset), LocatorUtils.property(thatLocator, "dataset", rhsDataset), lhsDataset, rhsDataset)) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsOther;
            lhsOther = this.getOther();
            CharacterStringPropertyType rhsOther;
            rhsOther = that.getOther();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "other", lhsOther), LocatorUtils.property(thatLocator, "other", rhsOther), lhsOther, rhsOther)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<ObjectReferencePropertyType> theAttributes;
            theAttributes = (((this.attributes!= null)&&(!this.attributes.isEmpty()))?this.getAttributes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attributes", theAttributes), currentHashCode, theAttributes);
        }
        {
            List<ObjectReferencePropertyType> theFeatures;
            theFeatures = (((this.features!= null)&&(!this.features.isEmpty()))?this.getFeatures():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "features", theFeatures), currentHashCode, theFeatures);
        }
        {
            List<ObjectReferencePropertyType> theFeatureInstances;
            theFeatureInstances = (((this.featureInstances!= null)&&(!this.featureInstances.isEmpty()))?this.getFeatureInstances():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "featureInstances", theFeatureInstances), currentHashCode, theFeatureInstances);
        }
        {
            List<ObjectReferencePropertyType> theAttributeInstances;
            theAttributeInstances = (((this.attributeInstances!= null)&&(!this.attributeInstances.isEmpty()))?this.getAttributeInstances():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attributeInstances", theAttributeInstances), currentHashCode, theAttributeInstances);
        }
        {
            CharacterStringPropertyType theDataset;
            theDataset = this.getDataset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataset", theDataset), currentHashCode, theDataset);
        }
        {
            CharacterStringPropertyType theOther;
            theOther = this.getOther();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "other", theOther), currentHashCode, theOther);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof MDScopeDescriptionType) {
            final MDScopeDescriptionType copy = ((MDScopeDescriptionType) draftCopy);
            if ((this.attributes!= null)&&(!this.attributes.isEmpty())) {
                List<ObjectReferencePropertyType> sourceAttributes;
                sourceAttributes = (((this.attributes!= null)&&(!this.attributes.isEmpty()))?this.getAttributes():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyAttributes = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "attributes", sourceAttributes), sourceAttributes));
                copy.attributes = null;
                if (copyAttributes!= null) {
                    List<ObjectReferencePropertyType> uniqueAttributesl = copy.getAttributes();
                    uniqueAttributesl.addAll(copyAttributes);
                }
            } else {
                copy.attributes = null;
            }
            if ((this.features!= null)&&(!this.features.isEmpty())) {
                List<ObjectReferencePropertyType> sourceFeatures;
                sourceFeatures = (((this.features!= null)&&(!this.features.isEmpty()))?this.getFeatures():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyFeatures = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "features", sourceFeatures), sourceFeatures));
                copy.features = null;
                if (copyFeatures!= null) {
                    List<ObjectReferencePropertyType> uniqueFeaturesl = copy.getFeatures();
                    uniqueFeaturesl.addAll(copyFeatures);
                }
            } else {
                copy.features = null;
            }
            if ((this.featureInstances!= null)&&(!this.featureInstances.isEmpty())) {
                List<ObjectReferencePropertyType> sourceFeatureInstances;
                sourceFeatureInstances = (((this.featureInstances!= null)&&(!this.featureInstances.isEmpty()))?this.getFeatureInstances():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyFeatureInstances = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "featureInstances", sourceFeatureInstances), sourceFeatureInstances));
                copy.featureInstances = null;
                if (copyFeatureInstances!= null) {
                    List<ObjectReferencePropertyType> uniqueFeatureInstancesl = copy.getFeatureInstances();
                    uniqueFeatureInstancesl.addAll(copyFeatureInstances);
                }
            } else {
                copy.featureInstances = null;
            }
            if ((this.attributeInstances!= null)&&(!this.attributeInstances.isEmpty())) {
                List<ObjectReferencePropertyType> sourceAttributeInstances;
                sourceAttributeInstances = (((this.attributeInstances!= null)&&(!this.attributeInstances.isEmpty()))?this.getAttributeInstances():null);
                @SuppressWarnings("unchecked")
                List<ObjectReferencePropertyType> copyAttributeInstances = ((List<ObjectReferencePropertyType> ) strategy.copy(LocatorUtils.property(locator, "attributeInstances", sourceAttributeInstances), sourceAttributeInstances));
                copy.attributeInstances = null;
                if (copyAttributeInstances!= null) {
                    List<ObjectReferencePropertyType> uniqueAttributeInstancesl = copy.getAttributeInstances();
                    uniqueAttributeInstancesl.addAll(copyAttributeInstances);
                }
            } else {
                copy.attributeInstances = null;
            }
            if (this.dataset!= null) {
                CharacterStringPropertyType sourceDataset;
                sourceDataset = this.getDataset();
                CharacterStringPropertyType copyDataset = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "dataset", sourceDataset), sourceDataset));
                copy.setDataset(copyDataset);
            } else {
                copy.dataset = null;
            }
            if (this.other!= null) {
                CharacterStringPropertyType sourceOther;
                sourceOther = this.getOther();
                CharacterStringPropertyType copyOther = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "other", sourceOther), sourceOther));
                copy.setOther(copyOther);
            } else {
                copy.other = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDScopeDescriptionType();
    }

}
