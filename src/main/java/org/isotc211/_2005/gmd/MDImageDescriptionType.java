//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.BooleanPropertyType;
import org.isotc211._2005.gco.IntegerPropertyType;
import org.isotc211._2005.gco.RealPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Information about an image's suitability for use
 * 
 * <p>Java class for MD_ImageDescription_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_ImageDescription_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}MD_CoverageDescription_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="illuminationElevationAngle" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="illuminationAzimuthAngle" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="imagingCondition" type="{http://www.isotc211.org/2005/gmd}MD_ImagingConditionCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="imageQualityCode" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="cloudCoverPercentage" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="processingLevelCode" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="compressionGenerationQuantity" type="{http://www.isotc211.org/2005/gco}Integer_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="triangulationIndicator" type="{http://www.isotc211.org/2005/gco}Boolean_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="radiometricCalibrationDataAvailability" type="{http://www.isotc211.org/2005/gco}Boolean_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="cameraCalibrationInformationAvailability" type="{http://www.isotc211.org/2005/gco}Boolean_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="filmDistortionInformationAvailability" type="{http://www.isotc211.org/2005/gco}Boolean_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lensDistortionInformationAvailability" type="{http://www.isotc211.org/2005/gco}Boolean_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_ImageDescription_Type", propOrder = {
    "illuminationElevationAngle",
    "illuminationAzimuthAngle",
    "imagingCondition",
    "imageQualityCode",
    "cloudCoverPercentage",
    "processingLevelCode",
    "compressionGenerationQuantity",
    "triangulationIndicator",
    "radiometricCalibrationDataAvailability",
    "cameraCalibrationInformationAvailability",
    "filmDistortionInformationAvailability",
    "lensDistortionInformationAvailability"
})
public class MDImageDescriptionType
    extends MDCoverageDescriptionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected RealPropertyType illuminationElevationAngle;
    protected RealPropertyType illuminationAzimuthAngle;
    protected MDImagingConditionCodePropertyType imagingCondition;
    protected MDIdentifierPropertyType imageQualityCode;
    protected RealPropertyType cloudCoverPercentage;
    protected MDIdentifierPropertyType processingLevelCode;
    protected IntegerPropertyType compressionGenerationQuantity;
    protected BooleanPropertyType triangulationIndicator;
    protected BooleanPropertyType radiometricCalibrationDataAvailability;
    protected BooleanPropertyType cameraCalibrationInformationAvailability;
    protected BooleanPropertyType filmDistortionInformationAvailability;
    protected BooleanPropertyType lensDistortionInformationAvailability;

    /**
     * Gets the value of the illuminationElevationAngle property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getIlluminationElevationAngle() {
        return illuminationElevationAngle;
    }

    /**
     * Sets the value of the illuminationElevationAngle property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setIlluminationElevationAngle(RealPropertyType value) {
        this.illuminationElevationAngle = value;
    }

    /**
     * Gets the value of the illuminationAzimuthAngle property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getIlluminationAzimuthAngle() {
        return illuminationAzimuthAngle;
    }

    /**
     * Sets the value of the illuminationAzimuthAngle property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setIlluminationAzimuthAngle(RealPropertyType value) {
        this.illuminationAzimuthAngle = value;
    }

    /**
     * Gets the value of the imagingCondition property.
     * 
     * @return
     *     possible object is
     *     {@link MDImagingConditionCodePropertyType }
     *     
     */
    public MDImagingConditionCodePropertyType getImagingCondition() {
        return imagingCondition;
    }

    /**
     * Sets the value of the imagingCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDImagingConditionCodePropertyType }
     *     
     */
    public void setImagingCondition(MDImagingConditionCodePropertyType value) {
        this.imagingCondition = value;
    }

    /**
     * Gets the value of the imageQualityCode property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getImageQualityCode() {
        return imageQualityCode;
    }

    /**
     * Sets the value of the imageQualityCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setImageQualityCode(MDIdentifierPropertyType value) {
        this.imageQualityCode = value;
    }

    /**
     * Gets the value of the cloudCoverPercentage property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getCloudCoverPercentage() {
        return cloudCoverPercentage;
    }

    /**
     * Sets the value of the cloudCoverPercentage property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setCloudCoverPercentage(RealPropertyType value) {
        this.cloudCoverPercentage = value;
    }

    /**
     * Gets the value of the processingLevelCode property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getProcessingLevelCode() {
        return processingLevelCode;
    }

    /**
     * Sets the value of the processingLevelCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setProcessingLevelCode(MDIdentifierPropertyType value) {
        this.processingLevelCode = value;
    }

    /**
     * Gets the value of the compressionGenerationQuantity property.
     * 
     * @return
     *     possible object is
     *     {@link IntegerPropertyType }
     *     
     */
    public IntegerPropertyType getCompressionGenerationQuantity() {
        return compressionGenerationQuantity;
    }

    /**
     * Sets the value of the compressionGenerationQuantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntegerPropertyType }
     *     
     */
    public void setCompressionGenerationQuantity(IntegerPropertyType value) {
        this.compressionGenerationQuantity = value;
    }

    /**
     * Gets the value of the triangulationIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link BooleanPropertyType }
     *     
     */
    public BooleanPropertyType getTriangulationIndicator() {
        return triangulationIndicator;
    }

    /**
     * Sets the value of the triangulationIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link BooleanPropertyType }
     *     
     */
    public void setTriangulationIndicator(BooleanPropertyType value) {
        this.triangulationIndicator = value;
    }

    /**
     * Gets the value of the radiometricCalibrationDataAvailability property.
     * 
     * @return
     *     possible object is
     *     {@link BooleanPropertyType }
     *     
     */
    public BooleanPropertyType getRadiometricCalibrationDataAvailability() {
        return radiometricCalibrationDataAvailability;
    }

    /**
     * Sets the value of the radiometricCalibrationDataAvailability property.
     * 
     * @param value
     *     allowed object is
     *     {@link BooleanPropertyType }
     *     
     */
    public void setRadiometricCalibrationDataAvailability(BooleanPropertyType value) {
        this.radiometricCalibrationDataAvailability = value;
    }

    /**
     * Gets the value of the cameraCalibrationInformationAvailability property.
     * 
     * @return
     *     possible object is
     *     {@link BooleanPropertyType }
     *     
     */
    public BooleanPropertyType getCameraCalibrationInformationAvailability() {
        return cameraCalibrationInformationAvailability;
    }

    /**
     * Sets the value of the cameraCalibrationInformationAvailability property.
     * 
     * @param value
     *     allowed object is
     *     {@link BooleanPropertyType }
     *     
     */
    public void setCameraCalibrationInformationAvailability(BooleanPropertyType value) {
        this.cameraCalibrationInformationAvailability = value;
    }

    /**
     * Gets the value of the filmDistortionInformationAvailability property.
     * 
     * @return
     *     possible object is
     *     {@link BooleanPropertyType }
     *     
     */
    public BooleanPropertyType getFilmDistortionInformationAvailability() {
        return filmDistortionInformationAvailability;
    }

    /**
     * Sets the value of the filmDistortionInformationAvailability property.
     * 
     * @param value
     *     allowed object is
     *     {@link BooleanPropertyType }
     *     
     */
    public void setFilmDistortionInformationAvailability(BooleanPropertyType value) {
        this.filmDistortionInformationAvailability = value;
    }

    /**
     * Gets the value of the lensDistortionInformationAvailability property.
     * 
     * @return
     *     possible object is
     *     {@link BooleanPropertyType }
     *     
     */
    public BooleanPropertyType getLensDistortionInformationAvailability() {
        return lensDistortionInformationAvailability;
    }

    /**
     * Sets the value of the lensDistortionInformationAvailability property.
     * 
     * @param value
     *     allowed object is
     *     {@link BooleanPropertyType }
     *     
     */
    public void setLensDistortionInformationAvailability(BooleanPropertyType value) {
        this.lensDistortionInformationAvailability = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RealPropertyType theIlluminationElevationAngle;
            theIlluminationElevationAngle = this.getIlluminationElevationAngle();
            strategy.appendField(locator, this, "illuminationElevationAngle", buffer, theIlluminationElevationAngle);
        }
        {
            RealPropertyType theIlluminationAzimuthAngle;
            theIlluminationAzimuthAngle = this.getIlluminationAzimuthAngle();
            strategy.appendField(locator, this, "illuminationAzimuthAngle", buffer, theIlluminationAzimuthAngle);
        }
        {
            MDImagingConditionCodePropertyType theImagingCondition;
            theImagingCondition = this.getImagingCondition();
            strategy.appendField(locator, this, "imagingCondition", buffer, theImagingCondition);
        }
        {
            MDIdentifierPropertyType theImageQualityCode;
            theImageQualityCode = this.getImageQualityCode();
            strategy.appendField(locator, this, "imageQualityCode", buffer, theImageQualityCode);
        }
        {
            RealPropertyType theCloudCoverPercentage;
            theCloudCoverPercentage = this.getCloudCoverPercentage();
            strategy.appendField(locator, this, "cloudCoverPercentage", buffer, theCloudCoverPercentage);
        }
        {
            MDIdentifierPropertyType theProcessingLevelCode;
            theProcessingLevelCode = this.getProcessingLevelCode();
            strategy.appendField(locator, this, "processingLevelCode", buffer, theProcessingLevelCode);
        }
        {
            IntegerPropertyType theCompressionGenerationQuantity;
            theCompressionGenerationQuantity = this.getCompressionGenerationQuantity();
            strategy.appendField(locator, this, "compressionGenerationQuantity", buffer, theCompressionGenerationQuantity);
        }
        {
            BooleanPropertyType theTriangulationIndicator;
            theTriangulationIndicator = this.getTriangulationIndicator();
            strategy.appendField(locator, this, "triangulationIndicator", buffer, theTriangulationIndicator);
        }
        {
            BooleanPropertyType theRadiometricCalibrationDataAvailability;
            theRadiometricCalibrationDataAvailability = this.getRadiometricCalibrationDataAvailability();
            strategy.appendField(locator, this, "radiometricCalibrationDataAvailability", buffer, theRadiometricCalibrationDataAvailability);
        }
        {
            BooleanPropertyType theCameraCalibrationInformationAvailability;
            theCameraCalibrationInformationAvailability = this.getCameraCalibrationInformationAvailability();
            strategy.appendField(locator, this, "cameraCalibrationInformationAvailability", buffer, theCameraCalibrationInformationAvailability);
        }
        {
            BooleanPropertyType theFilmDistortionInformationAvailability;
            theFilmDistortionInformationAvailability = this.getFilmDistortionInformationAvailability();
            strategy.appendField(locator, this, "filmDistortionInformationAvailability", buffer, theFilmDistortionInformationAvailability);
        }
        {
            BooleanPropertyType theLensDistortionInformationAvailability;
            theLensDistortionInformationAvailability = this.getLensDistortionInformationAvailability();
            strategy.appendField(locator, this, "lensDistortionInformationAvailability", buffer, theLensDistortionInformationAvailability);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDImageDescriptionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDImageDescriptionType that = ((MDImageDescriptionType) object);
        {
            RealPropertyType lhsIlluminationElevationAngle;
            lhsIlluminationElevationAngle = this.getIlluminationElevationAngle();
            RealPropertyType rhsIlluminationElevationAngle;
            rhsIlluminationElevationAngle = that.getIlluminationElevationAngle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "illuminationElevationAngle", lhsIlluminationElevationAngle), LocatorUtils.property(thatLocator, "illuminationElevationAngle", rhsIlluminationElevationAngle), lhsIlluminationElevationAngle, rhsIlluminationElevationAngle)) {
                return false;
            }
        }
        {
            RealPropertyType lhsIlluminationAzimuthAngle;
            lhsIlluminationAzimuthAngle = this.getIlluminationAzimuthAngle();
            RealPropertyType rhsIlluminationAzimuthAngle;
            rhsIlluminationAzimuthAngle = that.getIlluminationAzimuthAngle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "illuminationAzimuthAngle", lhsIlluminationAzimuthAngle), LocatorUtils.property(thatLocator, "illuminationAzimuthAngle", rhsIlluminationAzimuthAngle), lhsIlluminationAzimuthAngle, rhsIlluminationAzimuthAngle)) {
                return false;
            }
        }
        {
            MDImagingConditionCodePropertyType lhsImagingCondition;
            lhsImagingCondition = this.getImagingCondition();
            MDImagingConditionCodePropertyType rhsImagingCondition;
            rhsImagingCondition = that.getImagingCondition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imagingCondition", lhsImagingCondition), LocatorUtils.property(thatLocator, "imagingCondition", rhsImagingCondition), lhsImagingCondition, rhsImagingCondition)) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsImageQualityCode;
            lhsImageQualityCode = this.getImageQualityCode();
            MDIdentifierPropertyType rhsImageQualityCode;
            rhsImageQualityCode = that.getImageQualityCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imageQualityCode", lhsImageQualityCode), LocatorUtils.property(thatLocator, "imageQualityCode", rhsImageQualityCode), lhsImageQualityCode, rhsImageQualityCode)) {
                return false;
            }
        }
        {
            RealPropertyType lhsCloudCoverPercentage;
            lhsCloudCoverPercentage = this.getCloudCoverPercentage();
            RealPropertyType rhsCloudCoverPercentage;
            rhsCloudCoverPercentage = that.getCloudCoverPercentage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cloudCoverPercentage", lhsCloudCoverPercentage), LocatorUtils.property(thatLocator, "cloudCoverPercentage", rhsCloudCoverPercentage), lhsCloudCoverPercentage, rhsCloudCoverPercentage)) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsProcessingLevelCode;
            lhsProcessingLevelCode = this.getProcessingLevelCode();
            MDIdentifierPropertyType rhsProcessingLevelCode;
            rhsProcessingLevelCode = that.getProcessingLevelCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "processingLevelCode", lhsProcessingLevelCode), LocatorUtils.property(thatLocator, "processingLevelCode", rhsProcessingLevelCode), lhsProcessingLevelCode, rhsProcessingLevelCode)) {
                return false;
            }
        }
        {
            IntegerPropertyType lhsCompressionGenerationQuantity;
            lhsCompressionGenerationQuantity = this.getCompressionGenerationQuantity();
            IntegerPropertyType rhsCompressionGenerationQuantity;
            rhsCompressionGenerationQuantity = that.getCompressionGenerationQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "compressionGenerationQuantity", lhsCompressionGenerationQuantity), LocatorUtils.property(thatLocator, "compressionGenerationQuantity", rhsCompressionGenerationQuantity), lhsCompressionGenerationQuantity, rhsCompressionGenerationQuantity)) {
                return false;
            }
        }
        {
            BooleanPropertyType lhsTriangulationIndicator;
            lhsTriangulationIndicator = this.getTriangulationIndicator();
            BooleanPropertyType rhsTriangulationIndicator;
            rhsTriangulationIndicator = that.getTriangulationIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "triangulationIndicator", lhsTriangulationIndicator), LocatorUtils.property(thatLocator, "triangulationIndicator", rhsTriangulationIndicator), lhsTriangulationIndicator, rhsTriangulationIndicator)) {
                return false;
            }
        }
        {
            BooleanPropertyType lhsRadiometricCalibrationDataAvailability;
            lhsRadiometricCalibrationDataAvailability = this.getRadiometricCalibrationDataAvailability();
            BooleanPropertyType rhsRadiometricCalibrationDataAvailability;
            rhsRadiometricCalibrationDataAvailability = that.getRadiometricCalibrationDataAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "radiometricCalibrationDataAvailability", lhsRadiometricCalibrationDataAvailability), LocatorUtils.property(thatLocator, "radiometricCalibrationDataAvailability", rhsRadiometricCalibrationDataAvailability), lhsRadiometricCalibrationDataAvailability, rhsRadiometricCalibrationDataAvailability)) {
                return false;
            }
        }
        {
            BooleanPropertyType lhsCameraCalibrationInformationAvailability;
            lhsCameraCalibrationInformationAvailability = this.getCameraCalibrationInformationAvailability();
            BooleanPropertyType rhsCameraCalibrationInformationAvailability;
            rhsCameraCalibrationInformationAvailability = that.getCameraCalibrationInformationAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cameraCalibrationInformationAvailability", lhsCameraCalibrationInformationAvailability), LocatorUtils.property(thatLocator, "cameraCalibrationInformationAvailability", rhsCameraCalibrationInformationAvailability), lhsCameraCalibrationInformationAvailability, rhsCameraCalibrationInformationAvailability)) {
                return false;
            }
        }
        {
            BooleanPropertyType lhsFilmDistortionInformationAvailability;
            lhsFilmDistortionInformationAvailability = this.getFilmDistortionInformationAvailability();
            BooleanPropertyType rhsFilmDistortionInformationAvailability;
            rhsFilmDistortionInformationAvailability = that.getFilmDistortionInformationAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filmDistortionInformationAvailability", lhsFilmDistortionInformationAvailability), LocatorUtils.property(thatLocator, "filmDistortionInformationAvailability", rhsFilmDistortionInformationAvailability), lhsFilmDistortionInformationAvailability, rhsFilmDistortionInformationAvailability)) {
                return false;
            }
        }
        {
            BooleanPropertyType lhsLensDistortionInformationAvailability;
            lhsLensDistortionInformationAvailability = this.getLensDistortionInformationAvailability();
            BooleanPropertyType rhsLensDistortionInformationAvailability;
            rhsLensDistortionInformationAvailability = that.getLensDistortionInformationAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lensDistortionInformationAvailability", lhsLensDistortionInformationAvailability), LocatorUtils.property(thatLocator, "lensDistortionInformationAvailability", rhsLensDistortionInformationAvailability), lhsLensDistortionInformationAvailability, rhsLensDistortionInformationAvailability)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RealPropertyType theIlluminationElevationAngle;
            theIlluminationElevationAngle = this.getIlluminationElevationAngle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "illuminationElevationAngle", theIlluminationElevationAngle), currentHashCode, theIlluminationElevationAngle);
        }
        {
            RealPropertyType theIlluminationAzimuthAngle;
            theIlluminationAzimuthAngle = this.getIlluminationAzimuthAngle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "illuminationAzimuthAngle", theIlluminationAzimuthAngle), currentHashCode, theIlluminationAzimuthAngle);
        }
        {
            MDImagingConditionCodePropertyType theImagingCondition;
            theImagingCondition = this.getImagingCondition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imagingCondition", theImagingCondition), currentHashCode, theImagingCondition);
        }
        {
            MDIdentifierPropertyType theImageQualityCode;
            theImageQualityCode = this.getImageQualityCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imageQualityCode", theImageQualityCode), currentHashCode, theImageQualityCode);
        }
        {
            RealPropertyType theCloudCoverPercentage;
            theCloudCoverPercentage = this.getCloudCoverPercentage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cloudCoverPercentage", theCloudCoverPercentage), currentHashCode, theCloudCoverPercentage);
        }
        {
            MDIdentifierPropertyType theProcessingLevelCode;
            theProcessingLevelCode = this.getProcessingLevelCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "processingLevelCode", theProcessingLevelCode), currentHashCode, theProcessingLevelCode);
        }
        {
            IntegerPropertyType theCompressionGenerationQuantity;
            theCompressionGenerationQuantity = this.getCompressionGenerationQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "compressionGenerationQuantity", theCompressionGenerationQuantity), currentHashCode, theCompressionGenerationQuantity);
        }
        {
            BooleanPropertyType theTriangulationIndicator;
            theTriangulationIndicator = this.getTriangulationIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "triangulationIndicator", theTriangulationIndicator), currentHashCode, theTriangulationIndicator);
        }
        {
            BooleanPropertyType theRadiometricCalibrationDataAvailability;
            theRadiometricCalibrationDataAvailability = this.getRadiometricCalibrationDataAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "radiometricCalibrationDataAvailability", theRadiometricCalibrationDataAvailability), currentHashCode, theRadiometricCalibrationDataAvailability);
        }
        {
            BooleanPropertyType theCameraCalibrationInformationAvailability;
            theCameraCalibrationInformationAvailability = this.getCameraCalibrationInformationAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cameraCalibrationInformationAvailability", theCameraCalibrationInformationAvailability), currentHashCode, theCameraCalibrationInformationAvailability);
        }
        {
            BooleanPropertyType theFilmDistortionInformationAvailability;
            theFilmDistortionInformationAvailability = this.getFilmDistortionInformationAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filmDistortionInformationAvailability", theFilmDistortionInformationAvailability), currentHashCode, theFilmDistortionInformationAvailability);
        }
        {
            BooleanPropertyType theLensDistortionInformationAvailability;
            theLensDistortionInformationAvailability = this.getLensDistortionInformationAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lensDistortionInformationAvailability", theLensDistortionInformationAvailability), currentHashCode, theLensDistortionInformationAvailability);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDImageDescriptionType) {
            final MDImageDescriptionType copy = ((MDImageDescriptionType) draftCopy);
            if (this.illuminationElevationAngle!= null) {
                RealPropertyType sourceIlluminationElevationAngle;
                sourceIlluminationElevationAngle = this.getIlluminationElevationAngle();
                RealPropertyType copyIlluminationElevationAngle = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "illuminationElevationAngle", sourceIlluminationElevationAngle), sourceIlluminationElevationAngle));
                copy.setIlluminationElevationAngle(copyIlluminationElevationAngle);
            } else {
                copy.illuminationElevationAngle = null;
            }
            if (this.illuminationAzimuthAngle!= null) {
                RealPropertyType sourceIlluminationAzimuthAngle;
                sourceIlluminationAzimuthAngle = this.getIlluminationAzimuthAngle();
                RealPropertyType copyIlluminationAzimuthAngle = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "illuminationAzimuthAngle", sourceIlluminationAzimuthAngle), sourceIlluminationAzimuthAngle));
                copy.setIlluminationAzimuthAngle(copyIlluminationAzimuthAngle);
            } else {
                copy.illuminationAzimuthAngle = null;
            }
            if (this.imagingCondition!= null) {
                MDImagingConditionCodePropertyType sourceImagingCondition;
                sourceImagingCondition = this.getImagingCondition();
                MDImagingConditionCodePropertyType copyImagingCondition = ((MDImagingConditionCodePropertyType) strategy.copy(LocatorUtils.property(locator, "imagingCondition", sourceImagingCondition), sourceImagingCondition));
                copy.setImagingCondition(copyImagingCondition);
            } else {
                copy.imagingCondition = null;
            }
            if (this.imageQualityCode!= null) {
                MDIdentifierPropertyType sourceImageQualityCode;
                sourceImageQualityCode = this.getImageQualityCode();
                MDIdentifierPropertyType copyImageQualityCode = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "imageQualityCode", sourceImageQualityCode), sourceImageQualityCode));
                copy.setImageQualityCode(copyImageQualityCode);
            } else {
                copy.imageQualityCode = null;
            }
            if (this.cloudCoverPercentage!= null) {
                RealPropertyType sourceCloudCoverPercentage;
                sourceCloudCoverPercentage = this.getCloudCoverPercentage();
                RealPropertyType copyCloudCoverPercentage = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "cloudCoverPercentage", sourceCloudCoverPercentage), sourceCloudCoverPercentage));
                copy.setCloudCoverPercentage(copyCloudCoverPercentage);
            } else {
                copy.cloudCoverPercentage = null;
            }
            if (this.processingLevelCode!= null) {
                MDIdentifierPropertyType sourceProcessingLevelCode;
                sourceProcessingLevelCode = this.getProcessingLevelCode();
                MDIdentifierPropertyType copyProcessingLevelCode = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "processingLevelCode", sourceProcessingLevelCode), sourceProcessingLevelCode));
                copy.setProcessingLevelCode(copyProcessingLevelCode);
            } else {
                copy.processingLevelCode = null;
            }
            if (this.compressionGenerationQuantity!= null) {
                IntegerPropertyType sourceCompressionGenerationQuantity;
                sourceCompressionGenerationQuantity = this.getCompressionGenerationQuantity();
                IntegerPropertyType copyCompressionGenerationQuantity = ((IntegerPropertyType) strategy.copy(LocatorUtils.property(locator, "compressionGenerationQuantity", sourceCompressionGenerationQuantity), sourceCompressionGenerationQuantity));
                copy.setCompressionGenerationQuantity(copyCompressionGenerationQuantity);
            } else {
                copy.compressionGenerationQuantity = null;
            }
            if (this.triangulationIndicator!= null) {
                BooleanPropertyType sourceTriangulationIndicator;
                sourceTriangulationIndicator = this.getTriangulationIndicator();
                BooleanPropertyType copyTriangulationIndicator = ((BooleanPropertyType) strategy.copy(LocatorUtils.property(locator, "triangulationIndicator", sourceTriangulationIndicator), sourceTriangulationIndicator));
                copy.setTriangulationIndicator(copyTriangulationIndicator);
            } else {
                copy.triangulationIndicator = null;
            }
            if (this.radiometricCalibrationDataAvailability!= null) {
                BooleanPropertyType sourceRadiometricCalibrationDataAvailability;
                sourceRadiometricCalibrationDataAvailability = this.getRadiometricCalibrationDataAvailability();
                BooleanPropertyType copyRadiometricCalibrationDataAvailability = ((BooleanPropertyType) strategy.copy(LocatorUtils.property(locator, "radiometricCalibrationDataAvailability", sourceRadiometricCalibrationDataAvailability), sourceRadiometricCalibrationDataAvailability));
                copy.setRadiometricCalibrationDataAvailability(copyRadiometricCalibrationDataAvailability);
            } else {
                copy.radiometricCalibrationDataAvailability = null;
            }
            if (this.cameraCalibrationInformationAvailability!= null) {
                BooleanPropertyType sourceCameraCalibrationInformationAvailability;
                sourceCameraCalibrationInformationAvailability = this.getCameraCalibrationInformationAvailability();
                BooleanPropertyType copyCameraCalibrationInformationAvailability = ((BooleanPropertyType) strategy.copy(LocatorUtils.property(locator, "cameraCalibrationInformationAvailability", sourceCameraCalibrationInformationAvailability), sourceCameraCalibrationInformationAvailability));
                copy.setCameraCalibrationInformationAvailability(copyCameraCalibrationInformationAvailability);
            } else {
                copy.cameraCalibrationInformationAvailability = null;
            }
            if (this.filmDistortionInformationAvailability!= null) {
                BooleanPropertyType sourceFilmDistortionInformationAvailability;
                sourceFilmDistortionInformationAvailability = this.getFilmDistortionInformationAvailability();
                BooleanPropertyType copyFilmDistortionInformationAvailability = ((BooleanPropertyType) strategy.copy(LocatorUtils.property(locator, "filmDistortionInformationAvailability", sourceFilmDistortionInformationAvailability), sourceFilmDistortionInformationAvailability));
                copy.setFilmDistortionInformationAvailability(copyFilmDistortionInformationAvailability);
            } else {
                copy.filmDistortionInformationAvailability = null;
            }
            if (this.lensDistortionInformationAvailability!= null) {
                BooleanPropertyType sourceLensDistortionInformationAvailability;
                sourceLensDistortionInformationAvailability = this.getLensDistortionInformationAvailability();
                BooleanPropertyType copyLensDistortionInformationAvailability = ((BooleanPropertyType) strategy.copy(LocatorUtils.property(locator, "lensDistortionInformationAvailability", sourceLensDistortionInformationAvailability), sourceLensDistortionInformationAvailability));
                copy.setLensDistortionInformationAvailability(copyLensDistortionInformationAvailability);
            } else {
                copy.lensDistortionInformationAvailability = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDImageDescriptionType();
    }

}
