//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.isotc211._2005.gco.CharacterStringPropertyType;
import org.isotc211._2005.gco.RealPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Technical means and media by which a dataset is obtained from the distributor
 * 
 * <p>Java class for MD_DigitalTransferOptions_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MD_DigitalTransferOptions_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="unitsOfDistribution" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="transferSize" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="onLine" type="{http://www.isotc211.org/2005/gmd}CI_OnlineResource_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="offLine" type="{http://www.isotc211.org/2005/gmd}MD_Medium_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MD_DigitalTransferOptions_Type", propOrder = {
    "unitsOfDistribution",
    "transferSize",
    "onLine",
    "offLine"
})
public class MDDigitalTransferOptionsType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CharacterStringPropertyType unitsOfDistribution;
    protected RealPropertyType transferSize;
    protected List<CIOnlineResourcePropertyType> onLine;
    protected MDMediumPropertyType offLine;

    /**
     * Gets the value of the unitsOfDistribution property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getUnitsOfDistribution() {
        return unitsOfDistribution;
    }

    /**
     * Sets the value of the unitsOfDistribution property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setUnitsOfDistribution(CharacterStringPropertyType value) {
        this.unitsOfDistribution = value;
    }

    /**
     * Gets the value of the transferSize property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getTransferSize() {
        return transferSize;
    }

    /**
     * Sets the value of the transferSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setTransferSize(RealPropertyType value) {
        this.transferSize = value;
    }

    /**
     * Gets the value of the onLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the onLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOnLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIOnlineResourcePropertyType }
     * 
     * 
     */
    public List<CIOnlineResourcePropertyType> getOnLine() {
        if (onLine == null) {
            onLine = new ArrayList<CIOnlineResourcePropertyType>();
        }
        return this.onLine;
    }

    /**
     * Gets the value of the offLine property.
     * 
     * @return
     *     possible object is
     *     {@link MDMediumPropertyType }
     *     
     */
    public MDMediumPropertyType getOffLine() {
        return offLine;
    }

    /**
     * Sets the value of the offLine property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDMediumPropertyType }
     *     
     */
    public void setOffLine(MDMediumPropertyType value) {
        this.offLine = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theUnitsOfDistribution;
            theUnitsOfDistribution = this.getUnitsOfDistribution();
            strategy.appendField(locator, this, "unitsOfDistribution", buffer, theUnitsOfDistribution);
        }
        {
            RealPropertyType theTransferSize;
            theTransferSize = this.getTransferSize();
            strategy.appendField(locator, this, "transferSize", buffer, theTransferSize);
        }
        {
            List<CIOnlineResourcePropertyType> theOnLine;
            theOnLine = (((this.onLine!= null)&&(!this.onLine.isEmpty()))?this.getOnLine():null);
            strategy.appendField(locator, this, "onLine", buffer, theOnLine);
        }
        {
            MDMediumPropertyType theOffLine;
            theOffLine = this.getOffLine();
            strategy.appendField(locator, this, "offLine", buffer, theOffLine);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MDDigitalTransferOptionsType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MDDigitalTransferOptionsType that = ((MDDigitalTransferOptionsType) object);
        {
            CharacterStringPropertyType lhsUnitsOfDistribution;
            lhsUnitsOfDistribution = this.getUnitsOfDistribution();
            CharacterStringPropertyType rhsUnitsOfDistribution;
            rhsUnitsOfDistribution = that.getUnitsOfDistribution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "unitsOfDistribution", lhsUnitsOfDistribution), LocatorUtils.property(thatLocator, "unitsOfDistribution", rhsUnitsOfDistribution), lhsUnitsOfDistribution, rhsUnitsOfDistribution)) {
                return false;
            }
        }
        {
            RealPropertyType lhsTransferSize;
            lhsTransferSize = this.getTransferSize();
            RealPropertyType rhsTransferSize;
            rhsTransferSize = that.getTransferSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transferSize", lhsTransferSize), LocatorUtils.property(thatLocator, "transferSize", rhsTransferSize), lhsTransferSize, rhsTransferSize)) {
                return false;
            }
        }
        {
            List<CIOnlineResourcePropertyType> lhsOnLine;
            lhsOnLine = (((this.onLine!= null)&&(!this.onLine.isEmpty()))?this.getOnLine():null);
            List<CIOnlineResourcePropertyType> rhsOnLine;
            rhsOnLine = (((that.onLine!= null)&&(!that.onLine.isEmpty()))?that.getOnLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onLine", lhsOnLine), LocatorUtils.property(thatLocator, "onLine", rhsOnLine), lhsOnLine, rhsOnLine)) {
                return false;
            }
        }
        {
            MDMediumPropertyType lhsOffLine;
            lhsOffLine = this.getOffLine();
            MDMediumPropertyType rhsOffLine;
            rhsOffLine = that.getOffLine();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offLine", lhsOffLine), LocatorUtils.property(thatLocator, "offLine", rhsOffLine), lhsOffLine, rhsOffLine)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theUnitsOfDistribution;
            theUnitsOfDistribution = this.getUnitsOfDistribution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unitsOfDistribution", theUnitsOfDistribution), currentHashCode, theUnitsOfDistribution);
        }
        {
            RealPropertyType theTransferSize;
            theTransferSize = this.getTransferSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transferSize", theTransferSize), currentHashCode, theTransferSize);
        }
        {
            List<CIOnlineResourcePropertyType> theOnLine;
            theOnLine = (((this.onLine!= null)&&(!this.onLine.isEmpty()))?this.getOnLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onLine", theOnLine), currentHashCode, theOnLine);
        }
        {
            MDMediumPropertyType theOffLine;
            theOffLine = this.getOffLine();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offLine", theOffLine), currentHashCode, theOffLine);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MDDigitalTransferOptionsType) {
            final MDDigitalTransferOptionsType copy = ((MDDigitalTransferOptionsType) draftCopy);
            if (this.unitsOfDistribution!= null) {
                CharacterStringPropertyType sourceUnitsOfDistribution;
                sourceUnitsOfDistribution = this.getUnitsOfDistribution();
                CharacterStringPropertyType copyUnitsOfDistribution = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "unitsOfDistribution", sourceUnitsOfDistribution), sourceUnitsOfDistribution));
                copy.setUnitsOfDistribution(copyUnitsOfDistribution);
            } else {
                copy.unitsOfDistribution = null;
            }
            if (this.transferSize!= null) {
                RealPropertyType sourceTransferSize;
                sourceTransferSize = this.getTransferSize();
                RealPropertyType copyTransferSize = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "transferSize", sourceTransferSize), sourceTransferSize));
                copy.setTransferSize(copyTransferSize);
            } else {
                copy.transferSize = null;
            }
            if ((this.onLine!= null)&&(!this.onLine.isEmpty())) {
                List<CIOnlineResourcePropertyType> sourceOnLine;
                sourceOnLine = (((this.onLine!= null)&&(!this.onLine.isEmpty()))?this.getOnLine():null);
                @SuppressWarnings("unchecked")
                List<CIOnlineResourcePropertyType> copyOnLine = ((List<CIOnlineResourcePropertyType> ) strategy.copy(LocatorUtils.property(locator, "onLine", sourceOnLine), sourceOnLine));
                copy.onLine = null;
                if (copyOnLine!= null) {
                    List<CIOnlineResourcePropertyType> uniqueOnLinel = copy.getOnLine();
                    uniqueOnLinel.addAll(copyOnLine);
                }
            } else {
                copy.onLine = null;
            }
            if (this.offLine!= null) {
                MDMediumPropertyType sourceOffLine;
                sourceOffLine = this.getOffLine();
                MDMediumPropertyType copyOffLine = ((MDMediumPropertyType) strategy.copy(LocatorUtils.property(locator, "offLine", sourceOffLine), sourceOffLine));
                copy.setOffLine(copyOffLine);
            } else {
                copy.offLine = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MDDigitalTransferOptionsType();
    }

}
