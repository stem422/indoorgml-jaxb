//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package org.isotc211._2005.gmd;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.isotc211._2005.gco.AbstractObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Identifiable collection of datasets
 * 
 * <p>Java class for AbstractDS_Aggregate_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractDS_Aggregate_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="composedOf" type="{http://www.isotc211.org/2005/gmd}DS_DataSet_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="seriesMetadata" type="{http://www.isotc211.org/2005/gmd}MD_Metadata_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="subset" type="{http://www.isotc211.org/2005/gmd}DS_Aggregate_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="superset" type="{http://www.isotc211.org/2005/gmd}DS_Aggregate_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractDS_Aggregate_Type", propOrder = {
    "composedOf",
    "seriesMetadata",
    "subset",
    "superset"
})
@XmlSeeAlso({
    DSInitiativeType.class,
    DSSeriesType.class,
    DSOtherAggregateType.class
})
public abstract class AbstractDSAggregateType
    extends AbstractObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<DSDataSetPropertyType> composedOf;
    @XmlElement(required = true)
    protected List<MDMetadataPropertyType> seriesMetadata;
    protected List<DSAggregatePropertyType> subset;
    protected List<DSAggregatePropertyType> superset;

    /**
     * Gets the value of the composedOf property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the composedOf property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getComposedOf().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DSDataSetPropertyType }
     * 
     * 
     */
    public List<DSDataSetPropertyType> getComposedOf() {
        if (composedOf == null) {
            composedOf = new ArrayList<DSDataSetPropertyType>();
        }
        return this.composedOf;
    }

    /**
     * Gets the value of the seriesMetadata property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the seriesMetadata property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSeriesMetadata().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDMetadataPropertyType }
     * 
     * 
     */
    public List<MDMetadataPropertyType> getSeriesMetadata() {
        if (seriesMetadata == null) {
            seriesMetadata = new ArrayList<MDMetadataPropertyType>();
        }
        return this.seriesMetadata;
    }

    /**
     * Gets the value of the subset property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subset property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubset().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DSAggregatePropertyType }
     * 
     * 
     */
    public List<DSAggregatePropertyType> getSubset() {
        if (subset == null) {
            subset = new ArrayList<DSAggregatePropertyType>();
        }
        return this.subset;
    }

    /**
     * Gets the value of the superset property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the superset property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSuperset().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DSAggregatePropertyType }
     * 
     * 
     */
    public List<DSAggregatePropertyType> getSuperset() {
        if (superset == null) {
            superset = new ArrayList<DSAggregatePropertyType>();
        }
        return this.superset;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<DSDataSetPropertyType> theComposedOf;
            theComposedOf = (((this.composedOf!= null)&&(!this.composedOf.isEmpty()))?this.getComposedOf():null);
            strategy.appendField(locator, this, "composedOf", buffer, theComposedOf);
        }
        {
            List<MDMetadataPropertyType> theSeriesMetadata;
            theSeriesMetadata = (((this.seriesMetadata!= null)&&(!this.seriesMetadata.isEmpty()))?this.getSeriesMetadata():null);
            strategy.appendField(locator, this, "seriesMetadata", buffer, theSeriesMetadata);
        }
        {
            List<DSAggregatePropertyType> theSubset;
            theSubset = (((this.subset!= null)&&(!this.subset.isEmpty()))?this.getSubset():null);
            strategy.appendField(locator, this, "subset", buffer, theSubset);
        }
        {
            List<DSAggregatePropertyType> theSuperset;
            theSuperset = (((this.superset!= null)&&(!this.superset.isEmpty()))?this.getSuperset():null);
            strategy.appendField(locator, this, "superset", buffer, theSuperset);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractDSAggregateType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractDSAggregateType that = ((AbstractDSAggregateType) object);
        {
            List<DSDataSetPropertyType> lhsComposedOf;
            lhsComposedOf = (((this.composedOf!= null)&&(!this.composedOf.isEmpty()))?this.getComposedOf():null);
            List<DSDataSetPropertyType> rhsComposedOf;
            rhsComposedOf = (((that.composedOf!= null)&&(!that.composedOf.isEmpty()))?that.getComposedOf():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "composedOf", lhsComposedOf), LocatorUtils.property(thatLocator, "composedOf", rhsComposedOf), lhsComposedOf, rhsComposedOf)) {
                return false;
            }
        }
        {
            List<MDMetadataPropertyType> lhsSeriesMetadata;
            lhsSeriesMetadata = (((this.seriesMetadata!= null)&&(!this.seriesMetadata.isEmpty()))?this.getSeriesMetadata():null);
            List<MDMetadataPropertyType> rhsSeriesMetadata;
            rhsSeriesMetadata = (((that.seriesMetadata!= null)&&(!that.seriesMetadata.isEmpty()))?that.getSeriesMetadata():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "seriesMetadata", lhsSeriesMetadata), LocatorUtils.property(thatLocator, "seriesMetadata", rhsSeriesMetadata), lhsSeriesMetadata, rhsSeriesMetadata)) {
                return false;
            }
        }
        {
            List<DSAggregatePropertyType> lhsSubset;
            lhsSubset = (((this.subset!= null)&&(!this.subset.isEmpty()))?this.getSubset():null);
            List<DSAggregatePropertyType> rhsSubset;
            rhsSubset = (((that.subset!= null)&&(!that.subset.isEmpty()))?that.getSubset():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subset", lhsSubset), LocatorUtils.property(thatLocator, "subset", rhsSubset), lhsSubset, rhsSubset)) {
                return false;
            }
        }
        {
            List<DSAggregatePropertyType> lhsSuperset;
            lhsSuperset = (((this.superset!= null)&&(!this.superset.isEmpty()))?this.getSuperset():null);
            List<DSAggregatePropertyType> rhsSuperset;
            rhsSuperset = (((that.superset!= null)&&(!that.superset.isEmpty()))?that.getSuperset():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "superset", lhsSuperset), LocatorUtils.property(thatLocator, "superset", rhsSuperset), lhsSuperset, rhsSuperset)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<DSDataSetPropertyType> theComposedOf;
            theComposedOf = (((this.composedOf!= null)&&(!this.composedOf.isEmpty()))?this.getComposedOf():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "composedOf", theComposedOf), currentHashCode, theComposedOf);
        }
        {
            List<MDMetadataPropertyType> theSeriesMetadata;
            theSeriesMetadata = (((this.seriesMetadata!= null)&&(!this.seriesMetadata.isEmpty()))?this.getSeriesMetadata():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "seriesMetadata", theSeriesMetadata), currentHashCode, theSeriesMetadata);
        }
        {
            List<DSAggregatePropertyType> theSubset;
            theSubset = (((this.subset!= null)&&(!this.subset.isEmpty()))?this.getSubset():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subset", theSubset), currentHashCode, theSubset);
        }
        {
            List<DSAggregatePropertyType> theSuperset;
            theSuperset = (((this.superset!= null)&&(!this.superset.isEmpty()))?this.getSuperset():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "superset", theSuperset), currentHashCode, theSuperset);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractDSAggregateType) {
            final AbstractDSAggregateType copy = ((AbstractDSAggregateType) target);
            if ((this.composedOf!= null)&&(!this.composedOf.isEmpty())) {
                List<DSDataSetPropertyType> sourceComposedOf;
                sourceComposedOf = (((this.composedOf!= null)&&(!this.composedOf.isEmpty()))?this.getComposedOf():null);
                @SuppressWarnings("unchecked")
                List<DSDataSetPropertyType> copyComposedOf = ((List<DSDataSetPropertyType> ) strategy.copy(LocatorUtils.property(locator, "composedOf", sourceComposedOf), sourceComposedOf));
                copy.composedOf = null;
                if (copyComposedOf!= null) {
                    List<DSDataSetPropertyType> uniqueComposedOfl = copy.getComposedOf();
                    uniqueComposedOfl.addAll(copyComposedOf);
                }
            } else {
                copy.composedOf = null;
            }
            if ((this.seriesMetadata!= null)&&(!this.seriesMetadata.isEmpty())) {
                List<MDMetadataPropertyType> sourceSeriesMetadata;
                sourceSeriesMetadata = (((this.seriesMetadata!= null)&&(!this.seriesMetadata.isEmpty()))?this.getSeriesMetadata():null);
                @SuppressWarnings("unchecked")
                List<MDMetadataPropertyType> copySeriesMetadata = ((List<MDMetadataPropertyType> ) strategy.copy(LocatorUtils.property(locator, "seriesMetadata", sourceSeriesMetadata), sourceSeriesMetadata));
                copy.seriesMetadata = null;
                if (copySeriesMetadata!= null) {
                    List<MDMetadataPropertyType> uniqueSeriesMetadatal = copy.getSeriesMetadata();
                    uniqueSeriesMetadatal.addAll(copySeriesMetadata);
                }
            } else {
                copy.seriesMetadata = null;
            }
            if ((this.subset!= null)&&(!this.subset.isEmpty())) {
                List<DSAggregatePropertyType> sourceSubset;
                sourceSubset = (((this.subset!= null)&&(!this.subset.isEmpty()))?this.getSubset():null);
                @SuppressWarnings("unchecked")
                List<DSAggregatePropertyType> copySubset = ((List<DSAggregatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "subset", sourceSubset), sourceSubset));
                copy.subset = null;
                if (copySubset!= null) {
                    List<DSAggregatePropertyType> uniqueSubsetl = copy.getSubset();
                    uniqueSubsetl.addAll(copySubset);
                }
            } else {
                copy.subset = null;
            }
            if ((this.superset!= null)&&(!this.superset.isEmpty())) {
                List<DSAggregatePropertyType> sourceSuperset;
                sourceSuperset = (((this.superset!= null)&&(!this.superset.isEmpty()))?this.getSuperset():null);
                @SuppressWarnings("unchecked")
                List<DSAggregatePropertyType> copySuperset = ((List<DSAggregatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "superset", sourceSuperset), sourceSuperset));
                copy.superset = null;
                if (copySuperset!= null) {
                    List<DSAggregatePropertyType> uniqueSupersetl = copy.getSuperset();
                    uniqueSupersetl.addAll(copySuperset);
                }
            } else {
                copy.superset = null;
            }
        }
        return target;
    }

}
