//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package net.opengis.indoorgml.core.v_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for InterLayerConnectionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InterLayerConnectionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="typeOfTopoExpression" type="{http://www.opengis.net/indoorgml/1.0/core}typeOfTopoExpressionCodeType" minOccurs="0"/&gt;
 *         &lt;element name="comment" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="interConnects" type="{http://www.opengis.net/indoorgml/1.0/core}StatePropertyType" maxOccurs="2" minOccurs="2"/&gt;
 *         &lt;element name="ConnectedLayers" type="{http://www.opengis.net/indoorgml/1.0/core}SpaceLayerPropertyType" maxOccurs="2" minOccurs="2"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InterLayerConnectionType", propOrder = {
    "typeOfTopoExpression",
    "comment",
    "interConnects",
    "connectedLayers"
})
public class InterLayerConnectionType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlSchemaType(name = "anySimpleType")
    protected String typeOfTopoExpression;
    protected String comment;
    @XmlElement(required = true)
    protected List<StatePropertyType> interConnects;
    @XmlElement(name = "ConnectedLayers", required = true)
    protected List<SpaceLayerPropertyType> connectedLayers;

    /**
     * Gets the value of the typeOfTopoExpression property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTypeOfTopoExpression() {
        return typeOfTopoExpression;
    }

    /**
     * Sets the value of the typeOfTopoExpression property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTypeOfTopoExpression(String value) {
        this.typeOfTopoExpression = value;
    }

    /**
     * Gets the value of the comment property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getComment() {
        return comment;
    }

    /**
     * Sets the value of the comment property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setComment(String value) {
        this.comment = value;
    }

    /**
     * Gets the value of the interConnects property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the interConnects property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInterConnects().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StatePropertyType }
     * 
     * 
     */
    public List<StatePropertyType> getInterConnects() {
        if (interConnects == null) {
            interConnects = new ArrayList<StatePropertyType>();
        }
        return this.interConnects;
    }

    /**
     * Gets the value of the connectedLayers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the connectedLayers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConnectedLayers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpaceLayerPropertyType }
     * 
     * 
     */
    public List<SpaceLayerPropertyType> getConnectedLayers() {
        if (connectedLayers == null) {
            connectedLayers = new ArrayList<SpaceLayerPropertyType>();
        }
        return this.connectedLayers;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theTypeOfTopoExpression;
            theTypeOfTopoExpression = this.getTypeOfTopoExpression();
            strategy.appendField(locator, this, "typeOfTopoExpression", buffer, theTypeOfTopoExpression);
        }
        {
            String theComment;
            theComment = this.getComment();
            strategy.appendField(locator, this, "comment", buffer, theComment);
        }
        {
            List<StatePropertyType> theInterConnects;
            theInterConnects = (((this.interConnects!= null)&&(!this.interConnects.isEmpty()))?this.getInterConnects():null);
            strategy.appendField(locator, this, "interConnects", buffer, theInterConnects);
        }
        {
            List<SpaceLayerPropertyType> theConnectedLayers;
            theConnectedLayers = (((this.connectedLayers!= null)&&(!this.connectedLayers.isEmpty()))?this.getConnectedLayers():null);
            strategy.appendField(locator, this, "connectedLayers", buffer, theConnectedLayers);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof InterLayerConnectionType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final InterLayerConnectionType that = ((InterLayerConnectionType) object);
        {
            String lhsTypeOfTopoExpression;
            lhsTypeOfTopoExpression = this.getTypeOfTopoExpression();
            String rhsTypeOfTopoExpression;
            rhsTypeOfTopoExpression = that.getTypeOfTopoExpression();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "typeOfTopoExpression", lhsTypeOfTopoExpression), LocatorUtils.property(thatLocator, "typeOfTopoExpression", rhsTypeOfTopoExpression), lhsTypeOfTopoExpression, rhsTypeOfTopoExpression)) {
                return false;
            }
        }
        {
            String lhsComment;
            lhsComment = this.getComment();
            String rhsComment;
            rhsComment = that.getComment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comment", lhsComment), LocatorUtils.property(thatLocator, "comment", rhsComment), lhsComment, rhsComment)) {
                return false;
            }
        }
        {
            List<StatePropertyType> lhsInterConnects;
            lhsInterConnects = (((this.interConnects!= null)&&(!this.interConnects.isEmpty()))?this.getInterConnects():null);
            List<StatePropertyType> rhsInterConnects;
            rhsInterConnects = (((that.interConnects!= null)&&(!that.interConnects.isEmpty()))?that.getInterConnects():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interConnects", lhsInterConnects), LocatorUtils.property(thatLocator, "interConnects", rhsInterConnects), lhsInterConnects, rhsInterConnects)) {
                return false;
            }
        }
        {
            List<SpaceLayerPropertyType> lhsConnectedLayers;
            lhsConnectedLayers = (((this.connectedLayers!= null)&&(!this.connectedLayers.isEmpty()))?this.getConnectedLayers():null);
            List<SpaceLayerPropertyType> rhsConnectedLayers;
            rhsConnectedLayers = (((that.connectedLayers!= null)&&(!that.connectedLayers.isEmpty()))?that.getConnectedLayers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connectedLayers", lhsConnectedLayers), LocatorUtils.property(thatLocator, "connectedLayers", rhsConnectedLayers), lhsConnectedLayers, rhsConnectedLayers)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theTypeOfTopoExpression;
            theTypeOfTopoExpression = this.getTypeOfTopoExpression();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "typeOfTopoExpression", theTypeOfTopoExpression), currentHashCode, theTypeOfTopoExpression);
        }
        {
            String theComment;
            theComment = this.getComment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comment", theComment), currentHashCode, theComment);
        }
        {
            List<StatePropertyType> theInterConnects;
            theInterConnects = (((this.interConnects!= null)&&(!this.interConnects.isEmpty()))?this.getInterConnects():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interConnects", theInterConnects), currentHashCode, theInterConnects);
        }
        {
            List<SpaceLayerPropertyType> theConnectedLayers;
            theConnectedLayers = (((this.connectedLayers!= null)&&(!this.connectedLayers.isEmpty()))?this.getConnectedLayers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connectedLayers", theConnectedLayers), currentHashCode, theConnectedLayers);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof InterLayerConnectionType) {
            final InterLayerConnectionType copy = ((InterLayerConnectionType) draftCopy);
            if (this.typeOfTopoExpression!= null) {
                String sourceTypeOfTopoExpression;
                sourceTypeOfTopoExpression = this.getTypeOfTopoExpression();
                String copyTypeOfTopoExpression = ((String) strategy.copy(LocatorUtils.property(locator, "typeOfTopoExpression", sourceTypeOfTopoExpression), sourceTypeOfTopoExpression));
                copy.setTypeOfTopoExpression(copyTypeOfTopoExpression);
            } else {
                copy.typeOfTopoExpression = null;
            }
            if (this.comment!= null) {
                String sourceComment;
                sourceComment = this.getComment();
                String copyComment = ((String) strategy.copy(LocatorUtils.property(locator, "comment", sourceComment), sourceComment));
                copy.setComment(copyComment);
            } else {
                copy.comment = null;
            }
            if ((this.interConnects!= null)&&(!this.interConnects.isEmpty())) {
                List<StatePropertyType> sourceInterConnects;
                sourceInterConnects = (((this.interConnects!= null)&&(!this.interConnects.isEmpty()))?this.getInterConnects():null);
                @SuppressWarnings("unchecked")
                List<StatePropertyType> copyInterConnects = ((List<StatePropertyType> ) strategy.copy(LocatorUtils.property(locator, "interConnects", sourceInterConnects), sourceInterConnects));
                copy.interConnects = null;
                if (copyInterConnects!= null) {
                    List<StatePropertyType> uniqueInterConnectsl = copy.getInterConnects();
                    uniqueInterConnectsl.addAll(copyInterConnects);
                }
            } else {
                copy.interConnects = null;
            }
            if ((this.connectedLayers!= null)&&(!this.connectedLayers.isEmpty())) {
                List<SpaceLayerPropertyType> sourceConnectedLayers;
                sourceConnectedLayers = (((this.connectedLayers!= null)&&(!this.connectedLayers.isEmpty()))?this.getConnectedLayers():null);
                @SuppressWarnings("unchecked")
                List<SpaceLayerPropertyType> copyConnectedLayers = ((List<SpaceLayerPropertyType> ) strategy.copy(LocatorUtils.property(locator, "connectedLayers", sourceConnectedLayers), sourceConnectedLayers));
                copy.connectedLayers = null;
                if (copyConnectedLayers!= null) {
                    List<SpaceLayerPropertyType> uniqueConnectedLayersl = copy.getConnectedLayers();
                    uniqueConnectedLayersl.addAll(copyConnectedLayers);
                }
            } else {
                copy.connectedLayers = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new InterLayerConnectionType();
    }

}
