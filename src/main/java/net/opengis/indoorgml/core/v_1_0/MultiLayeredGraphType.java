//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package net.opengis.indoorgml.core.v_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MultiLayeredGraphType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MultiLayeredGraphType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="spaceLayers" type="{http://www.opengis.net/indoorgml/1.0/core}SpaceLayersType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="interEdges" type="{http://www.opengis.net/indoorgml/1.0/core}InterEdgesType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MultiLayeredGraphType", propOrder = {
    "spaceLayers",
    "interEdges"
})
public class MultiLayeredGraphType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<SpaceLayersType> spaceLayers;
    protected List<InterEdgesType> interEdges;

    /**
     * Gets the value of the spaceLayers property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the spaceLayers property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpaceLayers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SpaceLayersType }
     * 
     * 
     */
    public List<SpaceLayersType> getSpaceLayers() {
        if (spaceLayers == null) {
            spaceLayers = new ArrayList<SpaceLayersType>();
        }
        return this.spaceLayers;
    }

    /**
     * Gets the value of the interEdges property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the interEdges property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInterEdges().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InterEdgesType }
     * 
     * 
     */
    public List<InterEdgesType> getInterEdges() {
        if (interEdges == null) {
            interEdges = new ArrayList<InterEdgesType>();
        }
        return this.interEdges;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<SpaceLayersType> theSpaceLayers;
            theSpaceLayers = (((this.spaceLayers!= null)&&(!this.spaceLayers.isEmpty()))?this.getSpaceLayers():null);
            strategy.appendField(locator, this, "spaceLayers", buffer, theSpaceLayers);
        }
        {
            List<InterEdgesType> theInterEdges;
            theInterEdges = (((this.interEdges!= null)&&(!this.interEdges.isEmpty()))?this.getInterEdges():null);
            strategy.appendField(locator, this, "interEdges", buffer, theInterEdges);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MultiLayeredGraphType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MultiLayeredGraphType that = ((MultiLayeredGraphType) object);
        {
            List<SpaceLayersType> lhsSpaceLayers;
            lhsSpaceLayers = (((this.spaceLayers!= null)&&(!this.spaceLayers.isEmpty()))?this.getSpaceLayers():null);
            List<SpaceLayersType> rhsSpaceLayers;
            rhsSpaceLayers = (((that.spaceLayers!= null)&&(!that.spaceLayers.isEmpty()))?that.getSpaceLayers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "spaceLayers", lhsSpaceLayers), LocatorUtils.property(thatLocator, "spaceLayers", rhsSpaceLayers), lhsSpaceLayers, rhsSpaceLayers)) {
                return false;
            }
        }
        {
            List<InterEdgesType> lhsInterEdges;
            lhsInterEdges = (((this.interEdges!= null)&&(!this.interEdges.isEmpty()))?this.getInterEdges():null);
            List<InterEdgesType> rhsInterEdges;
            rhsInterEdges = (((that.interEdges!= null)&&(!that.interEdges.isEmpty()))?that.getInterEdges():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interEdges", lhsInterEdges), LocatorUtils.property(thatLocator, "interEdges", rhsInterEdges), lhsInterEdges, rhsInterEdges)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<SpaceLayersType> theSpaceLayers;
            theSpaceLayers = (((this.spaceLayers!= null)&&(!this.spaceLayers.isEmpty()))?this.getSpaceLayers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "spaceLayers", theSpaceLayers), currentHashCode, theSpaceLayers);
        }
        {
            List<InterEdgesType> theInterEdges;
            theInterEdges = (((this.interEdges!= null)&&(!this.interEdges.isEmpty()))?this.getInterEdges():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interEdges", theInterEdges), currentHashCode, theInterEdges);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MultiLayeredGraphType) {
            final MultiLayeredGraphType copy = ((MultiLayeredGraphType) draftCopy);
            if ((this.spaceLayers!= null)&&(!this.spaceLayers.isEmpty())) {
                List<SpaceLayersType> sourceSpaceLayers;
                sourceSpaceLayers = (((this.spaceLayers!= null)&&(!this.spaceLayers.isEmpty()))?this.getSpaceLayers():null);
                @SuppressWarnings("unchecked")
                List<SpaceLayersType> copySpaceLayers = ((List<SpaceLayersType> ) strategy.copy(LocatorUtils.property(locator, "spaceLayers", sourceSpaceLayers), sourceSpaceLayers));
                copy.spaceLayers = null;
                if (copySpaceLayers!= null) {
                    List<SpaceLayersType> uniqueSpaceLayersl = copy.getSpaceLayers();
                    uniqueSpaceLayersl.addAll(copySpaceLayers);
                }
            } else {
                copy.spaceLayers = null;
            }
            if ((this.interEdges!= null)&&(!this.interEdges.isEmpty())) {
                List<InterEdgesType> sourceInterEdges;
                sourceInterEdges = (((this.interEdges!= null)&&(!this.interEdges.isEmpty()))?this.getInterEdges():null);
                @SuppressWarnings("unchecked")
                List<InterEdgesType> copyInterEdges = ((List<InterEdgesType> ) strategy.copy(LocatorUtils.property(locator, "interEdges", sourceInterEdges), sourceInterEdges));
                copy.interEdges = null;
                if (copyInterEdges!= null) {
                    List<InterEdgesType> uniqueInterEdgesl = copy.getInterEdges();
                    uniqueInterEdgesl.addAll(copyInterEdges);
                }
            } else {
                copy.interEdges = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MultiLayeredGraphType();
    }

}
