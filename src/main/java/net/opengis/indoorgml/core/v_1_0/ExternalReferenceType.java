//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.23 at 04:12:02 PM KST 
//


package net.opengis.indoorgml.core.v_1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ExternalReferenceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ExternalReferenceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="informationSystem" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/&gt;
 *         &lt;element name="externalObject" type="{http://www.opengis.net/indoorgml/1.0/core}externalObjectReferenceType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExternalReferenceType", propOrder = {
    "informationSystem",
    "externalObject"
})
public class ExternalReferenceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlSchemaType(name = "anyURI")
    protected String informationSystem;
    @XmlElement(required = true)
    protected ExternalObjectReferenceType externalObject;

    /**
     * Gets the value of the informationSystem property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInformationSystem() {
        return informationSystem;
    }

    /**
     * Sets the value of the informationSystem property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInformationSystem(String value) {
        this.informationSystem = value;
    }

    /**
     * Gets the value of the externalObject property.
     * 
     * @return
     *     possible object is
     *     {@link ExternalObjectReferenceType }
     *     
     */
    public ExternalObjectReferenceType getExternalObject() {
        return externalObject;
    }

    /**
     * Sets the value of the externalObject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExternalObjectReferenceType }
     *     
     */
    public void setExternalObject(ExternalObjectReferenceType value) {
        this.externalObject = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theInformationSystem;
            theInformationSystem = this.getInformationSystem();
            strategy.appendField(locator, this, "informationSystem", buffer, theInformationSystem);
        }
        {
            ExternalObjectReferenceType theExternalObject;
            theExternalObject = this.getExternalObject();
            strategy.appendField(locator, this, "externalObject", buffer, theExternalObject);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ExternalReferenceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ExternalReferenceType that = ((ExternalReferenceType) object);
        {
            String lhsInformationSystem;
            lhsInformationSystem = this.getInformationSystem();
            String rhsInformationSystem;
            rhsInformationSystem = that.getInformationSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "informationSystem", lhsInformationSystem), LocatorUtils.property(thatLocator, "informationSystem", rhsInformationSystem), lhsInformationSystem, rhsInformationSystem)) {
                return false;
            }
        }
        {
            ExternalObjectReferenceType lhsExternalObject;
            lhsExternalObject = this.getExternalObject();
            ExternalObjectReferenceType rhsExternalObject;
            rhsExternalObject = that.getExternalObject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "externalObject", lhsExternalObject), LocatorUtils.property(thatLocator, "externalObject", rhsExternalObject), lhsExternalObject, rhsExternalObject)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theInformationSystem;
            theInformationSystem = this.getInformationSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "informationSystem", theInformationSystem), currentHashCode, theInformationSystem);
        }
        {
            ExternalObjectReferenceType theExternalObject;
            theExternalObject = this.getExternalObject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "externalObject", theExternalObject), currentHashCode, theExternalObject);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ExternalReferenceType) {
            final ExternalReferenceType copy = ((ExternalReferenceType) draftCopy);
            if (this.informationSystem!= null) {
                String sourceInformationSystem;
                sourceInformationSystem = this.getInformationSystem();
                String copyInformationSystem = ((String) strategy.copy(LocatorUtils.property(locator, "informationSystem", sourceInformationSystem), sourceInformationSystem));
                copy.setInformationSystem(copyInformationSystem);
            } else {
                copy.informationSystem = null;
            }
            if (this.externalObject!= null) {
                ExternalObjectReferenceType sourceExternalObject;
                sourceExternalObject = this.getExternalObject();
                ExternalObjectReferenceType copyExternalObject = ((ExternalObjectReferenceType) strategy.copy(LocatorUtils.property(locator, "externalObject", sourceExternalObject), sourceExternalObject));
                copy.setExternalObject(copyExternalObject);
            } else {
                copy.externalObject = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ExternalReferenceType();
    }

}
