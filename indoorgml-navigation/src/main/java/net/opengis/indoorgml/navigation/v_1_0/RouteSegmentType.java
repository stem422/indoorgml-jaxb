//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.22 at 10:05:51 PM KST 
//


package net.opengis.indoorgml.navigation.v_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import net.opengis.gml.v_3_2_1.CurvePropertyType;
import net.opengis.indoorgml.core.v_1_0.TransitionPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for RouteSegmentType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RouteSegmentType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="weight" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="connects" type="{http://www.opengis.net/indoorgml/1.0/navigation}RouteNodePropertyType" maxOccurs="2" minOccurs="2"/&gt;
 *         &lt;element name="referencedTransition" type="{http://www.opengis.net/indoorgml/1.0/core}TransitionPropertyType"/&gt;
 *         &lt;element name="geometry" type="{http://www.opengis.net/gml/3.2}CurvePropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RouteSegmentType", propOrder = {
    "weight",
    "connects",
    "referencedTransition",
    "geometry"
})
public class RouteSegmentType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected double weight;
    @XmlElement(required = true)
    protected List<RouteNodePropertyType> connects;
    @XmlElement(required = true)
    protected TransitionPropertyType referencedTransition;
    @XmlElement(required = true)
    protected CurvePropertyType geometry;

    /**
     * Gets the value of the weight property.
     * 
     */
    public double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     */
    public void setWeight(double value) {
        this.weight = value;
    }

    /**
     * Gets the value of the connects property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the connects property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConnects().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RouteNodePropertyType }
     * 
     * 
     */
    public List<RouteNodePropertyType> getConnects() {
        if (connects == null) {
            connects = new ArrayList<RouteNodePropertyType>();
        }
        return this.connects;
    }

    /**
     * Gets the value of the referencedTransition property.
     * 
     * @return
     *     possible object is
     *     {@link TransitionPropertyType }
     *     
     */
    public TransitionPropertyType getReferencedTransition() {
        return referencedTransition;
    }

    /**
     * Sets the value of the referencedTransition property.
     * 
     * @param value
     *     allowed object is
     *     {@link TransitionPropertyType }
     *     
     */
    public void setReferencedTransition(TransitionPropertyType value) {
        this.referencedTransition = value;
    }

    /**
     * Gets the value of the geometry property.
     * 
     * @return
     *     possible object is
     *     {@link CurvePropertyType }
     *     
     */
    public CurvePropertyType getGeometry() {
        return geometry;
    }

    /**
     * Sets the value of the geometry property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurvePropertyType }
     *     
     */
    public void setGeometry(CurvePropertyType value) {
        this.geometry = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        {
            List<RouteNodePropertyType> theConnects;
            theConnects = (((this.connects!= null)&&(!this.connects.isEmpty()))?this.getConnects():null);
            strategy.appendField(locator, this, "connects", buffer, theConnects);
        }
        {
            TransitionPropertyType theReferencedTransition;
            theReferencedTransition = this.getReferencedTransition();
            strategy.appendField(locator, this, "referencedTransition", buffer, theReferencedTransition);
        }
        {
            CurvePropertyType theGeometry;
            theGeometry = this.getGeometry();
            strategy.appendField(locator, this, "geometry", buffer, theGeometry);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RouteSegmentType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RouteSegmentType that = ((RouteSegmentType) object);
        {
            double lhsWeight;
            lhsWeight = this.getWeight();
            double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        {
            List<RouteNodePropertyType> lhsConnects;
            lhsConnects = (((this.connects!= null)&&(!this.connects.isEmpty()))?this.getConnects():null);
            List<RouteNodePropertyType> rhsConnects;
            rhsConnects = (((that.connects!= null)&&(!that.connects.isEmpty()))?that.getConnects():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connects", lhsConnects), LocatorUtils.property(thatLocator, "connects", rhsConnects), lhsConnects, rhsConnects)) {
                return false;
            }
        }
        {
            TransitionPropertyType lhsReferencedTransition;
            lhsReferencedTransition = this.getReferencedTransition();
            TransitionPropertyType rhsReferencedTransition;
            rhsReferencedTransition = that.getReferencedTransition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referencedTransition", lhsReferencedTransition), LocatorUtils.property(thatLocator, "referencedTransition", rhsReferencedTransition), lhsReferencedTransition, rhsReferencedTransition)) {
                return false;
            }
        }
        {
            CurvePropertyType lhsGeometry;
            lhsGeometry = this.getGeometry();
            CurvePropertyType rhsGeometry;
            rhsGeometry = that.getGeometry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometry", lhsGeometry), LocatorUtils.property(thatLocator, "geometry", rhsGeometry), lhsGeometry, rhsGeometry)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        {
            List<RouteNodePropertyType> theConnects;
            theConnects = (((this.connects!= null)&&(!this.connects.isEmpty()))?this.getConnects():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connects", theConnects), currentHashCode, theConnects);
        }
        {
            TransitionPropertyType theReferencedTransition;
            theReferencedTransition = this.getReferencedTransition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referencedTransition", theReferencedTransition), currentHashCode, theReferencedTransition);
        }
        {
            CurvePropertyType theGeometry;
            theGeometry = this.getGeometry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometry", theGeometry), currentHashCode, theGeometry);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof RouteSegmentType) {
            final RouteSegmentType copy = ((RouteSegmentType) draftCopy);
            {
                double sourceWeight;
                sourceWeight = this.getWeight();
                double copyWeight = strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight);
                copy.setWeight(copyWeight);
            }
            if ((this.connects!= null)&&(!this.connects.isEmpty())) {
                List<RouteNodePropertyType> sourceConnects;
                sourceConnects = (((this.connects!= null)&&(!this.connects.isEmpty()))?this.getConnects():null);
                @SuppressWarnings("unchecked")
                List<RouteNodePropertyType> copyConnects = ((List<RouteNodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "connects", sourceConnects), sourceConnects));
                copy.connects = null;
                if (copyConnects!= null) {
                    List<RouteNodePropertyType> uniqueConnectsl = copy.getConnects();
                    uniqueConnectsl.addAll(copyConnects);
                }
            } else {
                copy.connects = null;
            }
            if (this.referencedTransition!= null) {
                TransitionPropertyType sourceReferencedTransition;
                sourceReferencedTransition = this.getReferencedTransition();
                TransitionPropertyType copyReferencedTransition = ((TransitionPropertyType) strategy.copy(LocatorUtils.property(locator, "referencedTransition", sourceReferencedTransition), sourceReferencedTransition));
                copy.setReferencedTransition(copyReferencedTransition);
            } else {
                copy.referencedTransition = null;
            }
            if (this.geometry!= null) {
                CurvePropertyType sourceGeometry;
                sourceGeometry = this.getGeometry();
                CurvePropertyType copyGeometry = ((CurvePropertyType) strategy.copy(LocatorUtils.property(locator, "geometry", sourceGeometry), sourceGeometry));
                copy.setGeometry(copyGeometry);
            } else {
                copy.geometry = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RouteSegmentType();
    }

}
