//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.22 at 10:05:51 PM KST 
//


package net.opengis.indoorgml.navigation.v_1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import net.opengis.gml.v_3_2_1.PointPropertyType;
import net.opengis.indoorgml.core.v_1_0.StatePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for RouteNodeType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RouteNodeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="referencedState" type="{http://www.opengis.net/indoorgml/1.0/core}StatePropertyType"/&gt;
 *         &lt;element name="geometry" type="{http://www.opengis.net/gml/3.2}PointPropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RouteNodeType", propOrder = {
    "referencedState",
    "geometry"
})
public class RouteNodeType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected StatePropertyType referencedState;
    @XmlElement(required = true)
    protected PointPropertyType geometry;

    /**
     * Gets the value of the referencedState property.
     * 
     * @return
     *     possible object is
     *     {@link StatePropertyType }
     *     
     */
    public StatePropertyType getReferencedState() {
        return referencedState;
    }

    /**
     * Sets the value of the referencedState property.
     * 
     * @param value
     *     allowed object is
     *     {@link StatePropertyType }
     *     
     */
    public void setReferencedState(StatePropertyType value) {
        this.referencedState = value;
    }

    /**
     * Gets the value of the geometry property.
     * 
     * @return
     *     possible object is
     *     {@link PointPropertyType }
     *     
     */
    public PointPropertyType getGeometry() {
        return geometry;
    }

    /**
     * Sets the value of the geometry property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointPropertyType }
     *     
     */
    public void setGeometry(PointPropertyType value) {
        this.geometry = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            StatePropertyType theReferencedState;
            theReferencedState = this.getReferencedState();
            strategy.appendField(locator, this, "referencedState", buffer, theReferencedState);
        }
        {
            PointPropertyType theGeometry;
            theGeometry = this.getGeometry();
            strategy.appendField(locator, this, "geometry", buffer, theGeometry);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RouteNodeType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RouteNodeType that = ((RouteNodeType) object);
        {
            StatePropertyType lhsReferencedState;
            lhsReferencedState = this.getReferencedState();
            StatePropertyType rhsReferencedState;
            rhsReferencedState = that.getReferencedState();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referencedState", lhsReferencedState), LocatorUtils.property(thatLocator, "referencedState", rhsReferencedState), lhsReferencedState, rhsReferencedState)) {
                return false;
            }
        }
        {
            PointPropertyType lhsGeometry;
            lhsGeometry = this.getGeometry();
            PointPropertyType rhsGeometry;
            rhsGeometry = that.getGeometry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geometry", lhsGeometry), LocatorUtils.property(thatLocator, "geometry", rhsGeometry), lhsGeometry, rhsGeometry)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            StatePropertyType theReferencedState;
            theReferencedState = this.getReferencedState();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referencedState", theReferencedState), currentHashCode, theReferencedState);
        }
        {
            PointPropertyType theGeometry;
            theGeometry = this.getGeometry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometry", theGeometry), currentHashCode, theGeometry);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof RouteNodeType) {
            final RouteNodeType copy = ((RouteNodeType) draftCopy);
            if (this.referencedState!= null) {
                StatePropertyType sourceReferencedState;
                sourceReferencedState = this.getReferencedState();
                StatePropertyType copyReferencedState = ((StatePropertyType) strategy.copy(LocatorUtils.property(locator, "referencedState", sourceReferencedState), sourceReferencedState));
                copy.setReferencedState(copyReferencedState);
            } else {
                copy.referencedState = null;
            }
            if (this.geometry!= null) {
                PointPropertyType sourceGeometry;
                sourceGeometry = this.getGeometry();
                PointPropertyType copyGeometry = ((PointPropertyType) strategy.copy(LocatorUtils.property(locator, "geometry", sourceGeometry), sourceGeometry));
                copy.setGeometry(copyGeometry);
            } else {
                copy.geometry = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RouteNodeType();
    }

}
