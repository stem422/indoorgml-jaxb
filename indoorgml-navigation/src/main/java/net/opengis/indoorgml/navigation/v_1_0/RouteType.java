//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.22 at 10:05:51 PM KST 
//


package net.opengis.indoorgml.navigation.v_1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_2_1.AbstractFeatureType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for RouteType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RouteType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml/3.2}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="startRouteNode" type="{http://www.opengis.net/indoorgml/1.0/navigation}RouteNodePropertyType"/&gt;
 *         &lt;element name="endRouteNode" type="{http://www.opengis.net/indoorgml/1.0/navigation}RouteNodePropertyType"/&gt;
 *         &lt;element name="routeNodes" type="{http://www.opengis.net/indoorgml/1.0/navigation}RouteNodesType"/&gt;
 *         &lt;element name="path" type="{http://www.opengis.net/indoorgml/1.0/navigation}PathType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RouteType", propOrder = {
    "startRouteNode",
    "endRouteNode",
    "routeNodes",
    "path"
})
public class RouteType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected RouteNodePropertyType startRouteNode;
    @XmlElement(required = true)
    protected RouteNodePropertyType endRouteNode;
    @XmlElement(required = true)
    protected RouteNodesType routeNodes;
    @XmlElement(required = true)
    protected PathType path;

    /**
     * Gets the value of the startRouteNode property.
     * 
     * @return
     *     possible object is
     *     {@link RouteNodePropertyType }
     *     
     */
    public RouteNodePropertyType getStartRouteNode() {
        return startRouteNode;
    }

    /**
     * Sets the value of the startRouteNode property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteNodePropertyType }
     *     
     */
    public void setStartRouteNode(RouteNodePropertyType value) {
        this.startRouteNode = value;
    }

    /**
     * Gets the value of the endRouteNode property.
     * 
     * @return
     *     possible object is
     *     {@link RouteNodePropertyType }
     *     
     */
    public RouteNodePropertyType getEndRouteNode() {
        return endRouteNode;
    }

    /**
     * Sets the value of the endRouteNode property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteNodePropertyType }
     *     
     */
    public void setEndRouteNode(RouteNodePropertyType value) {
        this.endRouteNode = value;
    }

    /**
     * Gets the value of the routeNodes property.
     * 
     * @return
     *     possible object is
     *     {@link RouteNodesType }
     *     
     */
    public RouteNodesType getRouteNodes() {
        return routeNodes;
    }

    /**
     * Sets the value of the routeNodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteNodesType }
     *     
     */
    public void setRouteNodes(RouteNodesType value) {
        this.routeNodes = value;
    }

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link PathType }
     *     
     */
    public PathType getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link PathType }
     *     
     */
    public void setPath(PathType value) {
        this.path = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            RouteNodePropertyType theStartRouteNode;
            theStartRouteNode = this.getStartRouteNode();
            strategy.appendField(locator, this, "startRouteNode", buffer, theStartRouteNode);
        }
        {
            RouteNodePropertyType theEndRouteNode;
            theEndRouteNode = this.getEndRouteNode();
            strategy.appendField(locator, this, "endRouteNode", buffer, theEndRouteNode);
        }
        {
            RouteNodesType theRouteNodes;
            theRouteNodes = this.getRouteNodes();
            strategy.appendField(locator, this, "routeNodes", buffer, theRouteNodes);
        }
        {
            PathType thePath;
            thePath = this.getPath();
            strategy.appendField(locator, this, "path", buffer, thePath);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RouteType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RouteType that = ((RouteType) object);
        {
            RouteNodePropertyType lhsStartRouteNode;
            lhsStartRouteNode = this.getStartRouteNode();
            RouteNodePropertyType rhsStartRouteNode;
            rhsStartRouteNode = that.getStartRouteNode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startRouteNode", lhsStartRouteNode), LocatorUtils.property(thatLocator, "startRouteNode", rhsStartRouteNode), lhsStartRouteNode, rhsStartRouteNode)) {
                return false;
            }
        }
        {
            RouteNodePropertyType lhsEndRouteNode;
            lhsEndRouteNode = this.getEndRouteNode();
            RouteNodePropertyType rhsEndRouteNode;
            rhsEndRouteNode = that.getEndRouteNode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endRouteNode", lhsEndRouteNode), LocatorUtils.property(thatLocator, "endRouteNode", rhsEndRouteNode), lhsEndRouteNode, rhsEndRouteNode)) {
                return false;
            }
        }
        {
            RouteNodesType lhsRouteNodes;
            lhsRouteNodes = this.getRouteNodes();
            RouteNodesType rhsRouteNodes;
            rhsRouteNodes = that.getRouteNodes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "routeNodes", lhsRouteNodes), LocatorUtils.property(thatLocator, "routeNodes", rhsRouteNodes), lhsRouteNodes, rhsRouteNodes)) {
                return false;
            }
        }
        {
            PathType lhsPath;
            lhsPath = this.getPath();
            PathType rhsPath;
            rhsPath = that.getPath();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "path", lhsPath), LocatorUtils.property(thatLocator, "path", rhsPath), lhsPath, rhsPath)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RouteNodePropertyType theStartRouteNode;
            theStartRouteNode = this.getStartRouteNode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startRouteNode", theStartRouteNode), currentHashCode, theStartRouteNode);
        }
        {
            RouteNodePropertyType theEndRouteNode;
            theEndRouteNode = this.getEndRouteNode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endRouteNode", theEndRouteNode), currentHashCode, theEndRouteNode);
        }
        {
            RouteNodesType theRouteNodes;
            theRouteNodes = this.getRouteNodes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "routeNodes", theRouteNodes), currentHashCode, theRouteNodes);
        }
        {
            PathType thePath;
            thePath = this.getPath();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "path", thePath), currentHashCode, thePath);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof RouteType) {
            final RouteType copy = ((RouteType) draftCopy);
            if (this.startRouteNode!= null) {
                RouteNodePropertyType sourceStartRouteNode;
                sourceStartRouteNode = this.getStartRouteNode();
                RouteNodePropertyType copyStartRouteNode = ((RouteNodePropertyType) strategy.copy(LocatorUtils.property(locator, "startRouteNode", sourceStartRouteNode), sourceStartRouteNode));
                copy.setStartRouteNode(copyStartRouteNode);
            } else {
                copy.startRouteNode = null;
            }
            if (this.endRouteNode!= null) {
                RouteNodePropertyType sourceEndRouteNode;
                sourceEndRouteNode = this.getEndRouteNode();
                RouteNodePropertyType copyEndRouteNode = ((RouteNodePropertyType) strategy.copy(LocatorUtils.property(locator, "endRouteNode", sourceEndRouteNode), sourceEndRouteNode));
                copy.setEndRouteNode(copyEndRouteNode);
            } else {
                copy.endRouteNode = null;
            }
            if (this.routeNodes!= null) {
                RouteNodesType sourceRouteNodes;
                sourceRouteNodes = this.getRouteNodes();
                RouteNodesType copyRouteNodes = ((RouteNodesType) strategy.copy(LocatorUtils.property(locator, "routeNodes", sourceRouteNodes), sourceRouteNodes));
                copy.setRouteNodes(copyRouteNodes);
            } else {
                copy.routeNodes = null;
            }
            if (this.path!= null) {
                PathType sourcePath;
                sourcePath = this.getPath();
                PathType copyPath = ((PathType) strategy.copy(LocatorUtils.property(locator, "path", sourcePath), sourcePath));
                copy.setPath(copyPath);
            } else {
                copy.path = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RouteType();
    }

}
